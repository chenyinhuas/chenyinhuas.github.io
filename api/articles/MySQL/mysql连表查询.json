{"title":"多表查询","uid":"2f35a19b4bc2eb8b3ed2288c836011ca","slug":"MySQL/mysql连表查询","date":"2023-01-07T07:39:29.707Z","updated":"2023-01-07T07:42:41.025Z","comments":true,"path":"api/articles/MySQL/mysql连表查询.json","keywords":null,"cover":"https://files.catbox.moe/l8sn6i.png","content":"<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><p><img src=\"https://img-blog.csdnimg.cn/cd54817c56d84c7d908e7f2629904144.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbWFzdGVyIGNhdA==,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>笛卡尔积(或交叉连接)的理解。</p>\n<p>笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 </p>\n<p>SQL99：<code>CROSS  JOIN</code> 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。</p>\n<p>多表查询需要有连接条件：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n\n\n<p>多表查询，建议：</p>\n<ol>\n<li>从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。</li>\n<li>可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）</li>\n</ol>\n<p>结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）</p>\n<h2 id=\"多表查询的分类：\"><a href=\"#多表查询的分类：\" class=\"headerlink\" title=\"多表查询的分类：\"></a>多表查询的分类：</h2><p>角度1：等值连接 vs 非等值连接</p>\n<p>角度2：自连接 vs 非自连接</p>\n<p>角度3：内连接 vs 外连接</p>\n<p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。</p>\n<p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，还查询到了左表 或 右表中不匹配的行。</p>\n<p>外连接的分类：左外连接、右外连接、满外连接。</p>\n<p>左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,这种连接称为左外连接。</p>\n<p>右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行, 这种连接称为右外连接。</p>\n<img src=\"https://files.catbox.moe/m60map.png\" style=\"zoom:50%;\" />\n\n\n\n<p>SQL92语法实现内连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名; # 同等的条件</code></pre>\n\n<p>SQL92语法实现外连接：使用 + ——- MYSQL不支持SQL92语法中外连接的写法！</p>\n<p>（Oracle支持SQL92语法实现外连接）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名(+); # 同等的条件</code></pre>\n\n\n\n<p>SQL99语法中使用JOIN …ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。</p>\n<p>SQL99语法实现内连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 \nJOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n</code></pre>\n\n<p>SQL99语法实现外连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现左连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现右连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n\n\n<p>满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n\n\n<p>UNION的使用</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,.....FROM 表名 别名\nUNION [ALL]\nSELECT 别名.列名,.....FROM 表名 别名</code></pre>\n\n<p>UNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。（去重时导致，效率过低）</p>\n<p>UNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分不去重。</p>\n<p>注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。</p>\n<h2 id=\"7种JOIN的实现：\"><a href=\"#7种JOIN的实现：\" class=\"headerlink\" title=\"7种JOIN的实现：\"></a>7种JOIN的实现：</h2><p>中图，内连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左上图，左外连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>右上图，右外连接：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左中图：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>右中图：</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n\n\n<p>左下图：满外连接</p>\n<p>方式1：左上图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>方式2：左中图 UNION ALL 右上图</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名</code></pre>\n\n\n\n<p>右下图：左中图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n\n\n<p>SQL99语法的新特性1：自然连接</p>\n<p>NATURAL JOIN：它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;</code></pre>\n\n\n\n<p>SQL99语法的新特性2：自然连接</p>\n<p>USING：适用于多表查询，有相同列名的查询（不适用与自连接）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);</code></pre>\n\n\n\n<p>拓展：可以先JOIN连接但不建议（具体看需求）</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 &#x3D; 别名.列名\nAND 别名.列名 &#x3D; 别名.列名；</code></pre>","feature":true,"text":"多表查询 笛卡尔积(或交叉连接)的理解。 笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 SQL99：CROSS JOIN 表示交叉...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"MYSQL","slug":"MYSQL","count":3,"path":"api/categories/MYSQL.json"}],"tags":[{"name":"MYSQL","slug":"MYSQL","count":2,"path":"api/tags/MYSQL.json"},{"name":"多表查询","slug":"多表查询","count":1,"path":"api/tags/多表查询.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">多表查询的分类：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7%E7%A7%8DJOIN%E7%9A%84%E5%AE%9E%E7%8E%B0%EF%BC%9A\"><span class=\"toc-text\">7种JOIN的实现：</span></a></li></ol>","author":{"name":"陈花花","slug":"blog-author","avatar":"https://files.catbox.moe/wioly8.jpg","link":"/","description":"一位正在重塑和新增知识的测试人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"大常用的聚合函数","uid":"e2cddd99de188368b93b43730ab7c3b6","slug":"MySQL/大常用的聚合函数","date":"2023-01-04T13:43:16.862Z","updated":"2023-01-04T13:47:03.518Z","comments":true,"path":"api/articles/MySQL/大常用的聚合函数.json","keywords":null,"cover":"https://files.catbox.moe/l8sn6i.png","text":"大常用的聚合函数常见的几个聚合函数：# 只适用于数值类型的字段（或变量）AVG（平均值） &#x2F; SUM（求和） #如何需要统计表中的记录数,使用COUNT (*)、COUNT (1)、COUNT (具体字段)哪个效率更高呢?* #如果使用的是MyISAM存储引擎,则三者效...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"MYSQL","slug":"MYSQL","count":3,"path":"api/categories/MYSQL.json"}],"tags":[{"name":"MYSQL","slug":"MYSQL","count":2,"path":"api/tags/MYSQL.json"},{"name":"聚合函数","slug":"聚合函数","count":1,"path":"api/tags/聚合函数.json"}],"author":{"name":"陈花花","slug":"blog-author","avatar":"https://files.catbox.moe/wioly8.jpg","link":"/","description":"一位正在重塑和新增知识的测试人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}