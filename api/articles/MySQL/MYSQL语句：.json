{"title":"MYSQL语句","uid":"2d9b979e4a3d41ff207edc96f0b73a15","slug":"MySQL/MYSQL语句：","date":"2022-11-20T13:19:54.352Z","updated":"2023-01-04T13:39:44.425Z","comments":true,"path":"api/articles/MySQL/MYSQL语句：.json","keywords":null,"cover":"https://files.catbox.moe/l8sn6i.png","content":"<p>MYSQL知识点学习</p>\n<p>学习网站：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">https://dev.mysql.com/doc/refman/8.0/en/</a></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093059904.png\" alt=\"image-20220311093059904\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093514689.png\" alt=\"image-20220311093514689\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093719662.png\" alt=\"image-20220311093719662\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093834662.png\" alt=\"image-20220311093834662\"></p>\n<p>表，记录，字段</p>\n<p>E-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。</p>\n<p>一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).</p>\n<p>关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：</p>\n<ol>\n<li>键值型数据库: Redis.</li>\n<li>文档型数据库: MongoDB</li>\n<li>搜索引Y数据库: ES, Solr</li>\n<li>列式数据库: HBase</li>\n<li>图形数据库: InfoGrid</li>\n</ol>\n<p>ORM 思想：对象关系的映射（object Relational Mapping）</p>\n<p>数据库中的一个表&lt;—&gt;java或python中的一个类</p>\n<p>表中的一条数据&lt;—&gt;类中的一个对象（或实体）</p>\n<p>表中的一个列&lt;—&gt;类中的一个字段、属性（fieid）</p>\n<p>表的关联关系</p>\n<p>四种：</p>\n<p>一对一的关联，</p>\n<p>一对多的关联（主表（从表）），</p>\n<p>多对多的关联（主表（（联接表）从表）），</p>\n<p>自我引用。</p>\n<h1 id=\"SQL语言的分类\"><a href=\"#SQL语言的分类\" class=\"headerlink\" title=\"SQL语言的分类\"></a>SQL语言的分类</h1><p>DDL：数据定义语言。</p>\n<p>CREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)</p>\n<p>DML：数据操作语言。</p>\n<p>INSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)</p>\n<p>DCL：操作控制语言。</p>\n<p>COMMIT(提交修改永久性（事物相关）) </p>\n<p>ROLLBACK(回滚/撤回（事物相关）) </p>\n<p>SAVEPOINT(设置保存点) </p>\n<p>GRANT(赋予权限) \\ REVOKE(取消权限)</p>\n<p>命令结束符合: (; \\G\\g)</p>\n<p>SQL 大小写规范：</p>\n<ol>\n<li>MYSQL在Windows环境下是大小写不敏感的</li>\n<li>MYSQL在Linux环境下是大小写敏感的</li>\n<li>数据库名、表名、表的别名、变量名是严格区分大小写的。</li>\n<li>关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。</li>\n<li>推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。</li>\n<li>SQL关键字、函数名、绑定变量等都大写</li>\n</ol>\n<p>可以使用如下格式的注释结构单行注释:</p>\n<ol>\n<li>#注释文字(MySQL特有的方式)</li>\n<li>单行注释: I-注释文字(–后面必须包含一个空格。)</li>\n<li>多行注释: /*注释文字 */</li>\n</ol>\n<p>导入现有的数据表、表数据：</p>\n<ol>\n<li>source  文件的全路径名</li>\n<li>基于具体的图形化界面的工具可以导入数据</li>\n</ol>\n<h2 id=\"msyql命令：\"><a href=\"#msyql命令：\" class=\"headerlink\" title=\"msyql命令：\"></a>msyql命令：</h2><h3 id=\"登录命令\"><a href=\"#登录命令\" class=\"headerlink\" title=\"登录命令\"></a>登录命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -P 端口号 -h localhost -p &#x2F;&#x2F; 登录指定服务器</code></pre>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">msyql -V\nmysql --version\nselect version(); &#x2F;&#x2F; 登录后查看当前版本信息</code></pre>\n\n<p>开启-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net start mysql80</code></pre>\n\n<p>停止-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net stop mysql80</code></pre>\n\n<p>查看数据库信息-DB：database,看做是数据库文件  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show databases;</code></pre>\n\n<p>创建数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create database 库名;</code></pre>\n\n<p>选中数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">use 库名;</code></pre>\n\n<p>选中数据库查看表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show tables;          </code></pre>\n\n<p>创建表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create table emplogees(需创建的参数);</code></pre>\n\n<p>添加数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">insert into 表名 values(1001,&#39;Tom&#39;);</code></pre>\n\n<p>查看表数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from employee;</code></pre>\n\n<p>添加数据库：（1.基于具体的图形化界面的工具可以导入数据）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">source 文件的全路径名称</code></pre>\n\n<p>删除库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">drop database 库名; </code></pre>\n\n\n\n<h2 id=\"SQL语句，简单SELECT搜索语句：\"><a href=\"#SQL语句，简单SELECT搜索语句：\" class=\"headerlink\" title=\"SQL语句，简单SELECT搜索语句：\"></a>SQL语句，简单SELECT搜索语句：</h2><p>查询多列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；</code></pre>\n\n<p>查询所有列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；\n\nSELECT * from 表名；</code></pre>\n\n<p>查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。</p>\n<p>关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）</p>\n<p>分组去重：group by（进行分组查询)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；</code></pre>\n\n<p>查询结果限制返回行数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  &#x2F;&#x2F; 跳过0条，从第一条数据开始取，取两条数据 </code></pre>\n\n<p>也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量</p>\n<p>将查询后的列重新命名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对&quot;&quot;引起来，不要使用&#39;&#39;。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;</code></pre>\n\n<p>空值参与运算，空值参与运算：结果一定也为空。</p>\n<p>空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employee_id, &quot;月工资&quot;，salary * (1 + IFNULL(commission_pct,0)) * 12 &#39;&#39;&quot;年工资&quot;，commission_pct  FROM employees；</code></pre>\n\n<p>&lt;=&gt;:安全等于。可以查询到数据为null的。</p>\n<p>函数查询为null：ISNULL(表名)</p>\n<p>伪表(DUAL)：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 数值 FROM DUAL;</code></pre>\n\n<p>着重号``(在表名或库名与关键字重名时必须加上)</p>\n<p>常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select employee_id,last_name,&#39;常量&#39;,123（常量） FROM employees;</code></pre>\n\n<p>显示表结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DESCRIBE 表名;\n\nDESC 表名;</code></pre>\n\n<p>最小 LEAST(值) \\ 最大 GREATEST(值)</p>\n<p>in （set值），not in （set值，set）</p>\n<p>查询介于之间语句：BETWEEN</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值</code></pre>\n\n<p>查询除某个数据信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">!&#x3D;，not in(值) （判断取值不是这个的值）</code></pre>\n\n<p>用WHERE过滤空值</p>\n<p>判断取值为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NULL</code></pre>\n\n<p>判断取值不为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NOT&#96; &#96;NULL</code></pre>\n\n<p>高级操作符：OR（或）</p>\n<p>模糊查询语句：like  ‘匹配内容’</p>\n<p>考点 like 相似</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">like &#39;%北京%&#39;列名包括北京的字样\nlike &#39;北京%&#39; 列名北京开头\nlike &#39;%北京&#39; 列名北京结尾\n</code></pre>\n\n<h2 id=\"正则表达式：\"><a href=\"#正则表达式：\" class=\"headerlink\" title=\"正则表达式：\"></a>正则表达式：</h2><ol>\n<li>_ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）</li>\n<li>% ：百分号 代表匹配0个或多个字符；</li>\n<li>[]: 中括号 代表匹配其中的任意一个字符；</li>\n<li>[^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。</li>\n</ol>\n<p>转义字符：\\ ，在需要转义的符合前输入 \\。</p>\n<p>转义关键字：ESCAPE，把需要转义的字符，输入在后方。   </p>\n<h2 id=\"REGEXP运算符\"><a href=\"#REGEXP运算符\" class=\"headerlink\" title=\"REGEXP运算符\"></a>REGEXP运算符</h2><ol>\n<li>‘^’匹配以该字符后面的字符开头的字符串。</li>\n<li> ‘$’匹配以该字符前面的字符结尾的字符串。</li>\n<li>‘.’匹配任何一个单字符。</li>\n<li> “[…]”匹配在方括号内的任何字符。例如, “[abc]”匹配”a”或”b”或”c”。为了命名字符的范围,使用一个’-‘。”[a-z]”匹配任何字母,而“[0-9]”匹配任何数字。</li>\n<li>‘ * ‘匹配零个或多个在它前面的字符。例如, “ x* “匹配任何数量的’x’字符, “ [0-9]* “匹配任何数量的数字,而”*”匹配任何数量的任何字符。</li>\n</ol>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）</p>\n<p>&amp;（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） &gt;&gt;（按位右移位） &lt;&lt;（按位左移位）</p>\n<h2 id=\"排序与分页\"><a href=\"#排序与分页\" class=\"headerlink\" title=\"排序与分页\"></a>排序与分页</h2><p>排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。</p>\n<p>升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 ASC;  # ascend</code></pre>\n\n<p>降序语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY  列名  DESC; # descend</code></pre>\n\n<p><strong>注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。</strong></p>\n<p><strong>强调格式：WHERE需要声明在FROM后，ORDER BY之前。</strong></p>\n<p>二级排序，语法格式：以此类推</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 DESC,列名 ASC;</code></pre>\n\n<p>分页：mysql使用limit实习数据的分页显示</p>\n<p>分页语法格式：（必须放置语句最后）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;</code></pre>\n\n<p>MYSQL8.0新特性：LIMIT…OFFSET…语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;</code></pre>\n\n<p>字节函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LENGTH(列名);</code></pre>\n\n<p>函数时间戳转换为日期类型进行显示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））</code></pre>\n\n<p>（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下： 2020-03-23 15:28:46</code></pre>\n\n<p>  （2）含有format参数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数,&#39;%Y-%m-%d&#39;（选择要转化的格式）) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下：2020-03-23</code></pre>\n\n<p>format（可选参数）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0&#x3D;Sunday ……6&#x3D;Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。</code></pre>\n\n<p>函数IFNULL使用说明：</p>\n<p>MySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；</p>\n<p>IFNULL函数语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。</code></pre>\n\n\n\n<h2 id=\"多表查询：\"><a href=\"#多表查询：\" class=\"headerlink\" title=\"多表查询：\"></a>多表查询：</h2><p>笛卡尔积(或交叉连接)的理解。</p>\n<p>笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 </p>\n<p>SQL99：<code>CROSS  JOIN</code> 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。</p>\n<p>多表查询需要有连接条件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>多表查询，建议：</p>\n<ol>\n<li>从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。</li>\n<li>可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）</li>\n</ol>\n<p>结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）</p>\n<h3 id=\"多表查询的分类：\"><a href=\"#多表查询的分类：\" class=\"headerlink\" title=\"多表查询的分类：\"></a>多表查询的分类：</h3><p>角度1：等值连接 vs 非等值连接</p>\n<p>角度2：自连接 vs 非自连接</p>\n<p>角度3：内连接 vs 外连接</p>\n<p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。</p>\n<p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，</p>\n<p>​               还查询到了左表 或 右表中不匹配的行。</p>\n<p>外连接的分类：左外连接、右外连接、满外连接。</p>\n<p>左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,</p>\n<p>​                  这种连接称为左外连接。</p>\n<p>右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,</p>\n<p>​                  这种连接称为右外连接。</p>\n<p>SQL92语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名; # 同等的条件</code></pre>\n\n<p>SQL92语法实现外连接：使用 + ——- MYSQL不支持SQL92语法中外连接的写法！</p>\n<p>（Oracle支持SQL92语法实现外连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名(+); # 同等的条件</code></pre>\n\n<p>SQL99语法中使用JOIN …ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。</p>\n<p>SQL99语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 \nJOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n</code></pre>\n\n<p>SQL99语法实现外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现左连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现右连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220314153310242.png\" alt=\"image-20220314153310242\"></p>\n<p>UNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。</p>\n<p>​                         （去重时导致，效率过低）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>UNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，</p>\n<p>​                                  不去重。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。</p>\n<p>7种JOIN的实现：</p>\n<p>中图，内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左上图，左外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>右上图，右外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>右中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>左下图：满外连接</p>\n<p>方式1：左上图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>方式2：左中图 UNION ALL 右上图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名</code></pre>\n\n<p>右下图：左中图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>SQL99语法的新特性1：自然连接</p>\n<p>NATURAL JOIN：它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;</code></pre>\n\n<p>SQL99语法的新特性2：自然连接</p>\n<p>USING：适用于多表查询，有相同列名的查询（不适用与自连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);</code></pre>\n\n<p>拓展：可以先JOIN连接但不建议（具体看需求）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 &#x3D; 别名.列名\nAND 别名.列名 &#x3D; 别名.列名；</code></pre>\n\n\n\n<h2 id=\"函数的理解：\"><a href=\"#函数的理解：\" class=\"headerlink\" title=\"函数的理解：\"></a>函数的理解：</h2><p>从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。</p>\n<p>MySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)</p>\n<p>两种SQL函数：（单行函数，多行函数）</p>\n<p>单行函数：</p>\n<ol>\n<li>操作数据对象，接受参数返回一个结果。</li>\n<li>只对一行进行变换，每行返回一个结果。</li>\n<li>可以嵌套，参数可以是一列或一个值。</li>\n</ol>\n<p>1.数值函数</p>\n<p>1.1基本的操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n</code></pre>\n\n<p>1.2取随机数：（也称伪随机数，指定因子返回数则固定）</p>\n<pre class=\"line-numbers language-;\" data-language=\";\"><code class=\"language-;\"># 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);</code></pre>\n\n<p>1.3四舍五入，截断操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;</code></pre>\n\n<p>1.4角度与弧度的互换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));</code></pre>\n\n<p>1.5三角函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);</code></pre>\n\n<p>1.6指数和对数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X&lt;&#x3D;0时,返回NULL\nLOG2(x);</code></pre>\n\n<p>1.7进制间的转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);</code></pre>\n\n<p>2.字符串函数</p>\n<h6 id=\"ASCII-返回字符串S中的第一个字符的ASCII码值\"><a href=\"#ASCII-返回字符串S中的第一个字符的ASCII码值\" class=\"headerlink\" title=\"# ASCII() 返回字符串S中的第一个字符的ASCII码值\"></a># ASCII() 返回字符串S中的第一个字符的ASCII码值</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);</code></pre>\n\n<h6 id=\"连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\"><a href=\"#连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\" class=\"headerlink\" title=\"# 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）\"></a># 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT CONCAT(别名.列名, &#39; 固定连接字符串 &#39;, 别名.列名) &quot;列名展示&quot; \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<h6 id=\"同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\"><a href=\"#同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\" class=\"headerlink\" title=\"# 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x\"></a># 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">CONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);</code></pre>\n\n<h6 id=\"将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"><a href=\"#将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\" class=\"headerlink\" title=\"# 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"></a># 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))</code></pre>\n\n<h6 id=\"用字符串b替换字符串str中所有出现的字符串a\"><a href=\"#用字符串b替换字符串str中所有出现的字符串a\" class=\"headerlink\" title=\"# 用字符串b替换字符串str中所有出现的字符串a\"></a># 用字符串b替换字符串str中所有出现的字符串a</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPLACE(str, a(需要要替换的字符串), b(替换上的字符串))</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成大写字母\"><a href=\"#将字符串s的所有字母转成大写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成大写字母\"></a># 将字符串s的所有字母转成大写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">UPPER(s) 或 UCASE(s)</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成小写字母\"><a href=\"#将字符串s的所有字母转成小写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成小写字母\"></a># 将字符串s的所有字母转成小写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOWER(s) 或LCASE(s)</code></pre>\n\n<h6 id=\"返回字符串str最左边的n个字符\"><a href=\"#返回字符串str最左边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最左边的n个字符\"></a># 返回字符串str最左边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LEFT(str,n(从最左边，根据数值取出字符))</code></pre>\n\n<h6 id=\"返回字符串str最右边的n个字符\"><a href=\"#返回字符串str最右边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最右边的n个字符\"></a># 返回字符串str最右边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RIGHT(str,n(从最右边，根据数值取出字符))</code></pre>\n\n<h6 id=\"用字符串pad对str最左边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最左边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最左边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最左边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))</code></pre>\n\n<h6 id=\"用字符串pad对str最右边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最右边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最右边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最右边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RPAD: 实现左对齐效果\nRPAD(str ,len, pad)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的空格\"><a href=\"#去掉字符串s开始与结尾的空格\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的空格\"></a># 去掉字符串s开始与结尾的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s左侧的空格\"><a href=\"#去掉字符串s左侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s左侧的空格\"></a># 去掉字符串s左侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s右侧的空格\"><a href=\"#去掉字符串s右侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s右侧的空格\"></a># 去掉字符串s右侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的s1\"><a href=\"#去掉字符串s开始与结尾的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的s1\"></a># 去掉字符串s开始与结尾的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s1 FROM s)\n例子：TRIM(&#39;字符串&#39;(首尾出现进行去除) FROM &#39;字符串&#39;(首尾出现相同的字符串则进行去除));</code></pre>\n\n<h6 id=\"去掉字符串s开始处的s1\"><a href=\"#去掉字符串s开始处的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始处的s1\"></a># 去掉字符串s开始处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(LEADING s1FROM s)</code></pre>\n\n<h6 id=\"去掉字符串s结尾处的s1\"><a href=\"#去掉字符串s结尾处的s1\" class=\"headerlink\" title=\"# 去掉字符串s结尾处的s1\"></a># 去掉字符串s结尾处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(TRAILING s1FROM s)</code></pre>\n\n<h6 id=\"返回str重复n次的结果\"><a href=\"#返回str重复n次的结果\" class=\"headerlink\" title=\"# 返回str重复n次的结果\"></a># 返回str重复n次的结果</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPEAT(str, n(数值，重复的次数))</code></pre>\n\n<h6 id=\"返回n个空格\"><a href=\"#返回n个空格\" class=\"headerlink\" title=\"# 返回n个空格\"></a># 返回n个空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SPACE(n)</code></pre>\n\n<h6 id=\"比较字符串s1-s2的ASCII码值的大小\"><a href=\"#比较字符串s1-s2的ASCII码值的大小\" class=\"headerlink\" title=\"# 比较字符串s1,s2的ASCII码值的大小\"></a># 比较字符串s1,s2的ASCII码值的大小</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">STRCMP(s1,s2)</code></pre>\n\n<h6 id=\"返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\"><a href=\"#返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\" class=\"headerlink\" title=\"# 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同\"></a># 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SUBSTR(s,index(),len(取的长度))</code></pre>\n\n<h6 id=\"返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\"><a href=\"#返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\" class=\"headerlink\" title=\"# 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。\"></a># 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。</h6><h6 id=\"未找到，返回0\"><a href=\"#未找到，返回0\" class=\"headerlink\" title=\"未找到，返回0\"></a>未找到，返回0</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOCATE(substr,str)</code></pre>\n\n<h6 id=\"返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\"><a href=\"#返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\" class=\"headerlink\" title=\"# 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\\"></a># 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">ELT(m,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s在字符串列表中第一次出现的位置\"><a href=\"#返回字符串s在字符串列表中第一次出现的位置\" class=\"headerlink\" title=\"# 返回字符串s在字符串列表中第一次出现的位置\"></a># 返回字符串s在字符串列表中第一次出现的位置</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIELD(s,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"><a href=\"#返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\" class=\"headerlink\" title=\"# 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"></a># 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIND_IN_SET(s1,s2)</code></pre>\n\n<h6 id=\"返回s反转后的字符串\"><a href=\"#返回s反转后的字符串\" class=\"headerlink\" title=\"# 返回s反转后的字符串\"></a># 返回s反转后的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REVERSE(s)</code></pre>\n\n<h6 id=\"比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"><a href=\"#比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\" class=\"headerlink\" title=\"# 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"></a># 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">NULLIF(value1,value2)</code></pre>\n\n<p>注意：MySQL中，字符串的位置是从1开始的。</p>\n","feature":true,"text":"MYSQL知识点学习 学习网站： https://dev.mysql.com/doc/refman/8.0/en/ 表，记录，字段 E-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。 一个实体集(class)对应于数据库中...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"MYSQL","slug":"MYSQL","count":2,"path":"api/categories/MYSQL.json"}],"tags":[{"name":"mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"},{"name":"语句","slug":"语句","count":1,"path":"api/tags/语句.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SQL%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">SQL语言的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#msyql%E5%91%BD%E4%BB%A4%EF%BC%9A\"><span class=\"toc-text\">msyql命令：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%99%BB%E5%BD%95%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">登录命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">查看版本</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SQL%E8%AF%AD%E5%8F%A5%EF%BC%8C%E7%AE%80%E5%8D%95SELECT%E6%90%9C%E7%B4%A2%E8%AF%AD%E5%8F%A5%EF%BC%9A\"><span class=\"toc-text\">SQL语句，简单SELECT搜索语句：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">正则表达式：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#REGEXP%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">REGEXP运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5\"><span class=\"toc-text\">排序与分页</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%9A\"><span class=\"toc-text\">多表查询：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%9A\"><span class=\"toc-text\">多表查询的分类：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">函数的理解：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#ASCII-%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2S%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84ASCII%E7%A0%81%E5%80%BC\"><span class=\"toc-text\"># ASCII() 返回字符串S中的第一个字符的ASCII码值</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5s1-s2-%E2%80%A6%E2%80%A6-sn%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E5%8F%AF%E4%BB%A5%E7%94%B3%E6%98%8E%E5%A4%9A%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E6%8B%BC%E6%8E%A5%EF%BC%89\"><span class=\"toc-text\"># 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%90%8CCONCAT-s1-s2-%E2%80%A6-%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%86%E6%98%AF%E6%AF%8F%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E8%A6%81%E5%8A%A0%E4%B8%8Ax\"><span class=\"toc-text\"># 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2str%E4%BB%8E%E7%AC%ACidx%E4%BD%8D%E7%BD%AE%E5%BC%80%E5%A7%8B%EF%BC%8Clen%E4%B8%AA%E5%AD%97%E7%AC%A6%E9%95%BF%E7%9A%84%E5%AD%90%E4%B8%B2%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2replacestr%EF%BC%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%B4%A2%E5%BC%95%E6%98%AF%E4%BB%8E1%E5%BC%80%E5%A7%8B%E7%9A%84%EF%BC%89\"><span class=\"toc-text\"># 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2b%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2str%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2a\"><span class=\"toc-text\"># 用字符串b替换字符串str中所有出现的字符串a</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2s%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E8%BD%AC%E6%88%90%E5%A4%A7%E5%86%99%E5%AD%97%E6%AF%8D\"><span class=\"toc-text\"># 将字符串s的所有字母转成大写字母</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2s%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E8%BD%AC%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D\"><span class=\"toc-text\"># 将字符串s的所有字母转成小写字母</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2str%E6%9C%80%E5%B7%A6%E8%BE%B9%E7%9A%84n%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\"># 返回字符串str最左边的n个字符</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2str%E6%9C%80%E5%8F%B3%E8%BE%B9%E7%9A%84n%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\"># 返回字符串str最右边的n个字符</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2pad%E5%AF%B9str%E6%9C%80%E5%B7%A6%E8%BE%B9%E8%BF%9B%E8%A1%8C%E5%A1%AB%E5%85%85%EF%BC%8C%E7%9B%B4%E5%88%B0str%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BAlen%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\"># 用字符串pad对str最左边进行填充，直到str的长度为len个字符</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%B2pad%E5%AF%B9str%E6%9C%80%E5%8F%B3%E8%BE%B9%E8%BF%9B%E8%A1%8C%E5%A1%AB%E5%85%85%EF%BC%8C%E7%9B%B4%E5%88%B0str%E7%9A%84%E9%95%BF%E5%BA%A6%E4%B8%BAlen%E4%B8%AA%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\"># 用字符串pad对str最右边进行填充，直到str的长度为len个字符</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%BC%80%E5%A7%8B%E4%B8%8E%E7%BB%93%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\"># 去掉字符串s开始与结尾的空格</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%B7%A6%E4%BE%A7%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\"># 去掉字符串s左侧的空格</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%8F%B3%E4%BE%A7%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\"># 去掉字符串s右侧的空格</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%BC%80%E5%A7%8B%E4%B8%8E%E7%BB%93%E5%B0%BE%E7%9A%84s1\"><span class=\"toc-text\"># 去掉字符串s开始与结尾的s1</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%BC%80%E5%A7%8B%E5%A4%84%E7%9A%84s1\"><span class=\"toc-text\"># 去掉字符串s开始处的s1</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2s%E7%BB%93%E5%B0%BE%E5%A4%84%E7%9A%84s1\"><span class=\"toc-text\"># 去掉字符串s结尾处的s1</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9Estr%E9%87%8D%E5%A4%8Dn%E6%AC%A1%E7%9A%84%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\"># 返回str重复n次的结果</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9En%E4%B8%AA%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\"># 返回n个空格</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E5%AD%97%E7%AC%A6%E4%B8%B2s1-s2%E7%9A%84ASCII%E7%A0%81%E5%80%BC%E7%9A%84%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\"># 比较字符串s1,s2的ASCII码值的大小</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2s%E7%9A%84index%E4%BD%8D%E7%BD%AE%E5%85%B6len%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%8C%E4%BD%9C%E7%94%A8%E4%B8%8ESUBSTRING-s-n-len-%E3%80%81MID-s-n-len-%E7%9B%B8%E5%90%8C\"><span class=\"toc-text\"># 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2substr%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2str%E4%B8%AD%E9%A6%96%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BD%9C%E7%94%A8%E4%BA%8EPOSITION-substrIN-str-%E3%80%81INSTR-str-substr-%E7%9B%B8%E5%90%8C%E3%80%82\"><span class=\"toc-text\"># 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%9C%AA%E6%89%BE%E5%88%B0%EF%BC%8C%E8%BF%94%E5%9B%9E0\"><span class=\"toc-text\">未找到，返回0</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%A6%82%E6%9E%9Cm-1%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9Es1%EF%BC%8C%E5%A6%82%E6%9E%9Cm-2%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9Es2%EF%BC%8C%E5%A6%82%E6%9E%9Cm-n%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9Esn\"><span class=\"toc-text\"># 返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如果m&#x3D;n，则返回sn\\</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2s%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%97%E8%A1%A8%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\"># 返回字符串s在字符串列表中第一次出现的位置</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2s1%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2s2%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82%E5%85%B6%E4%B8%AD%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2s2%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\"># 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9Es%E5%8F%8D%E8%BD%AC%E5%90%8E%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\"># 返回s反转后的字符串</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%A6%82%E6%9E%9Cvalue1%E4%B8%8Evalue2%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%88%99%E8%BF%94%E5%9B%9ENULL%EF%BC%8C%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9Evalue1\"><span class=\"toc-text\"># 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</span></a></li></ol></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"陈花花","slug":"blog-author","avatar":"https://files.catbox.moe/wioly8.jpg","link":"/","description":"一位正在重塑和新增知识的测试人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Docker 镜像的使用","uid":"1e85ed2976471a124c7c5c4dd3f1cabd","slug":"docker/Docker 镜像的使用","date":"2023-01-03T07:15:43.000Z","updated":"2023-01-04T12:47:40.221Z","comments":true,"path":"api/articles/docker/Docker 镜像的使用.json","keywords":null,"cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","text":"列出镜像列表我们可以使用 docker images 来列出本地主机上的镜像 $ docker images 选项说明 REPOSITORY: 表示镜像的仓库源 TAG: 镜像的标签 IMAGE ID: 镜像ID CREATED: 镜像的创建时间 SIZE: 镜像大小 同一仓库源...","link":"","photos":[],"count_time":{"symbolsCount":828,"symbolsTime":"1 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"},{"name":"镜像","slug":"镜像","count":1,"path":"api/tags/镜像.json"},{"name":"images","slug":"images","count":1,"path":"api/tags/images.json"}],"author":{"name":"陈花花","slug":"blog-author","avatar":"https://files.catbox.moe/wioly8.jpg","link":"/","description":"一位正在重塑和新增知识的测试人","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}