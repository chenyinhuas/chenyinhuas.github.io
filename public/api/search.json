[{"id":"1e85ed2976471a124c7c5c4dd3f1cabd","title":"Docker 镜像的使用","content":"列出镜像列表我们可以使用 docker images 来列出本地主机上的镜像\n$ docker images\n\n选项说明\nREPOSITORY: 表示镜像的仓库源\nTAG:　镜像的标签\nIMAGE ID: 镜像ID\nCREATED: 镜像的创建时间\nSIZE: 镜像大小\n\n\n\n\n\n\n\n\n同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n\n获取一个新的镜像当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\ndocker pull centos:8\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n查找镜像我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： https://hub.docker.com/我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n$ docker search httpd\n\n选项说明\nNAME: 镜像仓库源名称\nDESCRIPTION: 镜像的描述\nOFFICIAL: 是否 docker 官方发布\nSTARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\nAUTOMATED: 自动构建。拖取镜像$ docker pull httpd\n下载完后我们就可以使用这个镜像了$ docker run httpd\n删除镜像$ docker rmi httpd\n\n","slug":"docker/Docker 镜像的使用","date":"2023-01-03T07:15:43.000Z","categories_index":"Docker","tags_index":"Docker,镜像,images","author_index":"陈花花"},{"id":"dc1fbac9dbffcd89c2c867f0e7ab4b37","title":"Docker 容器的使用","content":"网络端口映射有以下两种端口映射方式\ndocker run -itd -P --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash\ndocker run -itd -p 1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash\n参数说明\n-i：交互式操作\n\n-t: 终端\n\n-d: 后台运行\n\n-p 1000:22 :以指定的1000端口映射容器的22端口\n\n-P: 容器内部端口随机映射到主机端口\n\n–name: 容器别名\n\ndokken/centos-8: 容器源名称\n\n/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n区别\n-P :是容器内部端口随机映射到主机的端口。\n\n-p : 是容器内部端口绑定到指定的主机端口。\n\n\n另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1\ndocker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash\n这样我们就可以通过127.0.0.1:1000来访问容器的22端口了\n","slug":"docker/Docker 容器连接","date":"2023-01-03T07:13:50.000Z","categories_index":"Docker","tags_index":"Docker,容器,container","author_index":"陈花花"},{"id":"dc1fbac9dbffcd89c2c867f0e7ab4b37","title":"Docker 容器的使用","content":"获取容器我们可以使用docker pull 命令来下载 centos镜像\n$ docker pull centos8\n启动容器$ docker run -it centos8 &#x2F;bin&#x2F;bash\n参数说明\n-i：交互式操作\n-t: 终端\ncentos8：centos8镜像\n/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n\n如果要退出终端那就使用\n$ exit\n查看所有容器$ docker ps -a\n启动一个已经停止的容器$ docker start b750bbbcfd88(容器id)\n停止一个已经启动的容器$ docker stop b750bbbcfd88(容器id)\n后台运行容器(不想进入容器的时候)$ docker -itd --name content_8 centos8 &#x2F;bin&#x2F;bash\n参数说明\n-i：交互式操作\n\n-t: 终端\n\n-d: 后台运行\n\n–name: 运行时指定容器的名称\n\n/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n进入容器在使用参数 -d 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令\n$ docker exec -it [容器ID] &#x2F;bin&#x2F;bash\n参数说明\n-i：交互式操作\n\n-t: 终端\n\n/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n导入和导出容器导出容器如果要导出到本地的某个容器, 可以使用 docker export 命令\n$ docker export [容器ID] &gt; centos8.tar\n\n\n\n\n\n\n\n\n\n导出容器ID到本地文件的 centos8.tar\n\n\n导入容器$ cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1\n此外, 还可以通过指定URL或某个目录来导入\n$ docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo\n删除容器$ docker rm -f [容器ID]\n清除所有处于终止状态下的容器\n$ docker container prune\n\n","slug":"docker/Docker 容器的使用","date":"2022-12-06T08:00:12.000Z","categories_index":"Docker","tags_index":"Docker,容器,container","author_index":"陈花花"},{"id":"2d9b979e4a3d41ff207edc96f0b73a15","title":"MYSQL语句","content":"MYSQL知识点学习\n学习网站：\nhttps://dev.mysql.com/doc/refman/8.0/en/\n\n\n\n\n表，记录，字段\nE-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。\n一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).\n关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：\n\n键值型数据库: Redis.\n文档型数据库: MongoDB\n搜索引Y数据库: ES, Solr\n列式数据库: HBase\n图形数据库: InfoGrid\n\nORM 思想：对象关系的映射（object Relational Mapping）\n数据库中的一个表&lt;—&gt;java或python中的一个类\n表中的一条数据&lt;—&gt;类中的一个对象（或实体）\n表中的一个列&lt;—&gt;类中的一个字段、属性（fieid）\n表的关联关系\n四种：\n一对一的关联，\n一对多的关联（主表（从表）），\n多对多的关联（主表（（联接表）从表）），\n自我引用。\nSQL语言的分类DDL：数据定义语言。\nCREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)\nDML：数据操作语言。\nINSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)\nDCL：操作控制语言。\nCOMMIT(提交修改永久性（事物相关）) \nROLLBACK(回滚/撤回（事物相关）) \nSAVEPOINT(设置保存点) \nGRANT(赋予权限) \\ REVOKE(取消权限)\n命令结束符合: (; \\G\\g)\nSQL 大小写规范：\n\nMYSQL在Windows环境下是大小写不敏感的\nMYSQL在Linux环境下是大小写敏感的\n数据库名、表名、表的别名、变量名是严格区分大小写的。\n关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。\n推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。\nSQL关键字、函数名、绑定变量等都大写\n\n可以使用如下格式的注释结构单行注释:\n\n#注释文字(MySQL特有的方式)\n单行注释: I-注释文字(–后面必须包含一个空格。)\n多行注释: /*注释文字 */\n\n导入现有的数据表、表数据：\n\nsource  文件的全路径名\n基于具体的图形化界面的工具可以导入数据\n\nmsyql命令：登录命令mysql -u root -P 端口号 -h localhost -p &#x2F;&#x2F; 登录指定服务器\n\n查看版本msyql -V\nmysql --version\nselect version(); &#x2F;&#x2F; 登录后查看当前版本信息\n\n开启-服务器\nnet start mysql80\n\n停止-服务器\nnet stop mysql80\n\n查看数据库信息-DB：database,看做是数据库文件  \nshow databases;\n\n创建数据库\ncreate database 库名;\n\n选中数据库\nuse 库名;\n\n选中数据库查看表\nshow tables;          \n\n创建表\ncreate table emplogees(需创建的参数);\n\n添加数据\ninsert into 表名 values(1001,&#39;Tom&#39;);\n\n查看表数据\nselect * from employee;\n\n添加数据库：（1.基于具体的图形化界面的工具可以导入数据）\nsource 文件的全路径名称\n\n删除库\ndrop database 库名; \n\n\n\nSQL语句，简单SELECT搜索语句：查询多列\nSELECT 列名 from 表名；\n\n查询所有列\nSELECT 列名 from 表名；\n\nSELECT * from 表名；\n\n查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。\n关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）\n分组去重：group by（进行分组查询)\nSELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；\n\n查询结果限制返回行数：\nSELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  &#x2F;&#x2F; 跳过0条，从第一条数据开始取，取两条数据 \n\n也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量\n将查询后的列重新命名：\nSELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对&quot;&quot;引起来，不要使用&#39;&#39;。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n空值参与运算，空值参与运算：结果一定也为空。\n空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换\nSELECT employee_id, &quot;月工资&quot;，salary * (1 + IFNULL(commission_pct,0)) * 12 &#39;&#39;&quot;年工资&quot;，commission_pct  FROM employees；\n\n&lt;=&gt;:安全等于。可以查询到数据为null的。\n函数查询为null：ISNULL(表名)\n伪表(DUAL)：\nSELECT 数值 FROM DUAL;\n\n着重号``(在表名或库名与关键字重名时必须加上)\n常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条\nselect employee_id,last_name,&#39;常量&#39;,123（常量） FROM employees;\n\n显示表结构\nDESCRIBE 表名;\n\nDESC 表名;\n\n最小 LEAST(值) \\ 最大 GREATEST(值)\nin （set值），not in （set值，set）\n查询介于之间语句：BETWEEN\n例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值\n\n查询除某个数据信息：\n!&#x3D;，not in(值) （判断取值不是这个的值）\n\n用WHERE过滤空值\n判断取值为空的语句格式为：\n列名 &#96;&#96;IS&#96; &#96;NULL\n\n判断取值不为空的语句格式为：\n列名 &#96;&#96;IS&#96; &#96;NOT&#96; &#96;NULL\n\n高级操作符：OR（或）\n模糊查询语句：like  ‘匹配内容’\n考点 like 相似\nlike &#39;%北京%&#39;列名包括北京的字样\nlike &#39;北京%&#39; 列名北京开头\nlike &#39;%北京&#39; 列名北京结尾\n\n\n正则表达式：\n_ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）\n% ：百分号 代表匹配0个或多个字符；\n[]: 中括号 代表匹配其中的任意一个字符；\n[^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。\n\n转义字符：\\ ，在需要转义的符合前输入 \\。\n转义关键字：ESCAPE，把需要转义的字符，输入在后方。   \nREGEXP运算符\n‘^’匹配以该字符后面的字符开头的字符串。\n ‘$’匹配以该字符前面的字符结尾的字符串。\n‘.’匹配任何一个单字符。\n “[…]”匹配在方括号内的任何字符。例如, “[abc]”匹配”a”或”b”或”c”。为了命名字符的范围,使用一个’-‘。”[a-z]”匹配任何字母,而“[0-9]”匹配任何数字。\n‘ * ‘匹配零个或多个在它前面的字符。例如, “ x* “匹配任何数量的’x’字符, “ [0-9]* “匹配任何数量的数字,而”*”匹配任何数量的任何字符。\n\n位运算符（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）\n&amp;（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） &gt;&gt;（按位右移位） &lt;&lt;（按位左移位）\n排序与分页排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。\n升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）\nORDER BY 列名 ASC;  # ascend\n\n降序语法格式：\nORDER BY  列名  DESC; # descend\n\n注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。\n强调格式：WHERE需要声明在FROM后，ORDER BY之前。\n二级排序，语法格式：以此类推\nORDER BY 列名 DESC,列名 ASC;\n\n分页：mysql使用limit实习数据的分页显示\n分页语法格式：（必须放置语句最后）\nLIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;\n\nMYSQL8.0新特性：LIMIT…OFFSET…语法格式：\nSELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;\n\n字节函数：\nLENGTH(列名);\n\n函数时间戳转换为日期类型进行显示：\nFROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））\n\n（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：\nSELECT FROM_UNIXTIME(参数) FROM 表名;\n\n返回格式如下： 2020-03-23 15:28:46\n\n  （2）含有format参数：\nSELECT FROM_UNIXTIME(参数,&#39;%Y-%m-%d&#39;（选择要转化的格式）) FROM 表名;\n\n返回格式如下：2020-03-23\n\nformat（可选参数）：\n%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0&#x3D;Sunday ……6&#x3D;Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。\n\n函数IFNULL使用说明：\nMySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；\nIFNULL函数语法：\nIFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。\n\n\n\n多表查询：笛卡尔积(或交叉连接)的理解。\n笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 \nSQL99：CROSS  JOIN 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。\n多表查询需要有连接条件：\nSELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件\n\n如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。\nSELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件\n\n多表查询，建议：\n\n从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。\n可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）\n\n结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）\n多表查询的分类：角度1：等值连接 vs 非等值连接\n角度2：自连接 vs 非自连接\n角度3：内连接 vs 外连接\n内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。\n外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，\n​               还查询到了左表 或 右表中不匹配的行。\n外连接的分类：左外连接、右外连接、满外连接。\n左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,\n​                  这种连接称为左外连接。\n右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,\n​                  这种连接称为右外连接。\nSQL92语法实现内连接：\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名; # 同等的条件\n\nSQL92语法实现外连接：使用 + ——- MYSQL不支持SQL92语法中外连接的写法！\n（Oracle支持SQL92语法实现外连接）\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名(+); # 同等的条件\n\nSQL99语法中使用JOIN …ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。\nSQL99语法实现内连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 \nJOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n\n\nSQL99语法实现外连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;\n\nSQL99语法实现左连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;\n\nSQL99语法实现右连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;\n\n满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;\n\n\nUNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。\n​                         （去重时导致，效率过低）\n\n\nUNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，\n​                                  不去重。\n\n\n注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。\n7种JOIN的实现：\n中图，内连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;\n\n左上图，左外连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;\n\n右上图，右外连接：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;\n\n左中图：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n\n右中图：\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n\n左下图：满外连接\n方式1：左上图 UNION ALL 右中图\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n\n方式2：左中图 UNION ALL 右上图\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n\n右下图：左中图 UNION ALL 右中图\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n\nSQL99语法的新特性1：自然连接\nNATURAL JOIN：它会帮你自动查询两张连接表中所有相同的字段，然后进行等值连接。\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;\n\nSQL99语法的新特性2：自然连接\nUSING：适用于多表查询，有相同列名的查询（不适用与自连接）\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);\n\n拓展：可以先JOIN连接但不建议（具体看需求）\nSELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 &#x3D; 别名.列名\nAND 别名.列名 &#x3D; 别名.列名；\n\n\n\n函数的理解：从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。\nMySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)\n两种SQL函数：（单行函数，多行函数）\n单行函数：\n\n操作数据对象，接受参数返回一个结果。\n只对一行进行变换，每行返回一个结果。\n可以嵌套，参数可以是一列或一个值。\n\n1.数值函数\n1.1基本的操作：\n# 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n\n\n1.2取随机数：（也称伪随机数，指定因子返回数则固定）\n# 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);\n\n1.3四舍五入，截断操作：\n# 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;\n\n1.4角度与弧度的互换\n# 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));\n\n1.5三角函数\n# 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);\n\n1.6指数和对数\n# 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X&lt;&#x3D;0时,返回NULL\nLOG2(x);\n\n1.7进制间的转换\n# 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);\n\n2.字符串函数\n# ASCII() 返回字符串S中的第一个字符的ASCII码值  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);\n\n# 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）例子：SELECT CONCAT(别名.列名, &#39; 固定连接字符串 &#39;, 别名.列名) &quot;列名展示&quot; \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 &#x3D; 别名.列名;\n\n# 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上xCONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);\n\n# 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）INSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))\n\n# 用字符串b替换字符串str中所有出现的字符串aREPLACE(str, a(需要要替换的字符串), b(替换上的字符串))\n\n# 将字符串s的所有字母转成大写字母UPPER(s) 或 UCASE(s)\n\n# 将字符串s的所有字母转成小写字母LOWER(s) 或LCASE(s)\n\n# 返回字符串str最左边的n个字符LEFT(str,n(从最左边，根据数值取出字符))\n\n# 返回字符串str最右边的n个字符RIGHT(str,n(从最右边，根据数值取出字符))\n\n# 用字符串pad对str最左边进行填充，直到str的长度为len个字符LPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))\n\n# 用字符串pad对str最右边进行填充，直到str的长度为len个字符RPAD: 实现左对齐效果\nRPAD(str ,len, pad)\n\n# 去掉字符串s开始与结尾的空格TRIM(s)\n\n# 去掉字符串s左侧的空格LTRIM(s)\n\n# 去掉字符串s右侧的空格RTRIM(s)\n\n# 去掉字符串s开始与结尾的s1TRIM(s1 FROM s)\n例子：TRIM(&#39;字符串&#39;(首尾出现进行去除) FROM &#39;字符串&#39;(首尾出现相同的字符串则进行去除));\n\n# 去掉字符串s开始处的s1TRIM(LEADING s1FROM s)\n\n# 去掉字符串s结尾处的s1TRIM(TRAILING s1FROM s)\n\n# 返回str重复n次的结果REPEAT(str, n(数值，重复的次数))\n\n# 返回n个空格SPACE(n)\n\n# 比较字符串s1,s2的ASCII码值的大小STRCMP(s1,s2)\n\n# 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同SUBSTR(s,index(),len(取的长度))\n\n# 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。未找到，返回0LOCATE(substr,str)\n\n# 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\ELT(m,s1,s2,…,sn)\n\n# 返回字符串s在字符串列表中第一次出现的位置FIELD(s,s1,s2,…,sn)\n\n# 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串FIND_IN_SET(s1,s2)\n\n# 返回s反转后的字符串REVERSE(s)\n\n# 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1NULLIF(value1,value2)\n\n注意：MySQL中，字符串的位置是从1开始的。\n","slug":"MySQL/MYSQL语句：","date":"2022-11-20T13:19:54.352Z","categories_index":"MYSQL","tags_index":"mysql,语句","author_index":"陈花花"}]