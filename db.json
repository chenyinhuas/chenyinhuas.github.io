{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"b2ea07876b524191ee963194c9da39f89dc270f6","modified":1672836460222},{"_id":"source/_posts/docker/Docker 容器的使用.md","hash":"31e8f72b69f8421e75ae0bae207433d68fb2426a","modified":1672836460220},{"_id":"source/_posts/docker/Docker 镜像的使用.md","hash":"4ce77fa74aaab20d6748cfe98652414d856434a9","modified":1672836460221},{"_id":"source/_posts/docker/Docker 容器连接.md","hash":"e0df5090709c17423e02f16289001d55a625d064","modified":1672836460220},{"_id":"source/_posts/typescript/TypeScript的数据类型.md","hash":"dbc0804fed31313b245c7fa52af3c37d7e3ec188","modified":1672836460221},{"_id":"source/_posts/typescript/tsconfig.json 编译配置.md","hash":"18b84b5c1ec9b429773306d2a7adf3b5bfcc1d26","modified":1672836460221},{"_id":"source/_posts/typescript/webpack 搭建 ts 开发环境.md","hash":"22afc784be731b9373410a7819c30dcb4c87f29e","modified":1672836460221},{"_id":"node_modules/hexo-theme-Aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1672836583392},{"_id":"public/api/posts/1.json","hash":"00df689e8b19597af643eaa3c2e3604e681c08a4","modified":1672836737616},{"_id":"public/api/articles/docker/Docker 镜像的使用.json","hash":"0eb2a369667fad7e956f5527ba5d08ccaefb5f2d","modified":1672836737616},{"_id":"public/api/articles/docker/Docker 容器连接.json","hash":"0ceb7adcbaa3d680ed54df728ea253c13b348791","modified":1672836737616},{"_id":"public/api/articles/docker/Docker 容器的使用.json","hash":"003234699bfe6c1512f0d98c6c074ecd3960c4cb","modified":1672836737616},{"_id":"public/api/articles/typescript/webpack 搭建 ts 开发环境.json","hash":"dd6b0fcda0ab4d8014a951356d24bd24a3fe33a0","modified":1672836737616},{"_id":"public/api/articles/typescript/TypeScript的数据类型.json","hash":"a0f89364997afbef2642340b2e0eabf46091fd70","modified":1672836737616},{"_id":"public/api/articles/typescript/tsconfig.json 编译配置.json","hash":"f369abe4e7ec0ff788f3c76ffec1e2c0cd343413","modified":1672836737616},{"_id":"public/api/features.json","hash":"fc2c8049a00b5b0c6b5f82167fd4bfe9b9e5f898","modified":1672836737616},{"_id":"public/api/authors/blog-author.json","hash":"68ffd86a973b2fb757b8c9c87e9b21ee11b5b725","modified":1672836737616},{"_id":"public/api/site.json","hash":"09e71a251d26a5a292efc87f64a966f1332959c1","modified":1672836737616},{"_id":"public/api/categories.json","hash":"f1543decddd27ddde7b87a0dd5ce36f0877ddbdf","modified":1672836737616},{"_id":"public/api/categories/Docker.json","hash":"adda8bd040108a4057b8b86821ab545f668f2a5a","modified":1672836737616},{"_id":"public/api/categories/TypeScript.json","hash":"07cd7fea720c660f7039346423b2c5ee92776d41","modified":1672836737616},{"_id":"public/api/tags.json","hash":"2444dd3b83277126e517a7a7ae0ad671d265c3c8","modified":1672836737616},{"_id":"public/api/tags/Docker.json","hash":"adda8bd040108a4057b8b86821ab545f668f2a5a","modified":1672836737616},{"_id":"public/api/tags/容器.json","hash":"1c0a21f14b584090ce1099ae5ab404429f8963b2","modified":1672836737616},{"_id":"public/api/tags/container.json","hash":"05d599d7598e46bb7bd5e3194c779f498c009542","modified":1672836737616},{"_id":"public/api/tags/镜像.json","hash":"a8046b40d9834b74461c10c4098f4de8bafb2dfa","modified":1672836737616},{"_id":"public/api/tags/images.json","hash":"a71450cff7ac7e72ebedec27bdeedc2099f20b28","modified":1672836737616},{"_id":"public/api/tags/TypeScript.json","hash":"07cd7fea720c660f7039346423b2c5ee92776d41","modified":1672836737616},{"_id":"public/api/tags/数据类型.json","hash":"742374282f6f767f5fa7048bd9a3b9856bfa63fc","modified":1672836737616},{"_id":"public/api/tags/tsconfig.json","hash":"ebd12038e4faa3c1831eb2832a292026df722ab3","modified":1672836737616},{"_id":"public/api/tags/环境搭建.json","hash":"6a8a7a690d78526a2f16483a25a6227ffc8ce180","modified":1672836737616},{"_id":"public/api/tags/webpack.json","hash":"f3cfc54c0b1f120189c2d716979835fd5347e175","modified":1672836737616},{"_id":"public/api/pages/about/index.json","hash":"bd924ae90ebc7aeaea1ee0b49937919ae8a2c356","modified":1672836737616},{"_id":"public/api/statistic.json","hash":"894624257e80604f58381873deaacac2341de25e","modified":1672836737616},{"_id":"public/api/search.json","hash":"9c2de774ec525fe7bedf19775b734e078a5dd0d3","modified":1672836737616},{"_id":"public/post/docker/Docker 镜像的使用.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/post/docker/Docker 容器连接.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/post/docker/Docker 容器的使用.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/post/typescript/webpack 搭建 ts 开发环境.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/post/typescript/TypeScript的数据类型.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/post/typescript/tsconfig.json 编译配置.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/index.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/tags/index.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/archives/index.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/page/about/index.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/tags/search/index.html","hash":"e42984e19ae5fcc0ccdb10d5404fb749e92a8d42","modified":1672836737616},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1672836737616},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1672836737616},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1672836737616},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1672836737616},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1672836737616},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1672836737616},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1672836737616},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836737616},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1672836737616},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1672836737616},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1672836737616},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836737616},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836737616},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1672836737616},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1672836737616},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1672836737616},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1672836737616},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1672836737616},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1672836737616},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1672836737616},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1672836737616},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1672836737616},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1672836737616},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1672836737616}],"Category":[{"name":"Docker","_id":"clchnsw0t0003b8xgep3w91s0"},{"name":"TypeScript","_id":"clchnsw11000eb8xg3e2l29ku"}],"Data":[],"Page":[{"_content":"### 哈哈哈","source":"about/index.md","raw":"### 哈哈哈","date":"2023-01-04T12:47:40.222Z","updated":"2023-01-04T12:47:40.222Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clchnsw0l0000b8xg8csj3aqm","content":"<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h3>"}],"Post":[{"title":"Docker 容器的使用","date":"2022-12-06T08:00:12.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 获取容器\n我们可以使用docker pull 命令来下载 centos镜像\n```shell\n$ docker pull centos8\n```\n# 启动容器\n```shell\n$ docker run -it centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- centos8：centos8镜像\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n\n如果要退出终端那就使用\n```shell\n$ exit\n```\n# 查看所有容器\n```shell\n$ docker ps -a\n```\n# 启动一个已经停止的容器\n```shell\n$ docker start b750bbbcfd88(容器id)\n```\n# 停止一个已经启动的容器\n```shell\n$ docker stop b750bbbcfd88(容器id)\n```\n# 后台运行容器(不想进入容器的时候)\n```shell\n$ docker -itd --name content_8 centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- --name: 运行时指定容器的名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 进入容器\n在使用参数 `-d` 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令\n```shell\n$ docker exec -it [容器ID] /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 导入和导出容器\n## 导出容器\n如果要导出到本地的某个容器, 可以使用 `docker export` 命令\n```shell\n$ docker export [容器ID] > centos8.tar\n```\n> 导出容器ID到本地文件的 centos8.tar\n\n## 导入容器\n```shell\n$ cat docker/ubuntu.tar | docker import - test/ubuntu:v1\n```\n此外, 还可以通过指定URL或某个目录来导入\n```shell\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n## 删除容器\n```shell\n$ docker rm -f [容器ID]\n```\n清除所有处于终止状态下的容器\n```shell\n$ docker container prune\n```\n\n","source":"_posts/docker/Docker 容器的使用.md","raw":"---\ntitle: Docker 容器的使用\ndate: 2022/12/06 16:00:12\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 容器\n  - container\n---\n\n# 获取容器\n我们可以使用docker pull 命令来下载 centos镜像\n```shell\n$ docker pull centos8\n```\n# 启动容器\n```shell\n$ docker run -it centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- centos8：centos8镜像\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n\n如果要退出终端那就使用\n```shell\n$ exit\n```\n# 查看所有容器\n```shell\n$ docker ps -a\n```\n# 启动一个已经停止的容器\n```shell\n$ docker start b750bbbcfd88(容器id)\n```\n# 停止一个已经启动的容器\n```shell\n$ docker stop b750bbbcfd88(容器id)\n```\n# 后台运行容器(不想进入容器的时候)\n```shell\n$ docker -itd --name content_8 centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- --name: 运行时指定容器的名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 进入容器\n在使用参数 `-d` 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令\n```shell\n$ docker exec -it [容器ID] /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 导入和导出容器\n## 导出容器\n如果要导出到本地的某个容器, 可以使用 `docker export` 命令\n```shell\n$ docker export [容器ID] > centos8.tar\n```\n> 导出容器ID到本地文件的 centos8.tar\n\n## 导入容器\n```shell\n$ cat docker/ubuntu.tar | docker import - test/ubuntu:v1\n```\n此外, 还可以通过指定URL或某个目录来导入\n```shell\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n## 删除容器\n```shell\n$ docker rm -f [容器ID]\n```\n清除所有处于终止状态下的容器\n```shell\n$ docker container prune\n```\n\n","slug":"docker/Docker 容器的使用","published":1,"updated":"2023-01-04T12:47:40.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0o0001b8xg8l1q82bk","content":"<h1 id=\"获取容器\"><a href=\"#获取容器\" class=\"headerlink\" title=\"获取容器\"></a>获取容器</h1><p>我们可以使用docker pull 命令来下载 centos镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull centos8</code></pre>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-i：交互式操作</li>\n<li>-t: 终端</li>\n<li>centos8：centos8镜像</li>\n<li>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</li>\n</ul>\n<p>如果要退出终端那就使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ exit</code></pre>\n<h1 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker ps -a</code></pre>\n<h1 id=\"启动一个已经停止的容器\"><a href=\"#启动一个已经停止的容器\" class=\"headerlink\" title=\"启动一个已经停止的容器\"></a>启动一个已经停止的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker start b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"停止一个已经启动的容器\"><a href=\"#停止一个已经启动的容器\" class=\"headerlink\" title=\"停止一个已经启动的容器\"></a>停止一个已经启动的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker stop b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"后台运行容器-不想进入容器的时候\"><a href=\"#后台运行容器-不想进入容器的时候\" class=\"headerlink\" title=\"后台运行容器(不想进入容器的时候)\"></a>后台运行容器(不想进入容器的时候)</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker -itd --name content_8 centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>–name: 运行时指定容器的名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用参数 <code>-d</code> 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker exec -it [容器ID] &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2></li>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出到本地的某个容器, 可以使用 <code>docker export</code> 命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker export [容器ID] &gt; centos8.tar</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>导出容器ID到本地文件的 centos8.tar</p></blockquote>\n</li>\n</ul>\n<h2 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</code></pre>\n<p>此外, 还可以通过指定URL或某个目录来导入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</code></pre>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rm -f [容器ID]</code></pre>\n<p>清除所有处于终止状态下的容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker container prune</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"获取容器\"><a href=\"#获取容器\" class=\"headerlink\" title=\"获取容器\"></a>获取容器</h1><p>我们可以使用docker pull 命令来下载 centos镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull centos8</code></pre>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-i：交互式操作</li>\n<li>-t: 终端</li>\n<li>centos8：centos8镜像</li>\n<li>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</li>\n</ul>\n<p>如果要退出终端那就使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ exit</code></pre>\n<h1 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker ps -a</code></pre>\n<h1 id=\"启动一个已经停止的容器\"><a href=\"#启动一个已经停止的容器\" class=\"headerlink\" title=\"启动一个已经停止的容器\"></a>启动一个已经停止的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker start b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"停止一个已经启动的容器\"><a href=\"#停止一个已经启动的容器\" class=\"headerlink\" title=\"停止一个已经启动的容器\"></a>停止一个已经启动的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker stop b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"后台运行容器-不想进入容器的时候\"><a href=\"#后台运行容器-不想进入容器的时候\" class=\"headerlink\" title=\"后台运行容器(不想进入容器的时候)\"></a>后台运行容器(不想进入容器的时候)</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker -itd --name content_8 centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>–name: 运行时指定容器的名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用参数 <code>-d</code> 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker exec -it [容器ID] &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2></li>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出到本地的某个容器, 可以使用 <code>docker export</code> 命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker export [容器ID] &gt; centos8.tar</code></pre>\n<blockquote>\n<p>导出容器ID到本地文件的 centos8.tar</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</code></pre>\n<p>此外, 还可以通过指定URL或某个目录来导入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</code></pre>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rm -f [容器ID]</code></pre>\n<p>清除所有处于终止状态下的容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker container prune</code></pre>\n\n"},{"title":"Docker 镜像的使用","date":"2023-01-03T07:15:43.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 列出镜像列表\n我们可以使用 `docker images` 来列出本地主机上的镜像\n```shell\n$ docker images\n```\n![image.png](https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png)\n## 选项说明\n\n- REPOSITORY: 表示镜像的仓库源\n- TAG:　镜像的标签\n- IMAGE ID: 镜像ID\n- CREATED: 镜像的创建时间\n- SIZE: 镜像大小\n> 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n# 获取一个新的镜像\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n```shell\ndocker pull centos:8\n```\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n# 查找镜像\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： [https://hub.docker.com/](https://hub.docker.com/)\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n```shell\n$ docker search httpd\n```\n![image.png](https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png)\n## 选项说明\n\n- NAME: 镜像仓库源名称\n- DESCRIPTION: 镜像的描述\n- OFFICIAL: 是否 docker 官方发布\n- STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\n- AUTOMATED: 自动构建。\n# 拖取镜像\n```shell\n$ docker pull httpd\n```\n下载完后我们就可以使用这个镜像了\n```shell\n$ docker run httpd\n```\n# 删除镜像\n```shell\n$ docker rmi httpd\n```\n","source":"_posts/docker/Docker 镜像的使用.md","raw":"---\ntitle: Docker 镜像的使用\ndate: 2023/1/3 15:15:43\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 镜像\n  - images\n---\n\n# 列出镜像列表\n我们可以使用 `docker images` 来列出本地主机上的镜像\n```shell\n$ docker images\n```\n![image.png](https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png)\n## 选项说明\n\n- REPOSITORY: 表示镜像的仓库源\n- TAG:　镜像的标签\n- IMAGE ID: 镜像ID\n- CREATED: 镜像的创建时间\n- SIZE: 镜像大小\n> 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n# 获取一个新的镜像\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n```shell\ndocker pull centos:8\n```\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n# 查找镜像\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： [https://hub.docker.com/](https://hub.docker.com/)\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n```shell\n$ docker search httpd\n```\n![image.png](https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png)\n## 选项说明\n\n- NAME: 镜像仓库源名称\n- DESCRIPTION: 镜像的描述\n- OFFICIAL: 是否 docker 官方发布\n- STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\n- AUTOMATED: 自动构建。\n# 拖取镜像\n```shell\n$ docker pull httpd\n```\n下载完后我们就可以使用这个镜像了\n```shell\n$ docker run httpd\n```\n# 删除镜像\n```shell\n$ docker rmi httpd\n```\n","slug":"docker/Docker 镜像的使用","published":1,"updated":"2023-01-04T12:47:40.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0r0002b8xgb0xq5c6k","content":"<h1 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h1><p>我们可以使用 <code>docker images</code> 来列出本地主机上的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker images</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>REPOSITORY: 表示镜像的仓库源</li>\n<li>TAG:　镜像的标签</li>\n<li>IMAGE ID: 镜像ID</li>\n<li>CREATED: 镜像的创建时间</li>\n<li>SIZE: 镜像大小<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p></blockquote>\n</li>\n</ul>\n<h1 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h1><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull centos:8</code></pre>\n<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h1 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h1><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a><br>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker search httpd</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明-1\"><a href=\"#选项说明-1\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>NAME: 镜像仓库源名称</li>\n<li>DESCRIPTION: 镜像的描述</li>\n<li>OFFICIAL: 是否 docker 官方发布</li>\n<li>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li>\n<li>AUTOMATED: 自动构建。<h1 id=\"拖取镜像\"><a href=\"#拖取镜像\" class=\"headerlink\" title=\"拖取镜像\"></a>拖取镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull httpd</code></pre>\n下载完后我们就可以使用这个镜像了<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run httpd</code></pre>\n<h1 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rmi httpd</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h1><p>我们可以使用 <code>docker images</code> 来列出本地主机上的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker images</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>REPOSITORY: 表示镜像的仓库源</li>\n<li>TAG:　镜像的标签</li>\n<li>IMAGE ID: 镜像ID</li>\n<li>CREATED: 镜像的创建时间</li>\n<li>SIZE: 镜像大小<blockquote>\n<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h1><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull centos:8</code></pre>\n<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h1 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h1><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a><br>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker search httpd</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明-1\"><a href=\"#选项说明-1\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>NAME: 镜像仓库源名称</li>\n<li>DESCRIPTION: 镜像的描述</li>\n<li>OFFICIAL: 是否 docker 官方发布</li>\n<li>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li>\n<li>AUTOMATED: 自动构建。<h1 id=\"拖取镜像\"><a href=\"#拖取镜像\" class=\"headerlink\" title=\"拖取镜像\"></a>拖取镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull httpd</code></pre>\n下载完后我们就可以使用这个镜像了<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run httpd</code></pre>\n<h1 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rmi httpd</code></pre></li>\n</ul>\n"},{"title":"Docker 容器的使用","date":"2023-01-03T07:13:50.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 网络端口映射\n有以下两种端口映射方式\n```shell\ndocker run -itd -P --name centos8 dokken/centos-8 /bin/bash\n```\n```shell\ndocker run -itd -p 1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- -p 1000:22 :以指定的1000端口映射容器的22端口\n- -P: 容器内部端口随机映射到主机端口\n- --name: 容器别名\n- dokken/centos-8: 容器源名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n## 区别\n\n- -P :是容器内部端口随机映射到主机的端口。\n- -p : 是容器内部端口绑定到指定的主机端口。\n\n另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1\n```shell\ndocker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n这样我们就可以通过` 127.0.0.1:1000 `来访问容器的22端口了\n","source":"_posts/docker/Docker 容器连接.md","raw":"---\ntitle: Docker 容器的使用\ndate: 2023/1/3 15:13:50\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 容器\n  - container\n---\n\n# 网络端口映射\n有以下两种端口映射方式\n```shell\ndocker run -itd -P --name centos8 dokken/centos-8 /bin/bash\n```\n```shell\ndocker run -itd -p 1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- -p 1000:22 :以指定的1000端口映射容器的22端口\n- -P: 容器内部端口随机映射到主机端口\n- --name: 容器别名\n- dokken/centos-8: 容器源名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n## 区别\n\n- -P :是容器内部端口随机映射到主机的端口。\n- -p : 是容器内部端口绑定到指定的主机端口。\n\n另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1\n```shell\ndocker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n这样我们就可以通过` 127.0.0.1:1000 `来访问容器的22端口了\n","slug":"docker/Docker 容器连接","published":1,"updated":"2023-01-04T12:47:40.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0v0005b8xg7ubg3z2k","content":"<h1 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h1><p>有以下两种端口映射方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -P --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>-p 1000:22 :以指定的1000端口映射容器的22端口</p>\n</li>\n<li><p>-P: 容器内部端口随机映射到主机端口</p>\n</li>\n<li><p>–name: 容器别名</p>\n</li>\n<li><p>dokken/centos-8: 容器源名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2></li>\n<li><p>-P :是容器内部端口随机映射到主机的端口。</p>\n</li>\n<li><p>-p : 是容器内部端口绑定到指定的主机端口。</p>\n</li>\n</ul>\n<p>另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<p>这样我们就可以通过<code>127.0.0.1:1000</code>来访问容器的22端口了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h1><p>有以下两种端口映射方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -P --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>-p 1000:22 :以指定的1000端口映射容器的22端口</p>\n</li>\n<li><p>-P: 容器内部端口随机映射到主机端口</p>\n</li>\n<li><p>–name: 容器别名</p>\n</li>\n<li><p>dokken/centos-8: 容器源名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2></li>\n<li><p>-P :是容器内部端口随机映射到主机的端口。</p>\n</li>\n<li><p>-p : 是容器内部端口绑定到指定的主机端口。</p>\n</li>\n</ul>\n<p>另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<p>这样我们就可以通过<code>127.0.0.1:1000</code>来访问容器的22端口了</p>\n"},{"title":"TypeScript的数据类型","date":"2022-03-05T08:47:36.000Z","cover":"https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png","_content":"\n# TypeScript的数据类型\n\n> 变量一但定义了某个数据类型后就不允许赋值其他数据类型的数值了\n\n\n## 基础数据类型\n\n### number\n\n### string\n\n### boolean\n\n### void\n\n### null\n\n### undefinded\n\n### any (使用 TS 时不建议使用 any 类型)\n\n```typescript\n// 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet d; <=> let d: any;\n\n// any 类型还可以赋值给任意类型的变量\nlet s: string;\ns = d // 这时候是成立的\n```\n\n### unknown\n\n```typescript\n// 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet un: unknown;\n\n// any 类型还可以赋值给任意类型的变量\nlet s: string;\ns = un // 这时候是不成立的\n// 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n// unknown 实际上就是一个类型安全的 any\n// unknown 类型的变量不能直接赋值给其他类型的变量,可以间接实现\nif (typeof un === 'string') {\n  s = un; // 由于先进行了类型判断, 所以这时候赋值是成立的\n}\n```\n\n### enum(枚举类型)\n\n```typescript\n// 使用场景\nenum Gender {\n  male,\n  female\n}\n\nlet p: { name: string, gender: Gender }\np = {\n  name: '林丹',\n  gnder: Gender.male\n}\n```\n\n## 引用数据类型\n\n### array\n\n### object\n\n```typescript\n// 基础的定义方式\n// 由于在 js 中几乎万物皆是对象,所以不推荐这样使用\nlet o: object\no = {}\no = function\n\n// 可以用字面量的方式\nlet o1: { name: string, age: number }\no1 = { name: 'hanler', age: 12 }\n\n// 如果要可选常数则在常数后面加个问号\nlet o2: { name: string, age?: number }\no2 = { name: 'hehe' }\n\n// 当你需要一个固定值, 但是又需要其他值且不清楚数量的时候可以像以下定义\n/**\n * @param {string} propsName 这个是属性名, 后面的 string 代表的是 string 格式的属性名\n * 中括号后面的 string 代表的是属性(propsName)的值的格式\n * */\nlet o3: { name: string, [propsName: string]: string }\no3 = { name: 'str', age: '12' }\n```\n\n## 类型断言\n\n> 可以用来告诉 ts 解析器变量的实际数据类型\n\n\n```typescript\nlet un: nuknown;\nun = 'string'\n\nlet s: string;\n\ns = un; // 此时是不成立的\n// 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n// 由于此时的 un 确实是 string 类型,我们可以使用类型断言来告诉解析器 un 就是 string 类型的来解决解析器报错问题\n\n// 两种写法\ns = un as string;\ns = <string>un;\n```\n","source":"_posts/typescript/TypeScript的数据类型.md","raw":"---\ntitle: TypeScript的数据类型\ndate: 2022/3/5 16:47:36\ncover: https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png\ncategories:\n  - TypeScript\ntags:\n  - TypeScript\n  - 数据类型\n---\n\n# TypeScript的数据类型\n\n> 变量一但定义了某个数据类型后就不允许赋值其他数据类型的数值了\n\n\n## 基础数据类型\n\n### number\n\n### string\n\n### boolean\n\n### void\n\n### null\n\n### undefinded\n\n### any (使用 TS 时不建议使用 any 类型)\n\n```typescript\n// 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet d; <=> let d: any;\n\n// any 类型还可以赋值给任意类型的变量\nlet s: string;\ns = d // 这时候是成立的\n```\n\n### unknown\n\n```typescript\n// 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet un: unknown;\n\n// any 类型还可以赋值给任意类型的变量\nlet s: string;\ns = un // 这时候是不成立的\n// 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n// unknown 实际上就是一个类型安全的 any\n// unknown 类型的变量不能直接赋值给其他类型的变量,可以间接实现\nif (typeof un === 'string') {\n  s = un; // 由于先进行了类型判断, 所以这时候赋值是成立的\n}\n```\n\n### enum(枚举类型)\n\n```typescript\n// 使用场景\nenum Gender {\n  male,\n  female\n}\n\nlet p: { name: string, gender: Gender }\np = {\n  name: '林丹',\n  gnder: Gender.male\n}\n```\n\n## 引用数据类型\n\n### array\n\n### object\n\n```typescript\n// 基础的定义方式\n// 由于在 js 中几乎万物皆是对象,所以不推荐这样使用\nlet o: object\no = {}\no = function\n\n// 可以用字面量的方式\nlet o1: { name: string, age: number }\no1 = { name: 'hanler', age: 12 }\n\n// 如果要可选常数则在常数后面加个问号\nlet o2: { name: string, age?: number }\no2 = { name: 'hehe' }\n\n// 当你需要一个固定值, 但是又需要其他值且不清楚数量的时候可以像以下定义\n/**\n * @param {string} propsName 这个是属性名, 后面的 string 代表的是 string 格式的属性名\n * 中括号后面的 string 代表的是属性(propsName)的值的格式\n * */\nlet o3: { name: string, [propsName: string]: string }\no3 = { name: 'str', age: '12' }\n```\n\n## 类型断言\n\n> 可以用来告诉 ts 解析器变量的实际数据类型\n\n\n```typescript\nlet un: nuknown;\nun = 'string'\n\nlet s: string;\n\ns = un; // 此时是不成立的\n// 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n// 由于此时的 un 确实是 string 类型,我们可以使用类型断言来告诉解析器 un 就是 string 类型的来解决解析器报错问题\n\n// 两种写法\ns = un as string;\ns = <string>un;\n```\n","slug":"typescript/TypeScript的数据类型","published":1,"updated":"2023-01-04T12:47:40.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0w0006b8xggmgn6jms","content":"<h1 id=\"TypeScript的数据类型\"><a href=\"#TypeScript的数据类型\" class=\"headerlink\" title=\"TypeScript的数据类型\"></a>TypeScript的数据类型</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>变量一但定义了某个数据类型后就不允许赋值其他数据类型的数值了</p></blockquote>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3><h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><h3 id=\"undefinded\"><a href=\"#undefinded\" class=\"headerlink\" title=\"undefinded\"></a>undefinded</h3><h3 id=\"any-使用-TS-时不建议使用-any-类型\"><a href=\"#any-使用-TS-时不建议使用-any-类型\" class=\"headerlink\" title=\"any (使用 TS 时不建议使用 any 类型)\"></a>any (使用 TS 时不建议使用 any 类型)</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet d; &lt;&#x3D;&gt; let d: any;\n\n&#x2F;&#x2F; any 类型还可以赋值给任意类型的变量\nlet s: string;\ns &#x3D; d &#x2F;&#x2F; 这时候是成立的</code></pre>\n\n<h3 id=\"unknown\"><a href=\"#unknown\" class=\"headerlink\" title=\"unknown\"></a>unknown</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet un: unknown;\n\n&#x2F;&#x2F; any 类型还可以赋值给任意类型的变量\nlet s: string;\ns &#x3D; un &#x2F;&#x2F; 这时候是不成立的\n&#x2F;&#x2F; 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n&#x2F;&#x2F; unknown 实际上就是一个类型安全的 any\n&#x2F;&#x2F; unknown 类型的变量不能直接赋值给其他类型的变量,可以间接实现\nif (typeof un &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;\n  s &#x3D; un; &#x2F;&#x2F; 由于先进行了类型判断, 所以这时候赋值是成立的\n&#125;</code></pre>\n\n<h3 id=\"enum-枚举类型\"><a href=\"#enum-枚举类型\" class=\"headerlink\" title=\"enum(枚举类型)\"></a>enum(枚举类型)</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 使用场景\nenum Gender &#123;\n  male,\n  female\n&#125;\n\nlet p: &#123; name: string, gender: Gender &#125;\np &#x3D; &#123;\n  name: &#39;林丹&#39;,\n  gnder: Gender.male\n&#125;</code></pre>\n\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 基础的定义方式\n&#x2F;&#x2F; 由于在 js 中几乎万物皆是对象,所以不推荐这样使用\nlet o: object\no &#x3D; &#123;&#125;\no &#x3D; function\n\n&#x2F;&#x2F; 可以用字面量的方式\nlet o1: &#123; name: string, age: number &#125;\no1 &#x3D; &#123; name: &#39;hanler&#39;, age: 12 &#125;\n\n&#x2F;&#x2F; 如果要可选常数则在常数后面加个问号\nlet o2: &#123; name: string, age?: number &#125;\no2 &#x3D; &#123; name: &#39;hehe&#39; &#125;\n\n&#x2F;&#x2F; 当你需要一个固定值, 但是又需要其他值且不清楚数量的时候可以像以下定义\n&#x2F;**\n * @param &#123;string&#125; propsName 这个是属性名, 后面的 string 代表的是 string 格式的属性名\n * 中括号后面的 string 代表的是属性(propsName)的值的格式\n * *&#x2F;\nlet o3: &#123; name: string, [propsName: string]: string &#125;\no3 &#x3D; &#123; name: &#39;str&#39;, age: &#39;12&#39; &#125;</code></pre>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以用来告诉 ts 解析器变量的实际数据类型</p></blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let un: nuknown;\nun &#x3D; &#39;string&#39;\n\nlet s: string;\n\ns &#x3D; un; &#x2F;&#x2F; 此时是不成立的\n&#x2F;&#x2F; 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n&#x2F;&#x2F; 由于此时的 un 确实是 string 类型,我们可以使用类型断言来告诉解析器 un 就是 string 类型的来解决解析器报错问题\n\n&#x2F;&#x2F; 两种写法\ns &#x3D; un as string;\ns &#x3D; &lt;string&gt;un;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"TypeScript的数据类型\"><a href=\"#TypeScript的数据类型\" class=\"headerlink\" title=\"TypeScript的数据类型\"></a>TypeScript的数据类型</h1><blockquote>\n<p>变量一但定义了某个数据类型后就不允许赋值其他数据类型的数值了</p>\n</blockquote>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><h3 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h3><h3 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h3><h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><h3 id=\"void\"><a href=\"#void\" class=\"headerlink\" title=\"void\"></a>void</h3><h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><h3 id=\"undefinded\"><a href=\"#undefinded\" class=\"headerlink\" title=\"undefinded\"></a>undefinded</h3><h3 id=\"any-使用-TS-时不建议使用-any-类型\"><a href=\"#any-使用-TS-时不建议使用-any-类型\" class=\"headerlink\" title=\"any (使用 TS 时不建议使用 any 类型)\"></a>any (使用 TS 时不建议使用 any 类型)</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet d; &lt;&#x3D;&gt; let d: any;\n\n&#x2F;&#x2F; any 类型还可以赋值给任意类型的变量\nlet s: string;\ns &#x3D; d &#x2F;&#x2F; 这时候是成立的</code></pre>\n\n<h3 id=\"unknown\"><a href=\"#unknown\" class=\"headerlink\" title=\"unknown\"></a>unknown</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 声明类型时如果不指定类型或者不赋值,则 ts 解析器会自动判断变量为 any 类型\nlet un: unknown;\n\n&#x2F;&#x2F; any 类型还可以赋值给任意类型的变量\nlet s: string;\ns &#x3D; un &#x2F;&#x2F; 这时候是不成立的\n&#x2F;&#x2F; 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n&#x2F;&#x2F; unknown 实际上就是一个类型安全的 any\n&#x2F;&#x2F; unknown 类型的变量不能直接赋值给其他类型的变量,可以间接实现\nif (typeof un &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;\n  s &#x3D; un; &#x2F;&#x2F; 由于先进行了类型判断, 所以这时候赋值是成立的\n&#125;</code></pre>\n\n<h3 id=\"enum-枚举类型\"><a href=\"#enum-枚举类型\" class=\"headerlink\" title=\"enum(枚举类型)\"></a>enum(枚举类型)</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 使用场景\nenum Gender &#123;\n  male,\n  female\n&#125;\n\nlet p: &#123; name: string, gender: Gender &#125;\np &#x3D; &#123;\n  name: &#39;林丹&#39;,\n  gnder: Gender.male\n&#125;</code></pre>\n\n<h2 id=\"引用数据类型\"><a href=\"#引用数据类型\" class=\"headerlink\" title=\"引用数据类型\"></a>引用数据类型</h2><h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><h3 id=\"object\"><a href=\"#object\" class=\"headerlink\" title=\"object\"></a>object</h3><pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">&#x2F;&#x2F; 基础的定义方式\n&#x2F;&#x2F; 由于在 js 中几乎万物皆是对象,所以不推荐这样使用\nlet o: object\no &#x3D; &#123;&#125;\no &#x3D; function\n\n&#x2F;&#x2F; 可以用字面量的方式\nlet o1: &#123; name: string, age: number &#125;\no1 &#x3D; &#123; name: &#39;hanler&#39;, age: 12 &#125;\n\n&#x2F;&#x2F; 如果要可选常数则在常数后面加个问号\nlet o2: &#123; name: string, age?: number &#125;\no2 &#x3D; &#123; name: &#39;hehe&#39; &#125;\n\n&#x2F;&#x2F; 当你需要一个固定值, 但是又需要其他值且不清楚数量的时候可以像以下定义\n&#x2F;**\n * @param &#123;string&#125; propsName 这个是属性名, 后面的 string 代表的是 string 格式的属性名\n * 中括号后面的 string 代表的是属性(propsName)的值的格式\n * *&#x2F;\nlet o3: &#123; name: string, [propsName: string]: string &#125;\no3 &#x3D; &#123; name: &#39;str&#39;, age: &#39;12&#39; &#125;</code></pre>\n\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><blockquote>\n<p>可以用来告诉 ts 解析器变量的实际数据类型</p>\n</blockquote>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">let un: nuknown;\nun &#x3D; &#39;string&#39;\n\nlet s: string;\n\ns &#x3D; un; &#x2F;&#x2F; 此时是不成立的\n&#x2F;&#x2F; 由于 un 是 unknow 类型的(未知类型数值), 是不能赋值给 string 类型的\n\n&#x2F;&#x2F; 由于此时的 un 确实是 string 类型,我们可以使用类型断言来告诉解析器 un 就是 string 类型的来解决解析器报错问题\n\n&#x2F;&#x2F; 两种写法\ns &#x3D; un as string;\ns &#x3D; &lt;string&gt;un;</code></pre>\n"},{"title":"tsconfig.json 编译配置","date":"2022-03-05T08:40:02.000Z","cover":"https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png","_content":"\n# tsconfig.json 编译配置\n\n```json\n  {\n    // 设置保存文件的时候自动编译，但需要编译器支持。\n    \"compileOnSave\": false,\n\n    // 编译选项配置\n    \"compilerOptions\": {\n      \"incremental\": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\n\n      \"tsBuildInfoFile\": \"./buildFile\", // 增量编译文件的存储位置\n\n      \"diagnostics\": true, // 打印诊断信息\n\n      \"target\": \"ES5\", // 目标语言的版本\n\n      \"module\": \"CommonJS\", // 生成代码的模板标准\n\n      \"outFile\": \"./app.js\", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置\"module\": \"AMD\",\n\n      \"lib\": [\"DOM\", \"ES2015\", \"ScriptHost\", \"ES2019.Array\"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入\"ES2019.Array\",\n\n      \"allowJS\": true, // 允许编译器编译JS，JSX文件\n\n      \"checkJs\": true, // 允许在JS文件中报错，通常与allowJS一起使用\n\n      \"outDir\": \"./dist\", // 指定输出目录\n\n      \"rootDir\": \"./\", // 指定输出文件目录(用于输出)，用于控制输出目录结构\n\n      \"declaration\": true, // 生成声明文件，开启后会自动生成声明文件\n\n      \"declarationDir\": \"./file\", // 指定生成声明文件存放目录\n\n      \"emitDeclarationOnly\": true, // 只生成声明文件，而不会生成js文件\n\n      \"sourceMap\": true, // 生成目标文件的sourceMap文件\n\n      \"inlineSourceMap\": true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\n\n      \"declarationMap\": true, // 为声明文件生成sourceMap\n\n      \"typeRoots\": [], // 声明文件目录，默认时node_modules/@types\n\n      \"types\": [], // 加载的声明文件包\n\n      \"removeComments\":true, // 删除注释\n\n      \"noEmit\": true, // 不输出文件,即编译后不会生成任何js文件\n\n      \"noEmitOnError\": true, // 发送错误时不输出任何文件\n\n      \"noEmitHelpers\": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\n\n      \"importHelpers\": true, // 通过tslib引入helper函数，文件必须是模块\n\n      \"downlevelIteration\": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现\n\n      \"strict\": true, // 开启所有严格的类型检查\n\n      \"alwaysStrict\": true, // 在代码中注入'use strict'\n\n      \"noImplicitAny\": true, // 不允许隐式的any类型\n\n      \"strictNullChecks\": true, // 不允许把null、undefined赋值给其他类型的变量\n\n      \"strictFunctionTypes\": true, // 不允许函数参数双向协变\n\n      \"strictPropertyInitialization\": true, // 类的实例属性必须初始化\n\n      \"strictBindCallApply\": true, // 严格的bind/call/apply检查\n\n      \"noImplicitThis\": true, // 不允许this有隐式的any类型\n\n      \"noUnusedLocals\": true, // 检查只声明、未使用的局部变量(只提示不报错)\n\n      \"noUnusedParameters\": true, // 检查未使用的函数参数(只提示不报错)\n\n      \"noFallthroughCasesInSwitch\": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)\n\n      \"noImplicitReturns\": true, //每个分支都会有返回值\n\n      \"esModuleInterop\": true, // 允许export=导出，由import from 导入\n\n      \"allowUmdGlobalAccess\": true, // 允许在模块中全局变量的方式访问umd模块\n\n      \"moduleResolution\": \"node\", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入\n\n      \"baseUrl\": \"./\", // 解析非相对模块的基地址，默认是当前目录\n\n      \"paths\": { // 路径映射，相对于baseUrl\n        // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\n        \"jquery\": [\"node_modules/jquery/dist/jquery.min.js\"]\n      },\n\n      \"rootDirs\": [\"src\",\"out\"], // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\n\n      \"listEmittedFiles\": true, // 打印输出文件\n\n      \"listFiles\": true// 打印编译的文件(包括引用的声明文件)\n    },\n\n    // include 属性作用是指定编译需要编译的文件或目录。\n    \"include\": [\"./src/**/*\"],\n\n    // exclude 属性作用是指定编译器需要排除的文件或文件夹。默认排除 node_modules 文件夹下文件。\n    \"exclude\": [\"./utils/**/*\"],\n\n    // extends 属性作用是引入其他配置文件，继承配置。\n    \"extends\": \"./tsconfig.base.json\",\n\n    // files 属性作用是指定需要编译的单个文件列表。 默认包含当前目录和子目录下所有 TypeScript 文件。\n    \"files\": [\n      // 指定编译文件是src目录下的leo.ts文件\n      \"scr/leo.ts\"\n    ],\n\n    // references 属性作用是指定工程引用依赖。\n    // 在项目开发中，有时候我们为了方便将前端项目和后端node项目放在同一个目录下开发，两个项目依赖同一个配置文件和通用文件，但我们希望前后端项目进行灵活的分别打包，那么我们可以进行如下配置：\n    \"references\": [ // 指定依赖的工程\n      {\"path\": \"./common\"}\n    ],\n\n    // typeAcquisition 属性作用是设置自动引入库类型定义文件(.d.ts)相关。\n    // enable  : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false；\n    // include  : 数组类型，允许自动引入的库名，如：[\"jquery\", \"lodash\"]；\n    // exculde  : 数组类型，排除的库名。\n    \"typeAcquisition\": {\n      \"enable\": false,\n      \"exclude\": [\"jquery\"],\n      \"include\": [\"jest\"]\n    }\n  }\n```\n","source":"_posts/typescript/tsconfig.json 编译配置.md","raw":"---\ntitle: tsconfig.json 编译配置\ndate: 2022/3/5 16:40:02\ncover: https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png\ncategories:\n  - TypeScript\ntags:\n  - TypeScript\n  - tsconfig\n---\n\n# tsconfig.json 编译配置\n\n```json\n  {\n    // 设置保存文件的时候自动编译，但需要编译器支持。\n    \"compileOnSave\": false,\n\n    // 编译选项配置\n    \"compilerOptions\": {\n      \"incremental\": true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\n\n      \"tsBuildInfoFile\": \"./buildFile\", // 增量编译文件的存储位置\n\n      \"diagnostics\": true, // 打印诊断信息\n\n      \"target\": \"ES5\", // 目标语言的版本\n\n      \"module\": \"CommonJS\", // 生成代码的模板标准\n\n      \"outFile\": \"./app.js\", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置\"module\": \"AMD\",\n\n      \"lib\": [\"DOM\", \"ES2015\", \"ScriptHost\", \"ES2019.Array\"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入\"ES2019.Array\",\n\n      \"allowJS\": true, // 允许编译器编译JS，JSX文件\n\n      \"checkJs\": true, // 允许在JS文件中报错，通常与allowJS一起使用\n\n      \"outDir\": \"./dist\", // 指定输出目录\n\n      \"rootDir\": \"./\", // 指定输出文件目录(用于输出)，用于控制输出目录结构\n\n      \"declaration\": true, // 生成声明文件，开启后会自动生成声明文件\n\n      \"declarationDir\": \"./file\", // 指定生成声明文件存放目录\n\n      \"emitDeclarationOnly\": true, // 只生成声明文件，而不会生成js文件\n\n      \"sourceMap\": true, // 生成目标文件的sourceMap文件\n\n      \"inlineSourceMap\": true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\n\n      \"declarationMap\": true, // 为声明文件生成sourceMap\n\n      \"typeRoots\": [], // 声明文件目录，默认时node_modules/@types\n\n      \"types\": [], // 加载的声明文件包\n\n      \"removeComments\":true, // 删除注释\n\n      \"noEmit\": true, // 不输出文件,即编译后不会生成任何js文件\n\n      \"noEmitOnError\": true, // 发送错误时不输出任何文件\n\n      \"noEmitHelpers\": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\n\n      \"importHelpers\": true, // 通过tslib引入helper函数，文件必须是模块\n\n      \"downlevelIteration\": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现\n\n      \"strict\": true, // 开启所有严格的类型检查\n\n      \"alwaysStrict\": true, // 在代码中注入'use strict'\n\n      \"noImplicitAny\": true, // 不允许隐式的any类型\n\n      \"strictNullChecks\": true, // 不允许把null、undefined赋值给其他类型的变量\n\n      \"strictFunctionTypes\": true, // 不允许函数参数双向协变\n\n      \"strictPropertyInitialization\": true, // 类的实例属性必须初始化\n\n      \"strictBindCallApply\": true, // 严格的bind/call/apply检查\n\n      \"noImplicitThis\": true, // 不允许this有隐式的any类型\n\n      \"noUnusedLocals\": true, // 检查只声明、未使用的局部变量(只提示不报错)\n\n      \"noUnusedParameters\": true, // 检查未使用的函数参数(只提示不报错)\n\n      \"noFallthroughCasesInSwitch\": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)\n\n      \"noImplicitReturns\": true, //每个分支都会有返回值\n\n      \"esModuleInterop\": true, // 允许export=导出，由import from 导入\n\n      \"allowUmdGlobalAccess\": true, // 允许在模块中全局变量的方式访问umd模块\n\n      \"moduleResolution\": \"node\", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入\n\n      \"baseUrl\": \"./\", // 解析非相对模块的基地址，默认是当前目录\n\n      \"paths\": { // 路径映射，相对于baseUrl\n        // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\n        \"jquery\": [\"node_modules/jquery/dist/jquery.min.js\"]\n      },\n\n      \"rootDirs\": [\"src\",\"out\"], // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\n\n      \"listEmittedFiles\": true, // 打印输出文件\n\n      \"listFiles\": true// 打印编译的文件(包括引用的声明文件)\n    },\n\n    // include 属性作用是指定编译需要编译的文件或目录。\n    \"include\": [\"./src/**/*\"],\n\n    // exclude 属性作用是指定编译器需要排除的文件或文件夹。默认排除 node_modules 文件夹下文件。\n    \"exclude\": [\"./utils/**/*\"],\n\n    // extends 属性作用是引入其他配置文件，继承配置。\n    \"extends\": \"./tsconfig.base.json\",\n\n    // files 属性作用是指定需要编译的单个文件列表。 默认包含当前目录和子目录下所有 TypeScript 文件。\n    \"files\": [\n      // 指定编译文件是src目录下的leo.ts文件\n      \"scr/leo.ts\"\n    ],\n\n    // references 属性作用是指定工程引用依赖。\n    // 在项目开发中，有时候我们为了方便将前端项目和后端node项目放在同一个目录下开发，两个项目依赖同一个配置文件和通用文件，但我们希望前后端项目进行灵活的分别打包，那么我们可以进行如下配置：\n    \"references\": [ // 指定依赖的工程\n      {\"path\": \"./common\"}\n    ],\n\n    // typeAcquisition 属性作用是设置自动引入库类型定义文件(.d.ts)相关。\n    // enable  : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false；\n    // include  : 数组类型，允许自动引入的库名，如：[\"jquery\", \"lodash\"]；\n    // exculde  : 数组类型，排除的库名。\n    \"typeAcquisition\": {\n      \"enable\": false,\n      \"exclude\": [\"jquery\"],\n      \"include\": [\"jest\"]\n    }\n  }\n```\n","slug":"typescript/tsconfig.json 编译配置","published":1,"updated":"2023-01-04T12:47:40.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0x0007b8xg6oy23o79","content":"<h1 id=\"tsconfig-json-编译配置\"><a href=\"#tsconfig-json-编译配置\" class=\"headerlink\" title=\"tsconfig.json 编译配置\"></a>tsconfig.json 编译配置</h1><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &#x2F;&#x2F; 设置保存文件的时候自动编译，但需要编译器支持。\n  &quot;compileOnSave&quot;: false,\n\n  &#x2F;&#x2F; 编译选项配置\n  &quot;compilerOptions&quot;: &#123;\n    &quot;incremental&quot;: true, &#x2F;&#x2F; TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\n\n    &quot;tsBuildInfoFile&quot;: &quot;.&#x2F;buildFile&quot;, &#x2F;&#x2F; 增量编译文件的存储位置\n\n    &quot;diagnostics&quot;: true, &#x2F;&#x2F; 打印诊断信息\n\n    &quot;target&quot;: &quot;ES5&quot;, &#x2F;&#x2F; 目标语言的版本\n\n    &quot;module&quot;: &quot;CommonJS&quot;, &#x2F;&#x2F; 生成代码的模板标准\n\n    &quot;outFile&quot;: &quot;.&#x2F;app.js&quot;, &#x2F;&#x2F; 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,\n\n    &quot;lib&quot;: [&quot;DOM&quot;, &quot;ES2015&quot;, &quot;ScriptHost&quot;, &quot;ES2019.Array&quot;], &#x2F;&#x2F; TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,\n\n    &quot;allowJS&quot;: true, &#x2F;&#x2F; 允许编译器编译JS，JSX文件\n\n    &quot;checkJs&quot;: true, &#x2F;&#x2F; 允许在JS文件中报错，通常与allowJS一起使用\n\n    &quot;outDir&quot;: &quot;.&#x2F;dist&quot;, &#x2F;&#x2F; 指定输出目录\n\n    &quot;rootDir&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 指定输出文件目录(用于输出)，用于控制输出目录结构\n\n    &quot;declaration&quot;: true, &#x2F;&#x2F; 生成声明文件，开启后会自动生成声明文件\n\n    &quot;declarationDir&quot;: &quot;.&#x2F;file&quot;, &#x2F;&#x2F; 指定生成声明文件存放目录\n\n    &quot;emitDeclarationOnly&quot;: true, &#x2F;&#x2F; 只生成声明文件，而不会生成js文件\n\n    &quot;sourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的sourceMap文件\n\n    &quot;inlineSourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\n\n    &quot;declarationMap&quot;: true, &#x2F;&#x2F; 为声明文件生成sourceMap\n\n    &quot;typeRoots&quot;: [], &#x2F;&#x2F; 声明文件目录，默认时node_modules&#x2F;@types\n\n    &quot;types&quot;: [], &#x2F;&#x2F; 加载的声明文件包\n\n    &quot;removeComments&quot;:true, &#x2F;&#x2F; 删除注释\n\n    &quot;noEmit&quot;: true, &#x2F;&#x2F; 不输出文件,即编译后不会生成任何js文件\n\n    &quot;noEmitOnError&quot;: true, &#x2F;&#x2F; 发送错误时不输出任何文件\n\n    &quot;noEmitHelpers&quot;: true, &#x2F;&#x2F; 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\n\n    &quot;importHelpers&quot;: true, &#x2F;&#x2F; 通过tslib引入helper函数，文件必须是模块\n\n    &quot;downlevelIteration&quot;: true, &#x2F;&#x2F; 降级遍历器实现，如果目标源是es3&#x2F;5，那么遍历器会有降级的实现\n\n    &quot;strict&quot;: true, &#x2F;&#x2F; 开启所有严格的类型检查\n\n    &quot;alwaysStrict&quot;: true, &#x2F;&#x2F; 在代码中注入&#39;use strict&#39;\n\n    &quot;noImplicitAny&quot;: true, &#x2F;&#x2F; 不允许隐式的any类型\n\n    &quot;strictNullChecks&quot;: true, &#x2F;&#x2F; 不允许把null、undefined赋值给其他类型的变量\n\n    &quot;strictFunctionTypes&quot;: true, &#x2F;&#x2F; 不允许函数参数双向协变\n\n    &quot;strictPropertyInitialization&quot;: true, &#x2F;&#x2F; 类的实例属性必须初始化\n\n    &quot;strictBindCallApply&quot;: true, &#x2F;&#x2F; 严格的bind&#x2F;call&#x2F;apply检查\n\n    &quot;noImplicitThis&quot;: true, &#x2F;&#x2F; 不允许this有隐式的any类型\n\n    &quot;noUnusedLocals&quot;: true, &#x2F;&#x2F; 检查只声明、未使用的局部变量(只提示不报错)\n\n    &quot;noUnusedParameters&quot;: true, &#x2F;&#x2F; 检查未使用的函数参数(只提示不报错)\n\n    &quot;noFallthroughCasesInSwitch&quot;: true, &#x2F;&#x2F; 防止switch语句贯穿(即如果没有break语句后面不会执行)\n\n    &quot;noImplicitReturns&quot;: true, &#x2F;&#x2F;每个分支都会有返回值\n\n    &quot;esModuleInterop&quot;: true, &#x2F;&#x2F; 允许export&#x3D;导出，由import from 导入\n\n    &quot;allowUmdGlobalAccess&quot;: true, &#x2F;&#x2F; 允许在模块中全局变量的方式访问umd模块\n\n    &quot;moduleResolution&quot;: &quot;node&quot;, &#x2F;&#x2F; 模块解析策略，ts默认用node的解析策略，即相对的方式导入\n\n    &quot;baseUrl&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 解析非相对模块的基地址，默认是当前目录\n\n    &quot;paths&quot;: &#123; &#x2F;&#x2F; 路径映射，相对于baseUrl\n      &#x2F;&#x2F; 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\n      &quot;jquery&quot;: [&quot;node_modules&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;]\n    &#125;,\n\n    &quot;rootDirs&quot;: [&quot;src&quot;,&quot;out&quot;], &#x2F;&#x2F; 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\n\n    &quot;listEmittedFiles&quot;: true, &#x2F;&#x2F; 打印输出文件\n\n    &quot;listFiles&quot;: true&#x2F;&#x2F; 打印编译的文件(包括引用的声明文件)\n  &#125;,\n\n  &#x2F;&#x2F; include 属性作用是指定编译需要编译的文件或目录。\n  &quot;include&quot;: [&quot;.&#x2F;src&#x2F;**&#x2F;*&quot;],\n\n  &#x2F;&#x2F; exclude 属性作用是指定编译器需要排除的文件或文件夹。默认排除 node_modules 文件夹下文件。\n  &quot;exclude&quot;: [&quot;.&#x2F;utils&#x2F;**&#x2F;*&quot;],\n\n  &#x2F;&#x2F; extends 属性作用是引入其他配置文件，继承配置。\n  &quot;extends&quot;: &quot;.&#x2F;tsconfig.base.json&quot;,\n\n  &#x2F;&#x2F; files 属性作用是指定需要编译的单个文件列表。 默认包含当前目录和子目录下所有 TypeScript 文件。\n  &quot;files&quot;: [\n    &#x2F;&#x2F; 指定编译文件是src目录下的leo.ts文件\n    &quot;scr&#x2F;leo.ts&quot;\n  ],\n\n  &#x2F;&#x2F; references 属性作用是指定工程引用依赖。\n  &#x2F;&#x2F; 在项目开发中，有时候我们为了方便将前端项目和后端node项目放在同一个目录下开发，两个项目依赖同一个配置文件和通用文件，但我们希望前后端项目进行灵活的分别打包，那么我们可以进行如下配置：\n  &quot;references&quot;: [ &#x2F;&#x2F; 指定依赖的工程\n    &#123;&quot;path&quot;: &quot;.&#x2F;common&quot;&#125;\n  ],\n\n  &#x2F;&#x2F; typeAcquisition 属性作用是设置自动引入库类型定义文件(.d.ts)相关。\n  &#x2F;&#x2F; enable  : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false；\n  &#x2F;&#x2F; include  : 数组类型，允许自动引入的库名，如：[&quot;jquery&quot;, &quot;lodash&quot;]；\n  &#x2F;&#x2F; exculde  : 数组类型，排除的库名。\n  &quot;typeAcquisition&quot;: &#123;\n    &quot;enable&quot;: false,\n    &quot;exclude&quot;: [&quot;jquery&quot;],\n    &quot;include&quot;: [&quot;jest&quot;]\n  &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"tsconfig-json-编译配置\"><a href=\"#tsconfig-json-编译配置\" class=\"headerlink\" title=\"tsconfig.json 编译配置\"></a>tsconfig.json 编译配置</h1><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &#x2F;&#x2F; 设置保存文件的时候自动编译，但需要编译器支持。\n  &quot;compileOnSave&quot;: false,\n\n  &#x2F;&#x2F; 编译选项配置\n  &quot;compilerOptions&quot;: &#123;\n    &quot;incremental&quot;: true, &#x2F;&#x2F; TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\n\n    &quot;tsBuildInfoFile&quot;: &quot;.&#x2F;buildFile&quot;, &#x2F;&#x2F; 增量编译文件的存储位置\n\n    &quot;diagnostics&quot;: true, &#x2F;&#x2F; 打印诊断信息\n\n    &quot;target&quot;: &quot;ES5&quot;, &#x2F;&#x2F; 目标语言的版本\n\n    &quot;module&quot;: &quot;CommonJS&quot;, &#x2F;&#x2F; 生成代码的模板标准\n\n    &quot;outFile&quot;: &quot;.&#x2F;app.js&quot;, &#x2F;&#x2F; 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,\n\n    &quot;lib&quot;: [&quot;DOM&quot;, &quot;ES2015&quot;, &quot;ScriptHost&quot;, &quot;ES2019.Array&quot;], &#x2F;&#x2F; TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,\n\n    &quot;allowJS&quot;: true, &#x2F;&#x2F; 允许编译器编译JS，JSX文件\n\n    &quot;checkJs&quot;: true, &#x2F;&#x2F; 允许在JS文件中报错，通常与allowJS一起使用\n\n    &quot;outDir&quot;: &quot;.&#x2F;dist&quot;, &#x2F;&#x2F; 指定输出目录\n\n    &quot;rootDir&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 指定输出文件目录(用于输出)，用于控制输出目录结构\n\n    &quot;declaration&quot;: true, &#x2F;&#x2F; 生成声明文件，开启后会自动生成声明文件\n\n    &quot;declarationDir&quot;: &quot;.&#x2F;file&quot;, &#x2F;&#x2F; 指定生成声明文件存放目录\n\n    &quot;emitDeclarationOnly&quot;: true, &#x2F;&#x2F; 只生成声明文件，而不会生成js文件\n\n    &quot;sourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的sourceMap文件\n\n    &quot;inlineSourceMap&quot;: true, &#x2F;&#x2F; 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\n\n    &quot;declarationMap&quot;: true, &#x2F;&#x2F; 为声明文件生成sourceMap\n\n    &quot;typeRoots&quot;: [], &#x2F;&#x2F; 声明文件目录，默认时node_modules&#x2F;@types\n\n    &quot;types&quot;: [], &#x2F;&#x2F; 加载的声明文件包\n\n    &quot;removeComments&quot;:true, &#x2F;&#x2F; 删除注释\n\n    &quot;noEmit&quot;: true, &#x2F;&#x2F; 不输出文件,即编译后不会生成任何js文件\n\n    &quot;noEmitOnError&quot;: true, &#x2F;&#x2F; 发送错误时不输出任何文件\n\n    &quot;noEmitHelpers&quot;: true, &#x2F;&#x2F; 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\n\n    &quot;importHelpers&quot;: true, &#x2F;&#x2F; 通过tslib引入helper函数，文件必须是模块\n\n    &quot;downlevelIteration&quot;: true, &#x2F;&#x2F; 降级遍历器实现，如果目标源是es3&#x2F;5，那么遍历器会有降级的实现\n\n    &quot;strict&quot;: true, &#x2F;&#x2F; 开启所有严格的类型检查\n\n    &quot;alwaysStrict&quot;: true, &#x2F;&#x2F; 在代码中注入&#39;use strict&#39;\n\n    &quot;noImplicitAny&quot;: true, &#x2F;&#x2F; 不允许隐式的any类型\n\n    &quot;strictNullChecks&quot;: true, &#x2F;&#x2F; 不允许把null、undefined赋值给其他类型的变量\n\n    &quot;strictFunctionTypes&quot;: true, &#x2F;&#x2F; 不允许函数参数双向协变\n\n    &quot;strictPropertyInitialization&quot;: true, &#x2F;&#x2F; 类的实例属性必须初始化\n\n    &quot;strictBindCallApply&quot;: true, &#x2F;&#x2F; 严格的bind&#x2F;call&#x2F;apply检查\n\n    &quot;noImplicitThis&quot;: true, &#x2F;&#x2F; 不允许this有隐式的any类型\n\n    &quot;noUnusedLocals&quot;: true, &#x2F;&#x2F; 检查只声明、未使用的局部变量(只提示不报错)\n\n    &quot;noUnusedParameters&quot;: true, &#x2F;&#x2F; 检查未使用的函数参数(只提示不报错)\n\n    &quot;noFallthroughCasesInSwitch&quot;: true, &#x2F;&#x2F; 防止switch语句贯穿(即如果没有break语句后面不会执行)\n\n    &quot;noImplicitReturns&quot;: true, &#x2F;&#x2F;每个分支都会有返回值\n\n    &quot;esModuleInterop&quot;: true, &#x2F;&#x2F; 允许export&#x3D;导出，由import from 导入\n\n    &quot;allowUmdGlobalAccess&quot;: true, &#x2F;&#x2F; 允许在模块中全局变量的方式访问umd模块\n\n    &quot;moduleResolution&quot;: &quot;node&quot;, &#x2F;&#x2F; 模块解析策略，ts默认用node的解析策略，即相对的方式导入\n\n    &quot;baseUrl&quot;: &quot;.&#x2F;&quot;, &#x2F;&#x2F; 解析非相对模块的基地址，默认是当前目录\n\n    &quot;paths&quot;: &#123; &#x2F;&#x2F; 路径映射，相对于baseUrl\n      &#x2F;&#x2F; 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\n      &quot;jquery&quot;: [&quot;node_modules&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;]\n    &#125;,\n\n    &quot;rootDirs&quot;: [&quot;src&quot;,&quot;out&quot;], &#x2F;&#x2F; 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\n\n    &quot;listEmittedFiles&quot;: true, &#x2F;&#x2F; 打印输出文件\n\n    &quot;listFiles&quot;: true&#x2F;&#x2F; 打印编译的文件(包括引用的声明文件)\n  &#125;,\n\n  &#x2F;&#x2F; include 属性作用是指定编译需要编译的文件或目录。\n  &quot;include&quot;: [&quot;.&#x2F;src&#x2F;**&#x2F;*&quot;],\n\n  &#x2F;&#x2F; exclude 属性作用是指定编译器需要排除的文件或文件夹。默认排除 node_modules 文件夹下文件。\n  &quot;exclude&quot;: [&quot;.&#x2F;utils&#x2F;**&#x2F;*&quot;],\n\n  &#x2F;&#x2F; extends 属性作用是引入其他配置文件，继承配置。\n  &quot;extends&quot;: &quot;.&#x2F;tsconfig.base.json&quot;,\n\n  &#x2F;&#x2F; files 属性作用是指定需要编译的单个文件列表。 默认包含当前目录和子目录下所有 TypeScript 文件。\n  &quot;files&quot;: [\n    &#x2F;&#x2F; 指定编译文件是src目录下的leo.ts文件\n    &quot;scr&#x2F;leo.ts&quot;\n  ],\n\n  &#x2F;&#x2F; references 属性作用是指定工程引用依赖。\n  &#x2F;&#x2F; 在项目开发中，有时候我们为了方便将前端项目和后端node项目放在同一个目录下开发，两个项目依赖同一个配置文件和通用文件，但我们希望前后端项目进行灵活的分别打包，那么我们可以进行如下配置：\n  &quot;references&quot;: [ &#x2F;&#x2F; 指定依赖的工程\n    &#123;&quot;path&quot;: &quot;.&#x2F;common&quot;&#125;\n  ],\n\n  &#x2F;&#x2F; typeAcquisition 属性作用是设置自动引入库类型定义文件(.d.ts)相关。\n  &#x2F;&#x2F; enable  : 布尔类型，是否开启自动引入库类型定义文件(.d.ts)，默认为 false；\n  &#x2F;&#x2F; include  : 数组类型，允许自动引入的库名，如：[&quot;jquery&quot;, &quot;lodash&quot;]；\n  &#x2F;&#x2F; exculde  : 数组类型，排除的库名。\n  &quot;typeAcquisition&quot;: &#123;\n    &quot;enable&quot;: false,\n    &quot;exclude&quot;: [&quot;jquery&quot;],\n    &quot;include&quot;: [&quot;jest&quot;]\n  &#125;\n&#125;</code></pre>\n"},{"title":"webpack 创建简单的 ts 开发环境","date":"2022-03-05T08:55:46.000Z","cover":"https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png","_content":"\n# webpack 创建简单的 ts 开发环境\n\n## 前置要求\n\n需要的的 `npm` 插件\n\n>\n> 1. webpack ( webpack 本体 )\n> 2. webpack-cli ( webpack 的命令行工具 )\n> 3. typescript ( typescript 核心代码 )\n> 4. ts-loader (typescript 的 webpck 编译模块)\n> 5. clean-webpack-plugin ( 打包前清除之前打包的文件夹 )\n>\n\n\n\n## ts 开发环境目录\n![Snipaste_2022-03-05_15-32-16.png](https://s2.loli.net/2023/01/03/XS1lVDEMyifWocg.png)\n\n## tsconfig.json 配置\n\n```json\n  {\n    \"compilerOptions\": {\n\n      \"module\": \"ES6\",             // 使用的模块规则\n\n      \"target\": \"ES6\",             // 编译生成 js 的版本\n\n      \"noImplicitAny\": true,       // 不允许隐式的 any 类型\n\n      \"removeComments\": true,      // 删除注释\n\n      \"preserveConstEnums\": true,  // 保留 const 和 enum 声明\n\n      \"strict\": true               // 使用严格模式\n    },\n\n    // 需要编译的 ts 文件\n    \"include\": [\n      \"./src/**/*\"\n    ]\n  }\n```\n\n## webpack.config.js 配置\n\n### 基本配置\n\n```javascript\n  const path = require(\"path\")\n  const { CleanWebpackPlugin } = require(\"clean-webpack-plugin\")\n\n  module.exports = {\n    // 入口文件\n    entry: \"./src/index.ts\",\n\n    // 打包后的出口文件\n    output: {\n      // 文件路径\n      path: path.resolve(__dirname, \"dist\"),\n\n      // 文件名\n      filename: \"bundle.js\",\n    },\n    // 使用的编译模块\n    module: {\n\n      // 指定要加载的规则\n      rules: [\n        {\n          // test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n          test: /\\.ts$/,\n\n          // 要使用的 loader\n          use: ['ts-loader'],\n\n          // 排除要编译的文件夹\n          exclude: /node_modules/\n        }\n      ]\n    },\n\n    // 用来设置需要引用的模块文件 (这里包括了 ts 和 js) 不设置的话, 引用其他 ts/js 文件会编译报错\n    resolve: {\n      extensions: ['.ts', '.js']\n    },\n\n    // 配置 webpack 插件\n    plugins: [\n      new CleanWebpackPlugin()\n    ],\n  }\n```\n\n### 使用 html 文件配置\n\n> 前端项目中我们编译完的 js 文件最终会用到 html 文件中. 我们手动创建并引入 js 的话也不是不行, 但是很麻烦, 如果以后要增加一些其他的 js 或者 css 都得重新去手动引入. 这时候就可以用 `webpack` 给我们提供的一个自动引入经过 loader 编译后的文件 html 的插件 `html-webpack-plugin`\n>\n> `**_npm install -D html-webpack-plugin_**`\n\n\n在最外层的 `plugins` 中配置\n\n[更多 html-webpack-plugin 的配置信息看这里](https://github.com/jantimon/html-webpack-plugin#configuration)\n\n```javascript\n  // 引入插件\n  const HtmlWebpackPlugin = require(\"html-webpack-plugin\")\n\n  module.exprots = {\n    // 配置 webpack 插件\n    plugins: [\n      new HtmlWebpackPlugin({\n        // 配置 html 模板文件的目录\n        template: path.resolve(__dirname, 'public/index.html')\n      })\n    ],\n  }\n```\n\n### 使用 webpack-server 实时编译\n\n> 弄好 `html` 自动引入后我们需要打开网页去调试我们的 ts 程序, 按照普通方式来修改一次又要打包一遍, 又要重新刷新一遍网页的话就很麻烦, 这时我们可以用 `webpack-server` 来进行开发服务器部署\n>\n> `**_npm install -D webpack-server_**`\n>\n> 安装完后直接在 `package.json` 中进行配置运行命令运行就行了\n\n\n```json\n  {\n    \"scripts\": {\n      \"dev\": \"webpack server --mode development\"\n    }\n  }\n```\n\n### 配置 babel 来进行浏览器兼容\n\n在日常的开发中我们会经常遇到要兼容低版本浏览器的需要, 这时候为了增加开发效率我们可以用 `**_babel_**` 来将一些 `**_ES6_**` 中的高级属性来转换为低版本浏览器中的兼容属性\n\n需要的开发依赖\n\n>\n> 1. @babel/core ( babel 的核心代码 )\n> 2. @babel/preset-env ( babel 的兼容库 )\n> 3. core-js ( 高级属性的兼容性替代方案 )\n>\n\n> `**_npm install -D @babel/core @babel/preset-env core-js_**`\n\n\nwebpack 配置\n\n```javascript\n\n  module.exports = {\n\n    // 使用的编译模块\n    module: {\n      // 指定要加载的规则\n      rules: [\n        {\n          // test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n          test: /\\.ts$/,\n\n          // 要使用的 loader\n          use: [\n\n            // 配置 babel\n            {\n              // 指定要用的加载器\n              loader: 'babel-loader',\n\n              options: {\n                // 设置预定义的环境\n                presets: [\n                  [\n                    \"@babel-preset-env\",\n\n                    {\n                      // 需要兼容的目标浏览器, 根据项目需求填写\n                      targets: {\n                        \"chrome\": 95\n                      },\n\n                      // 指定的 core 版本\n                      \"corejs\": '3',\n\n                      // 使用 corejs 的方式 \"usage\" 按需加载\n                      \"useBuiltIns\": \"usage\"\n                    }\n                  ]\n                ]\n              }\n            },\n\n            // 由于 webpack 中 rules 是从数组从后往前执行的, 所以 ts-loader 放在后面, 让 ts 先编译为 js 在通过 babel 进行兼容性转换\n            'ts-loader'\n          ],\n        }\n      ]\n    }\n  }\n```\n","source":"_posts/typescript/webpack 搭建 ts 开发环境.md","raw":"---\ntitle: webpack 创建简单的 ts 开发环境\ndate: 2022/3/5 16:55:46\ncover: https://s2.loli.net/2023/01/03/yaCgTcBLzJk1672.png\ncategories:\n  - TypeScript\ntags:\n  - TypeScript\n  - 环境搭建\n  - webpack\n---\n\n# webpack 创建简单的 ts 开发环境\n\n## 前置要求\n\n需要的的 `npm` 插件\n\n>\n> 1. webpack ( webpack 本体 )\n> 2. webpack-cli ( webpack 的命令行工具 )\n> 3. typescript ( typescript 核心代码 )\n> 4. ts-loader (typescript 的 webpck 编译模块)\n> 5. clean-webpack-plugin ( 打包前清除之前打包的文件夹 )\n>\n\n\n\n## ts 开发环境目录\n![Snipaste_2022-03-05_15-32-16.png](https://s2.loli.net/2023/01/03/XS1lVDEMyifWocg.png)\n\n## tsconfig.json 配置\n\n```json\n  {\n    \"compilerOptions\": {\n\n      \"module\": \"ES6\",             // 使用的模块规则\n\n      \"target\": \"ES6\",             // 编译生成 js 的版本\n\n      \"noImplicitAny\": true,       // 不允许隐式的 any 类型\n\n      \"removeComments\": true,      // 删除注释\n\n      \"preserveConstEnums\": true,  // 保留 const 和 enum 声明\n\n      \"strict\": true               // 使用严格模式\n    },\n\n    // 需要编译的 ts 文件\n    \"include\": [\n      \"./src/**/*\"\n    ]\n  }\n```\n\n## webpack.config.js 配置\n\n### 基本配置\n\n```javascript\n  const path = require(\"path\")\n  const { CleanWebpackPlugin } = require(\"clean-webpack-plugin\")\n\n  module.exports = {\n    // 入口文件\n    entry: \"./src/index.ts\",\n\n    // 打包后的出口文件\n    output: {\n      // 文件路径\n      path: path.resolve(__dirname, \"dist\"),\n\n      // 文件名\n      filename: \"bundle.js\",\n    },\n    // 使用的编译模块\n    module: {\n\n      // 指定要加载的规则\n      rules: [\n        {\n          // test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n          test: /\\.ts$/,\n\n          // 要使用的 loader\n          use: ['ts-loader'],\n\n          // 排除要编译的文件夹\n          exclude: /node_modules/\n        }\n      ]\n    },\n\n    // 用来设置需要引用的模块文件 (这里包括了 ts 和 js) 不设置的话, 引用其他 ts/js 文件会编译报错\n    resolve: {\n      extensions: ['.ts', '.js']\n    },\n\n    // 配置 webpack 插件\n    plugins: [\n      new CleanWebpackPlugin()\n    ],\n  }\n```\n\n### 使用 html 文件配置\n\n> 前端项目中我们编译完的 js 文件最终会用到 html 文件中. 我们手动创建并引入 js 的话也不是不行, 但是很麻烦, 如果以后要增加一些其他的 js 或者 css 都得重新去手动引入. 这时候就可以用 `webpack` 给我们提供的一个自动引入经过 loader 编译后的文件 html 的插件 `html-webpack-plugin`\n>\n> `**_npm install -D html-webpack-plugin_**`\n\n\n在最外层的 `plugins` 中配置\n\n[更多 html-webpack-plugin 的配置信息看这里](https://github.com/jantimon/html-webpack-plugin#configuration)\n\n```javascript\n  // 引入插件\n  const HtmlWebpackPlugin = require(\"html-webpack-plugin\")\n\n  module.exprots = {\n    // 配置 webpack 插件\n    plugins: [\n      new HtmlWebpackPlugin({\n        // 配置 html 模板文件的目录\n        template: path.resolve(__dirname, 'public/index.html')\n      })\n    ],\n  }\n```\n\n### 使用 webpack-server 实时编译\n\n> 弄好 `html` 自动引入后我们需要打开网页去调试我们的 ts 程序, 按照普通方式来修改一次又要打包一遍, 又要重新刷新一遍网页的话就很麻烦, 这时我们可以用 `webpack-server` 来进行开发服务器部署\n>\n> `**_npm install -D webpack-server_**`\n>\n> 安装完后直接在 `package.json` 中进行配置运行命令运行就行了\n\n\n```json\n  {\n    \"scripts\": {\n      \"dev\": \"webpack server --mode development\"\n    }\n  }\n```\n\n### 配置 babel 来进行浏览器兼容\n\n在日常的开发中我们会经常遇到要兼容低版本浏览器的需要, 这时候为了增加开发效率我们可以用 `**_babel_**` 来将一些 `**_ES6_**` 中的高级属性来转换为低版本浏览器中的兼容属性\n\n需要的开发依赖\n\n>\n> 1. @babel/core ( babel 的核心代码 )\n> 2. @babel/preset-env ( babel 的兼容库 )\n> 3. core-js ( 高级属性的兼容性替代方案 )\n>\n\n> `**_npm install -D @babel/core @babel/preset-env core-js_**`\n\n\nwebpack 配置\n\n```javascript\n\n  module.exports = {\n\n    // 使用的编译模块\n    module: {\n      // 指定要加载的规则\n      rules: [\n        {\n          // test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n          test: /\\.ts$/,\n\n          // 要使用的 loader\n          use: [\n\n            // 配置 babel\n            {\n              // 指定要用的加载器\n              loader: 'babel-loader',\n\n              options: {\n                // 设置预定义的环境\n                presets: [\n                  [\n                    \"@babel-preset-env\",\n\n                    {\n                      // 需要兼容的目标浏览器, 根据项目需求填写\n                      targets: {\n                        \"chrome\": 95\n                      },\n\n                      // 指定的 core 版本\n                      \"corejs\": '3',\n\n                      // 使用 corejs 的方式 \"usage\" 按需加载\n                      \"useBuiltIns\": \"usage\"\n                    }\n                  ]\n                ]\n              }\n            },\n\n            // 由于 webpack 中 rules 是从数组从后往前执行的, 所以 ts-loader 放在后面, 让 ts 先编译为 js 在通过 babel 进行兼容性转换\n            'ts-loader'\n          ],\n        }\n      ]\n    }\n  }\n```\n","slug":"typescript/webpack 搭建 ts 开发环境","published":1,"updated":"2023-01-04T12:47:40.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clchnsw0z000ab8xgcdr14pdk","content":"<h1 id=\"webpack-创建简单的-ts-开发环境\"><a href=\"#webpack-创建简单的-ts-开发环境\" class=\"headerlink\" title=\"webpack 创建简单的 ts 开发环境\"></a>webpack 创建简单的 ts 开发环境</h1><h2 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h2><p>需要的的 <code>npm</code> 插件</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>webpack ( webpack 本体 )</li>\n<li>webpack-cli ( webpack 的命令行工具 )</li>\n<li>typescript ( typescript 核心代码 )</li>\n<li>ts-loader (typescript 的 webpck 编译模块)</li>\n<li>clean-webpack-plugin ( 打包前清除之前打包的文件夹 )</li>\n</ol></blockquote>\n<h2 id=\"ts-开发环境目录\"><a href=\"#ts-开发环境目录\" class=\"headerlink\" title=\"ts 开发环境目录\"></a>ts 开发环境目录</h2><p><img src=\"https://s2.loli.net/2023/01/03/XS1lVDEMyifWocg.png\" alt=\"Snipaste_2022-03-05_15-32-16.png\"></p>\n<h2 id=\"tsconfig-json-配置\"><a href=\"#tsconfig-json-配置\" class=\"headerlink\" title=\"tsconfig.json 配置\"></a>tsconfig.json 配置</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n\n    &quot;module&quot;: &quot;ES6&quot;,             &#x2F;&#x2F; 使用的模块规则\n\n    &quot;target&quot;: &quot;ES6&quot;,             &#x2F;&#x2F; 编译生成 js 的版本\n\n    &quot;noImplicitAny&quot;: true,       &#x2F;&#x2F; 不允许隐式的 any 类型\n\n    &quot;removeComments&quot;: true,      &#x2F;&#x2F; 删除注释\n\n    &quot;preserveConstEnums&quot;: true,  &#x2F;&#x2F; 保留 const 和 enum 声明\n\n    &quot;strict&quot;: true               &#x2F;&#x2F; 使用严格模式\n  &#125;,\n\n  &#x2F;&#x2F; 需要编译的 ts 文件\n  &quot;include&quot;: [\n    &quot;.&#x2F;src&#x2F;**&#x2F;*&quot;\n  ]\n&#125;</code></pre>\n\n<h2 id=\"webpack-config-js-配置\"><a href=\"#webpack-config-js-配置\" class=\"headerlink\" title=\"webpack.config.js 配置\"></a>webpack.config.js 配置</h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const path &#x3D; require(&quot;path&quot;)\nconst &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;)\n\nmodule.exports &#x3D; &#123;\n  &#x2F;&#x2F; 入口文件\n  entry: &quot;.&#x2F;src&#x2F;index.ts&quot;,\n\n  &#x2F;&#x2F; 打包后的出口文件\n  output: &#123;\n    &#x2F;&#x2F; 文件路径\n    path: path.resolve(__dirname, &quot;dist&quot;),\n\n    &#x2F;&#x2F; 文件名\n    filename: &quot;bundle.js&quot;,\n  &#125;,\n  &#x2F;&#x2F; 使用的编译模块\n  module: &#123;\n\n    &#x2F;&#x2F; 指定要加载的规则\n    rules: [\n      &#123;\n        &#x2F;&#x2F; test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n        test: &#x2F;\\.ts$&#x2F;,\n\n        &#x2F;&#x2F; 要使用的 loader\n        use: [&#39;ts-loader&#39;],\n\n        &#x2F;&#x2F; 排除要编译的文件夹\n        exclude: &#x2F;node_modules&#x2F;\n      &#125;\n    ]\n  &#125;,\n\n  &#x2F;&#x2F; 用来设置需要引用的模块文件 (这里包括了 ts 和 js) 不设置的话, 引用其他 ts&#x2F;js 文件会编译报错\n  resolve: &#123;\n    extensions: [&#39;.ts&#39;, &#39;.js&#39;]\n  &#125;,\n\n  &#x2F;&#x2F; 配置 webpack 插件\n  plugins: [\n    new CleanWebpackPlugin()\n  ],\n&#125;</code></pre>\n\n<h3 id=\"使用-html-文件配置\"><a href=\"#使用-html-文件配置\" class=\"headerlink\" title=\"使用 html 文件配置\"></a>使用 html 文件配置</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>前端项目中我们编译完的 js 文件最终会用到 html 文件中. 我们手动创建并引入 js 的话也不是不行, 但是很麻烦, 如果以后要增加一些其他的 js 或者 css 都得重新去手动引入. 这时候就可以用 <code>webpack</code> 给我们提供的一个自动引入经过 loader 编译后的文件 html 的插件 <code>html-webpack-plugin</code></p>\n<p><code>**_npm install -D html-webpack-plugin_**</code></p></blockquote>\n<p>在最外层的 <code>plugins</code> 中配置</p>\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin#configuration\">更多 html-webpack-plugin 的配置信息看这里</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入插件\nconst HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;)\n\nmodule.exprots &#x3D; &#123;\n  &#x2F;&#x2F; 配置 webpack 插件\n  plugins: [\n    new HtmlWebpackPlugin(&#123;\n      &#x2F;&#x2F; 配置 html 模板文件的目录\n      template: path.resolve(__dirname, &#39;public&#x2F;index.html&#39;)\n    &#125;)\n  ],\n&#125;</code></pre>\n\n<h3 id=\"使用-webpack-server-实时编译\"><a href=\"#使用-webpack-server-实时编译\" class=\"headerlink\" title=\"使用 webpack-server 实时编译\"></a>使用 webpack-server 实时编译</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>弄好 <code>html</code> 自动引入后我们需要打开网页去调试我们的 ts 程序, 按照普通方式来修改一次又要打包一遍, 又要重新刷新一遍网页的话就很麻烦, 这时我们可以用 <code>webpack-server</code> 来进行开发服务器部署</p>\n<p><code>**_npm install -D webpack-server_**</code></p>\n<p>安装完后直接在 <code>package.json</code> 中进行配置运行命令运行就行了</p></blockquote>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;webpack server --mode development&quot;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"配置-babel-来进行浏览器兼容\"><a href=\"#配置-babel-来进行浏览器兼容\" class=\"headerlink\" title=\"配置 babel 来进行浏览器兼容\"></a>配置 babel 来进行浏览器兼容</h3><p>在日常的开发中我们会经常遇到要兼容低版本浏览器的需要, 这时候为了增加开发效率我们可以用 <code>**_babel_**</code> 来将一些 <code>**_ES6_**</code> 中的高级属性来转换为低版本浏览器中的兼容属性</p>\n<p>需要的开发依赖</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>@babel/core ( babel 的核心代码 )</li>\n<li>@babel/preset-env ( babel 的兼容库 )</li>\n<li>core-js ( 高级属性的兼容性替代方案 )</li>\n</ol></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>**_npm install -D @babel/core @babel/preset-env core-js_**</code></p></blockquote>\n<p>webpack 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nmodule.exports &#x3D; &#123;\n\n  &#x2F;&#x2F; 使用的编译模块\n  module: &#123;\n    &#x2F;&#x2F; 指定要加载的规则\n    rules: [\n      &#123;\n        &#x2F;&#x2F; test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n        test: &#x2F;\\.ts$&#x2F;,\n\n        &#x2F;&#x2F; 要使用的 loader\n        use: [\n\n          &#x2F;&#x2F; 配置 babel\n          &#123;\n            &#x2F;&#x2F; 指定要用的加载器\n            loader: &#39;babel-loader&#39;,\n\n            options: &#123;\n              &#x2F;&#x2F; 设置预定义的环境\n              presets: [\n                [\n                  &quot;@babel-preset-env&quot;,\n\n                  &#123;\n                    &#x2F;&#x2F; 需要兼容的目标浏览器, 根据项目需求填写\n                    targets: &#123;\n                      &quot;chrome&quot;: 95\n                    &#125;,\n\n                    &#x2F;&#x2F; 指定的 core 版本\n                    &quot;corejs&quot;: &#39;3&#39;,\n\n                    &#x2F;&#x2F; 使用 corejs 的方式 &quot;usage&quot; 按需加载\n                    &quot;useBuiltIns&quot;: &quot;usage&quot;\n                  &#125;\n                ]\n              ]\n            &#125;\n          &#125;,\n\n          &#x2F;&#x2F; 由于 webpack 中 rules 是从数组从后往前执行的, 所以 ts-loader 放在后面, 让 ts 先编译为 js 在通过 babel 进行兼容性转换\n          &#39;ts-loader&#39;\n        ],\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webpack-创建简单的-ts-开发环境\"><a href=\"#webpack-创建简单的-ts-开发环境\" class=\"headerlink\" title=\"webpack 创建简单的 ts 开发环境\"></a>webpack 创建简单的 ts 开发环境</h1><h2 id=\"前置要求\"><a href=\"#前置要求\" class=\"headerlink\" title=\"前置要求\"></a>前置要求</h2><p>需要的的 <code>npm</code> 插件</p>\n<blockquote>\n<ol>\n<li>webpack ( webpack 本体 )</li>\n<li>webpack-cli ( webpack 的命令行工具 )</li>\n<li>typescript ( typescript 核心代码 )</li>\n<li>ts-loader (typescript 的 webpck 编译模块)</li>\n<li>clean-webpack-plugin ( 打包前清除之前打包的文件夹 )</li>\n</ol>\n</blockquote>\n<h2 id=\"ts-开发环境目录\"><a href=\"#ts-开发环境目录\" class=\"headerlink\" title=\"ts 开发环境目录\"></a>ts 开发环境目录</h2><p><img src=\"https://s2.loli.net/2023/01/03/XS1lVDEMyifWocg.png\" alt=\"Snipaste_2022-03-05_15-32-16.png\"></p>\n<h2 id=\"tsconfig-json-配置\"><a href=\"#tsconfig-json-配置\" class=\"headerlink\" title=\"tsconfig.json 配置\"></a>tsconfig.json 配置</h2><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;compilerOptions&quot;: &#123;\n\n    &quot;module&quot;: &quot;ES6&quot;,             &#x2F;&#x2F; 使用的模块规则\n\n    &quot;target&quot;: &quot;ES6&quot;,             &#x2F;&#x2F; 编译生成 js 的版本\n\n    &quot;noImplicitAny&quot;: true,       &#x2F;&#x2F; 不允许隐式的 any 类型\n\n    &quot;removeComments&quot;: true,      &#x2F;&#x2F; 删除注释\n\n    &quot;preserveConstEnums&quot;: true,  &#x2F;&#x2F; 保留 const 和 enum 声明\n\n    &quot;strict&quot;: true               &#x2F;&#x2F; 使用严格模式\n  &#125;,\n\n  &#x2F;&#x2F; 需要编译的 ts 文件\n  &quot;include&quot;: [\n    &quot;.&#x2F;src&#x2F;**&#x2F;*&quot;\n  ]\n&#125;</code></pre>\n\n<h2 id=\"webpack-config-js-配置\"><a href=\"#webpack-config-js-配置\" class=\"headerlink\" title=\"webpack.config.js 配置\"></a>webpack.config.js 配置</h2><h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const path &#x3D; require(&quot;path&quot;)\nconst &#123; CleanWebpackPlugin &#125; &#x3D; require(&quot;clean-webpack-plugin&quot;)\n\nmodule.exports &#x3D; &#123;\n  &#x2F;&#x2F; 入口文件\n  entry: &quot;.&#x2F;src&#x2F;index.ts&quot;,\n\n  &#x2F;&#x2F; 打包后的出口文件\n  output: &#123;\n    &#x2F;&#x2F; 文件路径\n    path: path.resolve(__dirname, &quot;dist&quot;),\n\n    &#x2F;&#x2F; 文件名\n    filename: &quot;bundle.js&quot;,\n  &#125;,\n  &#x2F;&#x2F; 使用的编译模块\n  module: &#123;\n\n    &#x2F;&#x2F; 指定要加载的规则\n    rules: [\n      &#123;\n        &#x2F;&#x2F; test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n        test: &#x2F;\\.ts$&#x2F;,\n\n        &#x2F;&#x2F; 要使用的 loader\n        use: [&#39;ts-loader&#39;],\n\n        &#x2F;&#x2F; 排除要编译的文件夹\n        exclude: &#x2F;node_modules&#x2F;\n      &#125;\n    ]\n  &#125;,\n\n  &#x2F;&#x2F; 用来设置需要引用的模块文件 (这里包括了 ts 和 js) 不设置的话, 引用其他 ts&#x2F;js 文件会编译报错\n  resolve: &#123;\n    extensions: [&#39;.ts&#39;, &#39;.js&#39;]\n  &#125;,\n\n  &#x2F;&#x2F; 配置 webpack 插件\n  plugins: [\n    new CleanWebpackPlugin()\n  ],\n&#125;</code></pre>\n\n<h3 id=\"使用-html-文件配置\"><a href=\"#使用-html-文件配置\" class=\"headerlink\" title=\"使用 html 文件配置\"></a>使用 html 文件配置</h3><blockquote>\n<p>前端项目中我们编译完的 js 文件最终会用到 html 文件中. 我们手动创建并引入 js 的话也不是不行, 但是很麻烦, 如果以后要增加一些其他的 js 或者 css 都得重新去手动引入. 这时候就可以用 <code>webpack</code> 给我们提供的一个自动引入经过 loader 编译后的文件 html 的插件 <code>html-webpack-plugin</code></p>\n<p><code>**_npm install -D html-webpack-plugin_**</code></p>\n</blockquote>\n<p>在最外层的 <code>plugins</code> 中配置</p>\n<p><a href=\"https://github.com/jantimon/html-webpack-plugin#configuration\">更多 html-webpack-plugin 的配置信息看这里</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 引入插件\nconst HtmlWebpackPlugin &#x3D; require(&quot;html-webpack-plugin&quot;)\n\nmodule.exprots &#x3D; &#123;\n  &#x2F;&#x2F; 配置 webpack 插件\n  plugins: [\n    new HtmlWebpackPlugin(&#123;\n      &#x2F;&#x2F; 配置 html 模板文件的目录\n      template: path.resolve(__dirname, &#39;public&#x2F;index.html&#39;)\n    &#125;)\n  ],\n&#125;</code></pre>\n\n<h3 id=\"使用-webpack-server-实时编译\"><a href=\"#使用-webpack-server-实时编译\" class=\"headerlink\" title=\"使用 webpack-server 实时编译\"></a>使用 webpack-server 实时编译</h3><blockquote>\n<p>弄好 <code>html</code> 自动引入后我们需要打开网页去调试我们的 ts 程序, 按照普通方式来修改一次又要打包一遍, 又要重新刷新一遍网页的话就很麻烦, 这时我们可以用 <code>webpack-server</code> 来进行开发服务器部署</p>\n<p><code>**_npm install -D webpack-server_**</code></p>\n<p>安装完后直接在 <code>package.json</code> 中进行配置运行命令运行就行了</p>\n</blockquote>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">&#123;\n  &quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;webpack server --mode development&quot;\n  &#125;\n&#125;</code></pre>\n\n<h3 id=\"配置-babel-来进行浏览器兼容\"><a href=\"#配置-babel-来进行浏览器兼容\" class=\"headerlink\" title=\"配置 babel 来进行浏览器兼容\"></a>配置 babel 来进行浏览器兼容</h3><p>在日常的开发中我们会经常遇到要兼容低版本浏览器的需要, 这时候为了增加开发效率我们可以用 <code>**_babel_**</code> 来将一些 <code>**_ES6_**</code> 中的高级属性来转换为低版本浏览器中的兼容属性</p>\n<p>需要的开发依赖</p>\n<blockquote>\n<ol>\n<li>@babel/core ( babel 的核心代码 )</li>\n<li>@babel/preset-env ( babel 的兼容库 )</li>\n<li>core-js ( 高级属性的兼容性替代方案 )</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><code>**_npm install -D @babel/core @babel/preset-env core-js_**</code></p>\n</blockquote>\n<p>webpack 配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\nmodule.exports &#x3D; &#123;\n\n  &#x2F;&#x2F; 使用的编译模块\n  module: &#123;\n    &#x2F;&#x2F; 指定要加载的规则\n    rules: [\n      &#123;\n        &#x2F;&#x2F; test 是指定规则生效的文件(既对那些文件进行编译), 使用的是正则\n        test: &#x2F;\\.ts$&#x2F;,\n\n        &#x2F;&#x2F; 要使用的 loader\n        use: [\n\n          &#x2F;&#x2F; 配置 babel\n          &#123;\n            &#x2F;&#x2F; 指定要用的加载器\n            loader: &#39;babel-loader&#39;,\n\n            options: &#123;\n              &#x2F;&#x2F; 设置预定义的环境\n              presets: [\n                [\n                  &quot;@babel-preset-env&quot;,\n\n                  &#123;\n                    &#x2F;&#x2F; 需要兼容的目标浏览器, 根据项目需求填写\n                    targets: &#123;\n                      &quot;chrome&quot;: 95\n                    &#125;,\n\n                    &#x2F;&#x2F; 指定的 core 版本\n                    &quot;corejs&quot;: &#39;3&#39;,\n\n                    &#x2F;&#x2F; 使用 corejs 的方式 &quot;usage&quot; 按需加载\n                    &quot;useBuiltIns&quot;: &quot;usage&quot;\n                  &#125;\n                ]\n              ]\n            &#125;\n          &#125;,\n\n          &#x2F;&#x2F; 由于 webpack 中 rules 是从数组从后往前执行的, 所以 ts-loader 放在后面, 让 ts 先编译为 js 在通过 babel 进行兼容性转换\n          &#39;ts-loader&#39;\n        ],\n      &#125;\n    ]\n  &#125;\n&#125;</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clchnsw0o0001b8xg8l1q82bk","category_id":"clchnsw0t0003b8xgep3w91s0","_id":"clchnsw10000cb8xgc2msb23q"},{"post_id":"clchnsw0r0002b8xgb0xq5c6k","category_id":"clchnsw0t0003b8xgep3w91s0","_id":"clchnsw11000fb8xg76e4311j"},{"post_id":"clchnsw0v0005b8xg7ubg3z2k","category_id":"clchnsw0t0003b8xgep3w91s0","_id":"clchnsw12000ib8xgg3sl8ziv"},{"post_id":"clchnsw0w0006b8xggmgn6jms","category_id":"clchnsw11000eb8xg3e2l29ku","_id":"clchnsw13000ob8xgdenb3d8s"},{"post_id":"clchnsw0x0007b8xg6oy23o79","category_id":"clchnsw11000eb8xg3e2l29ku","_id":"clchnsw13000qb8xg9bj4ev1z"},{"post_id":"clchnsw0z000ab8xgcdr14pdk","category_id":"clchnsw11000eb8xg3e2l29ku","_id":"clchnsw14000tb8xg9i8lgv9t"}],"PostTag":[{"post_id":"clchnsw0o0001b8xg8l1q82bk","tag_id":"clchnsw0u0004b8xgc8zw8p9p","_id":"clchnsw12000hb8xg7gyd6okz"},{"post_id":"clchnsw0o0001b8xg8l1q82bk","tag_id":"clchnsw0y0009b8xg1bxw25p8","_id":"clchnsw12000kb8xgh18t4kxt"},{"post_id":"clchnsw0o0001b8xg8l1q82bk","tag_id":"clchnsw11000db8xghcjxd4tw","_id":"clchnsw12000mb8xg9qgz8bzh"},{"post_id":"clchnsw0r0002b8xgb0xq5c6k","tag_id":"clchnsw0u0004b8xgc8zw8p9p","_id":"clchnsw14000sb8xgds4mdy90"},{"post_id":"clchnsw0r0002b8xgb0xq5c6k","tag_id":"clchnsw12000lb8xgd57hf9n2","_id":"clchnsw14000ub8xgakdef2c5"},{"post_id":"clchnsw0r0002b8xgb0xq5c6k","tag_id":"clchnsw13000pb8xg5f788j7a","_id":"clchnsw14000wb8xgagy7huj9"},{"post_id":"clchnsw0v0005b8xg7ubg3z2k","tag_id":"clchnsw0u0004b8xgc8zw8p9p","_id":"clchnsw15000zb8xgd0saa4qo"},{"post_id":"clchnsw0v0005b8xg7ubg3z2k","tag_id":"clchnsw0y0009b8xg1bxw25p8","_id":"clchnsw150010b8xgdvfygvw4"},{"post_id":"clchnsw0v0005b8xg7ubg3z2k","tag_id":"clchnsw11000db8xghcjxd4tw","_id":"clchnsw150012b8xgdxni5xyd"},{"post_id":"clchnsw0w0006b8xggmgn6jms","tag_id":"clchnsw15000yb8xghbn1htzg","_id":"clchnsw160014b8xgcb496tv4"},{"post_id":"clchnsw0w0006b8xggmgn6jms","tag_id":"clchnsw150011b8xg5iew5rqd","_id":"clchnsw160015b8xgfeft6z3p"},{"post_id":"clchnsw0x0007b8xg6oy23o79","tag_id":"clchnsw15000yb8xghbn1htzg","_id":"clchnsw160018b8xg1kqtc27v"},{"post_id":"clchnsw0x0007b8xg6oy23o79","tag_id":"clchnsw160016b8xg8cuefnts","_id":"clchnsw170019b8xgfgiehju4"},{"post_id":"clchnsw0z000ab8xgcdr14pdk","tag_id":"clchnsw15000yb8xghbn1htzg","_id":"clchnsw17001cb8xg6dq97bf8"},{"post_id":"clchnsw0z000ab8xgcdr14pdk","tag_id":"clchnsw17001ab8xgf2t24pcj","_id":"clchnsw18001db8xgek2t4ffi"},{"post_id":"clchnsw0z000ab8xgcdr14pdk","tag_id":"clchnsw17001bb8xg18n3gvna","_id":"clchnsw18001eb8xghz5jfycg"}],"Tag":[{"name":"Docker","_id":"clchnsw0u0004b8xgc8zw8p9p"},{"name":"容器","_id":"clchnsw0y0009b8xg1bxw25p8"},{"name":"container","_id":"clchnsw11000db8xghcjxd4tw"},{"name":"镜像","_id":"clchnsw12000lb8xgd57hf9n2"},{"name":"images","_id":"clchnsw13000pb8xg5f788j7a"},{"name":"TypeScript","_id":"clchnsw15000yb8xghbn1htzg"},{"name":"数据类型","_id":"clchnsw150011b8xg5iew5rqd"},{"name":"tsconfig","_id":"clchnsw160016b8xg8cuefnts"},{"name":"环境搭建","_id":"clchnsw17001ab8xgf2t24pcj"},{"name":"webpack","_id":"clchnsw17001bb8xg18n3gvna"}]}}