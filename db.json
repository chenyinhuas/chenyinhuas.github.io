{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","path":"icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","path":"icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","path":"static/css/404.1a6cd5bd.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","path":"static/css/about.32dfa3b0.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","path":"static/css/app.0d31776f.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","path":"static/css/archives.c0d49bd5.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","path":"static/css/categories.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","path":"static/css/chunk-libs.eebac533.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","path":"static/css/page.749ad047.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","path":"static/css/post.9f951a60.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","path":"static/css/result.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","path":"static/css/tags.10e2be12.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","path":"static/img/default-cover.df7c128c.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","path":"static/js/404.00d640a8.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","path":"static/js/about.024aacd1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","path":"static/js/app.6d2c358d.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","path":"static/js/archives.574ac664.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","path":"static/js/categories.90aa5475.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","path":"static/js/chunk-libs.dc6146cd.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","path":"static/js/page.a02618ad.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","path":"static/js/post.cebfbaa4.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","path":"static/js/result.39470350.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","path":"static/js/tags.2ad613f5.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/MySQL/Untitled.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672837822598},{"_id":"source/about/index.md","hash":"b2ea07876b524191ee963194c9da39f89dc270f6","modified":1672836460222},{"_id":"source/_posts/MySQL/MYSQL语句：.md","hash":"c7c7e82db26a56446ece64367ac301a113dfe15c","modified":1672838374262},{"_id":"node_modules/hexo-theme-Aurora/.browserslistrc","hash":"db215b841182d2af3259a1c1d6e1957bca333970","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG.md","hash":"e68f3af8af17d326a48e1b317e01d7429193217e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/LICENSE","hash":"21cf269018b0cf04e1126b6b9b1a5e6af7c5e61f","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/CHANGELOG_CN.md","hash":"5d13c251e8b77fd86870da50f3be98f8822edc66","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/README.md","hash":"c50f58b08b75780990c18ab85761e3e24aac0d90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/_config.yml","hash":"e6b2335cb393444b8a1fc1ad65331f4a30bc8915","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/package.json","hash":"1b312a6a2de107ba9dc952614f1078c78664a4e4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/.circleci/config.yml","hash":"534051be311581f69aa8287120275a04539290e4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/jest.config.js","hash":"425f08cb718a56630ce61ae0686f35c55ef565df","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/data/en.yml","hash":"7bbd6c0da0ae2f93f8a786a3be77fbe4e95a787e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/data/cn.yml","hash":"4f5dcc1e2953df7a8e4e683c1a9115f6e0041f5e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/index.js","hash":"2a3c62a860581ee6813ca4bcaa7c952f614e818c","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/layout/index.ejs","hash":"94732830a65b718d2fa506b8598df44f14399fd8","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/filters/index.js","hash":"5eacff9446dd6c9a7eb0a0c84be9187055440454","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/category.js","hash":"0ae21ffcf6e471ebfb72ac62a833991fae86ec8a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/index.js","hash":"dfbb0fdbf990bd67684ed891a4aaa1fd8dcd23f2","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/search.js","hash":"a2a636e1df76efdcaca37226b490afa539ce766b","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/statistic.js","hash":"1c641956e15cec96490de16a88ccc7bec0c9d5c4","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/post.js","hash":"76c3268e8b6887fb1fd11c4d71004aad9dc215fc","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/page.js","hash":"1be54ea9cdf8e293e67bf457075fcdd8a72b8779","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/site.js","hash":"b5f5ce813b4b0b322eceb11b036dc65201604256","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/symbols-count-time.js","hash":"d1a81e31b2988edcdf4b4761cec7326a980f097a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/truncate-html.js","hash":"49d4832af027eabe5b8383a24e66dceae761533e","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/generators/tag.js","hash":"975e79e73d2503a33dbc63655b948100cc46d44f","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/mapper.js","hash":"7a99508d910321b90b4afa0df02ad90f62336901","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/utils.js","hash":"93ff75f0e35a1dc40d5406cc097f5988dd820600","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/injector/index.js","hash":"7ca562ea3af3068ee925b5a8afdce0eaa1e15e64","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/scripts/lib/helpers/toc.js","hash":"5c7348c550ef7f164d492847801a360cdefc60a2","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1672836583392},{"_id":"node_modules/hexo-theme-Aurora/source/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1672836583392},{"_id":"public/api/posts/1.json","hash":"22d7688b96a62bbe3668003ff58f11d35f8e458a","modified":1672838935032},{"_id":"public/api/articles/MySQL/Untitled.json","hash":"fac61da254481620abc496b26e6923bc0ffa9298","modified":1672837893335},{"_id":"public/api/articles/MySQL/MYSQL语句：.json","hash":"0ef85fc9273bdc9e8ccae5c1089d1e05d6fe61fd","modified":1672838935032},{"_id":"public/api/features.json","hash":"6eb5e132111459c7acf6c041d7d64e04ccf0b2c2","modified":1672838935032},{"_id":"public/api/authors/blog-author.json","hash":"30f802492d63bca213638825e67df593dc9825b1","modified":1672838935032},{"_id":"public/api/site.json","hash":"ebd1f1fa3aa044244137bde5016510d1132fc598","modified":1672838935032},{"_id":"public/api/categories.json","hash":"4f192138ef66f1abf5a2f322c9afa2416d867242","modified":1672838935032},{"_id":"public/api/tags.json","hash":"390831fa6699e2c4fd09cc3f00c00c99187b5b12","modified":1672838935032},{"_id":"public/api/pages/about/index.json","hash":"bd924ae90ebc7aeaea1ee0b49937919ae8a2c356","modified":1672838935032},{"_id":"public/api/statistic.json","hash":"2b9c3e615fcbbe43c9f36d094112220ffc9b3282","modified":1672838935032},{"_id":"public/api/search.json","hash":"e68d88b4cd17585e665d963206cbc44639346304","modified":1672838935032},{"_id":"public/post/MySQL/Untitled.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672837893335},{"_id":"public/post/MySQL/MYSQL语句：.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/index.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/tags/index.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/archives/index.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/page/about/index.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/tags/search/index.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/favicon.ico","hash":"c39d3ad80489cffed0d3df82c8cb05a049ab39a3","modified":1672838935032},{"_id":"public/icons/favicon-32x32.png","hash":"9dbabf6f4d825da99dcb2e91583755ae8d3b3ff4","modified":1672838935032},{"_id":"public/static/img/default-cover.df7c128c.jpg","hash":"1934ace0c6f2397d15729f9b08cc4d42e45bf437","modified":1672838935032},{"_id":"public/icons/favicon-16x16.png","hash":"849cad2a5ae49fa54c20372f7a21ae95192bafcf","modified":1672838935032},{"_id":"public/static/css/about.32dfa3b0.css","hash":"614ef7c4e52877c76ffddb26192bf8fffddcb8d8","modified":1672838935032},{"_id":"public/static/css/404.1a6cd5bd.css","hash":"a7a4d83756520d8f6c410ac0ffe9a45d63868113","modified":1672838935032},{"_id":"public/static/css/archives.c0d49bd5.css","hash":"c56213315c57254d0a6e6301ef24c2186fef4d2b","modified":1672838935032},{"_id":"public/static/css/categories.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672838935032},{"_id":"public/static/css/chunk-libs.eebac533.css","hash":"41226b6c29aadcc6190fe7c2c4c37464855b8453","modified":1672838935032},{"_id":"public/static/css/page.749ad047.css","hash":"6fcf0e6f3c628954c5f8105791e0e7f3e6512da6","modified":1672838935032},{"_id":"public/static/css/post.9f951a60.css","hash":"8e360582d745d6483fdfc18c46f75897b44721a6","modified":1672838935032},{"_id":"public/static/css/result.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672838935032},{"_id":"public/static/css/tags.10e2be12.css","hash":"e0f686c442936311dd85f11a06f3937007758b90","modified":1672838935032},{"_id":"public/static/js/404.00d640a8.js","hash":"74f1da9e0f953e73e4fe1a6554433f56fdcdf54d","modified":1672838935032},{"_id":"public/static/js/about.024aacd1.js","hash":"7ce2b3f7d232dd3b3930ac993bb841452e2cde89","modified":1672838935032},{"_id":"public/static/js/categories.90aa5475.js","hash":"0dde3d731fc665962a4c330338a2c663c330be26","modified":1672838935032},{"_id":"public/static/js/archives.574ac664.js","hash":"fbb094fb4f7a01bffd6975aca27142935bfdca73","modified":1672838935032},{"_id":"public/static/js/page.a02618ad.js","hash":"db775fbfbaa1cf8bbf4cc4f2b0a869519d508e3a","modified":1672838935032},{"_id":"public/static/js/post.cebfbaa4.js","hash":"53586f9dab5886a366e9397eb17088e74af5cde1","modified":1672838935032},{"_id":"public/static/js/result.39470350.js","hash":"f6f5ab2ca7274dad169ec600a419d1a2aeb2347c","modified":1672838935032},{"_id":"public/static/js/tags.2ad613f5.js","hash":"4f49139e435788710115fc884dc26a5b1e0d4833","modified":1672838935032},{"_id":"public/static/css/app.0d31776f.css","hash":"43b43acd76bd8dc22f34cc49c7e026c45c3a5004","modified":1672838935032},{"_id":"public/static/js/app.6d2c358d.js","hash":"e176c20c22ce36e38935f463977e9b89b281c715","modified":1672838935032},{"_id":"public/static/js/chunk-libs.dc6146cd.js","hash":"534266637d09abf39278f4d3a21bd36728740105","modified":1672838935032},{"_id":"source/_posts/docker/Docker 容器连接.md","hash":"e0df5090709c17423e02f16289001d55a625d064","modified":1672836460220},{"_id":"source/_posts/docker/Docker 容器的使用.md","hash":"31e8f72b69f8421e75ae0bae207433d68fb2426a","modified":1672836460220},{"_id":"source/_posts/docker/Docker 镜像的使用.md","hash":"4ce77fa74aaab20d6748cfe98652414d856434a9","modified":1672836460221},{"_id":"public/api/articles/docker/Docker 镜像的使用.json","hash":"01676e56cedcb428d9cea21123d09e39ade836bd","modified":1672838935032},{"_id":"public/api/articles/docker/Docker 容器连接.json","hash":"d30e77e7f93b1c2c2c9e852b2da41149f881d845","modified":1672838935032},{"_id":"public/api/articles/docker/Docker 容器的使用.json","hash":"57c2c8560e16b154592b6a2cd5e75dfcd68dd943","modified":1672838935032},{"_id":"public/api/categories/Docker.json","hash":"8b50cfc2b1ac177dea01cc2c42bd15adf38454b9","modified":1672838935032},{"_id":"public/api/categories/MYSQL.json","hash":"2ae28d935906d8a7b79f22b3a020b41dd9ab3bea","modified":1672838935032},{"_id":"public/api/tags/Docker.json","hash":"8b50cfc2b1ac177dea01cc2c42bd15adf38454b9","modified":1672838935032},{"_id":"public/api/tags/容器.json","hash":"6b8a0ca4f073a70c82976ef472bc4cfe1ed7efad","modified":1672838935032},{"_id":"public/api/tags/container.json","hash":"4d91e9ce558c624bde8272900625fed658f8792e","modified":1672838935032},{"_id":"public/api/tags/镜像.json","hash":"57ec6c76829585d7e94fe7167d145a7acff4c67b","modified":1672838935032},{"_id":"public/api/tags/images.json","hash":"639b61b6c008c9a4de12d284a29e2fc4c8fa38ae","modified":1672838935032},{"_id":"public/api/tags/mysql.json","hash":"10754ef4a61c55f99863c3d3ed2a4e7ade4deb80","modified":1672838935032},{"_id":"public/api/tags/语句.json","hash":"bef72598a87117d7b21e486c8d312a974657db0d","modified":1672838935032},{"_id":"public/post/docker/Docker 镜像的使用.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/post/docker/Docker 容器连接.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032},{"_id":"public/post/docker/Docker 容器的使用.html","hash":"913373b46f85a6da957d57c78e427e82580bbe91","modified":1672838935032}],"Category":[{"name":"Docker","_id":"clchoo7ao0002mwxgc7kkcanm"},{"name":"MYSQL","_id":"clchoqzax000pmwxg1l5f2lry"}],"Data":[],"Page":[{"_content":"### 哈哈哈","source":"about/index.md","raw":"### 哈哈哈","date":"2023-01-04T12:47:40.222Z","updated":"2023-01-04T12:47:40.222Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clchohnsg00008sxg0le587p8","content":"<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h3>"}],"Post":[{"title":"MYSQL语句","cover":"https://files.catbox.moe/l8sn6i.png","_content":"\nMYSQL知识点学习\n\n学习网站：\n\nhttps://dev.mysql.com/doc/refman/8.0/en/\n\n![image-20220311093059904](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093059904.png)\n\n![image-20220311093514689](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093514689.png)\n\n![image-20220311093719662](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093719662.png)\n\n![image-20220311093834662](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093834662.png)\n\n表，记录，字段\n\nE-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。\n\n一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).\n\n关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：\n\n1. 键值型数据库: Redis.\n2. 文档型数据库: MongoDB\n3. 搜索引Y数据库: ES, Solr\n4. 列式数据库: HBase\n5. 图形数据库: InfoGrid\n\nORM 思想：对象关系的映射（object Relational Mapping）\n\n数据库中的一个表<--->java或python中的一个类\n\n表中的一条数据<--->类中的一个对象（或实体）\n\n表中的一个列<--->类中的一个字段、属性（fieid）\n\n表的关联关系\n\n四种：\n\n一对一的关联，\n\n一对多的关联（主表（从表）），\n\n多对多的关联（主表（（联接表）从表）），\n\n自我引用。\n\n\n\n# SQL语言的分类\n\nDDL：数据定义语言。\n\nCREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)\n\nDML：数据操作语言。\n\nINSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)\n\nDCL：操作控制语言。\n\nCOMMIT(提交修改永久性（事物相关）) \n\nROLLBACK(回滚/撤回（事物相关）) \n\nSAVEPOINT(设置保存点) \n\nGRANT(赋予权限) \\ REVOKE(取消权限)\n\n命令结束符合: (; \\G\\g)\n\nSQL 大小写规范：\n\n1. MYSQL在Windows环境下是大小写不敏感的\n2. MYSQL在Linux环境下是大小写敏感的\n3. 数据库名、表名、表的别名、变量名是严格区分大小写的。\n4. 关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。\n5. 推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。\n6. SQL关键字、函数名、绑定变量等都大写\n\n可以使用如下格式的注释结构单行注释:\n\n1. #注释文字(MySQL特有的方式)\n2. 单行注释: I-注释文字(--后面必须包含一个空格。)\n3. 多行注释: /*注释文字 */\n\n导入现有的数据表、表数据：\n\n1. source  文件的全路径名\n2. 基于具体的图形化界面的工具可以导入数据\n\n## msyql命令：\n\n### 登录命令\n\n```\nmysql -u root -P 端口号 -h localhost -p // 登录指定服务器\n```\n\n### 查看版本\n\n```\nmsyql -V\nmysql --version\nselect version(); // 登录后查看当前版本信息\n```\n\n开启-服务器\n\n```\nnet start mysql80\n```\n\n停止-服务器\n\n```\nnet stop mysql80\n```\n\n查看数据库信息-DB：database,看做是数据库文件  \n\n```\nshow databases;\n```\n\n创建数据库\n\n```\ncreate database 库名;\n```\n\n选中数据库\n\n```\nuse 库名;\n```\n\n选中数据库查看表\n\n```\nshow tables;          \n```\n\n创建表\n\n```\n create table emplogees(需创建的参数);\n```\n\n添加数据\n\n```\ninsert into 表名 values(1001,'Tom');\n```\n\n查看表数据\n\n```\nselect * from employee;\n```\n\n添加数据库：（1.基于具体的图形化界面的工具可以导入数据）\n\n```\nsource 文件的全路径名称\n```\n\n删除库\n\n```\ndrop database 库名; \n```\n\n\n\n## SQL语句，简单SELECT搜索语句：\n\n查询多列\n\n```\nSELECT 列名 from 表名；\n```\n\n查询所有列\n\n```\nSELECT 列名 from 表名；\n\nSELECT * from 表名；\n```\n\n查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。\n\n关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）\n\n分组去重：group by（进行分组查询)\n\n```\nSELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；\n```\n\n查询结果限制返回行数：\n\n```\nSELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  // 跳过0条，从第一条数据开始取，取两条数据 \n```\n\n也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量\n\n将查询后的列重新命名：\n\n```\nSELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对\"\"引起来，不要使用''。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;\n```\n\n空值参与运算，空值参与运算：结果一定也为空。\n\n空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换\n\n```\nSELECT employee_id, \"月工资\"，salary * (1 + IFNULL(commission_pct,0)) * 12 ''\"年工资\"，commission_pct  FROM employees；\n```\n\n<=>:安全等于。可以查询到数据为null的。\n\n函数查询为null：ISNULL(表名)\n\n伪表(DUAL)：\n\n```\nSELECT 数值 FROM DUAL;\n```\n\n着重号``(在表名或库名与关键字重名时必须加上)\n\n常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条\n\n```\nselect employee_id,last_name,'常量',123（常量） FROM employees;\n```\n\n显示表结构\n\n```\nDESCRIBE 表名;\n\nDESC 表名;\n```\n\n最小 LEAST(值) \\ 最大 GREATEST(值)\n\nin （set值），not in （set值，set）\n\n查询介于之间语句：BETWEEN\n\n```\n例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值\n```\n\n查询除某个数据信息：\n\n```\n!=，not in(值) （判断取值不是这个的值）\n```\n\n用WHERE过滤空值\n\n判断取值为空的语句格式为：\n\n```\n列名 ``IS` `NULL\n```\n\n判断取值不为空的语句格式为：\n\n```\n列名 ``IS` `NOT` `NULL\n```\n\n高级操作符：OR（或）\n\n模糊查询语句：like  '匹配内容'\n\n考点 like 相似\n\n```\nlike '%北京%'列名包括北京的字样\nlike '北京%' 列名北京开头\nlike '%北京' 列名北京结尾\n\n```\n\n## 正则表达式：\n\n1. _ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）\n2. % ：百分号 代表匹配0个或多个字符；\n3. []: 中括号 代表匹配其中的任意一个字符；\n4. [^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。\n\n转义字符：\\ ，在需要转义的符合前输入 \\。\n\n转义关键字：ESCAPE，把需要转义的字符，输入在后方。   \n\n## REGEXP运算符\n\n1. '^'匹配以该字符后面的字符开头的字符串。\n2.  '$'匹配以该字符前面的字符结尾的字符串。\n3. '.'匹配任何一个单字符。\n4.  “[...]\"匹配在方括号内的任何字符。例如, \"[abc]\"匹配\"a\"或\"b\"或\"c\"。为了命名字符的范围,使用一个'-'。\"[a-z]\"匹配任何字母,而“[0-9]\"匹配任何数字。\n5. ' * '匹配零个或多个在它前面的字符。例如, “ x* \"匹配任何数量的'x'字符, \" [0-9]* \"匹配任何数量的数字,而\"*\"匹配任何数量的任何字符。\n\n## 位运算符\n\n（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）\n\n&（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） >>（按位右移位） <<（按位左移位）\n\n\n\n## 排序与分页\n\n排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。\n\n升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）\n\n```\nORDER BY 列名 ASC;  # ascend\n```\n\n降序语法格式：\n\n```\nORDER BY  列名  DESC; # descend\n```\n\n**注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。**\n\n**强调格式：WHERE需要声明在FROM后，ORDER BY之前。**\n\n二级排序，语法格式：以此类推\n\n```\nORDER BY 列名 DESC,列名 ASC;\n```\n\n分页：mysql使用limit实习数据的分页显示\n\n分页语法格式：（必须放置语句最后）\n\n```\nLIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;\n```\n\nMYSQL8.0新特性：LIMIT...OFFSET...语法格式：\n\n```\nSELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;\n```\n\n字节函数：\n\n```\nLENGTH(列名);\n```\n\n函数时间戳转换为日期类型进行显示：\n\n```\nFROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））\n```\n\n（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：\n\n```\nSELECT FROM_UNIXTIME(参数) FROM 表名;\n```\n\n```\n返回格式如下： 2020-03-23 15:28:46\n```\n\n  （2）含有format参数：\n\n```\nSELECT FROM_UNIXTIME(参数,'%Y-%m-%d'（选择要转化的格式）) FROM 表名;\n```\n\n```\n返回格式如下：2020-03-23\n```\n\nformat（可选参数）：\n\n```\n%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0=Sunday ……6=Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。\n```\n\n函数IFNULL使用说明：\n\nMySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；\n\nIFNULL函数语法：\n\n```\nIFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。\n```\n\n\n\n## 多表查询：\n\n笛卡尔积(或交叉连接)的理解。\n\n笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 \n\nSQL99：`CROSS  JOIN` 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。\n\n多表查询需要有连接条件：\n\n```\nSELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 = 表名.列名 # 同等的条件\n```\n\n如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。\n\n```\nSELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 = 表名.列名 # 同等的条件\n```\n\n多表查询，建议：\n\n1. 从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。\n2. 可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）\n\n结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）\n\n### 多表查询的分类：\n\n角度1：等值连接 vs 非等值连接\n\n角度2：自连接 vs 非自连接\n\n角度3：内连接 vs 外连接\n\n内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。\n\n外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，\n\n​               还查询到了左表 或 右表中不匹配的行。\n\n外连接的分类：左外连接、右外连接、满外连接。\n\n左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,\n\n​                  这种连接称为左外连接。\n\n右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,\n\n​                  这种连接称为右外连接。\n\nSQL92语法实现内连接：\n\n```\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 = 表名.列名; # 同等的条件\n```\n\nSQL92语法实现外连接：使用 + ------- MYSQL不支持SQL92语法中外连接的写法！\n\n（Oracle支持SQL92语法实现外连接）\n\n```\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 = 表名.列名(+); # 同等的条件\n```\n\nSQL99语法中使用JOIN ...ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。\n\nSQL99语法实现内连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.表名 \nJOIN 表名 别名\nON 别名.列名 = 别名.表名\n\n```\n\nSQL99语法实现外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\nSQL99语法实现左连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\nSQL99语法实现右连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\n满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\n![image-20220314153310242](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220314153310242.png)\n\nUNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。\n\n​                         （去重时导致，效率过低）\n\n```\n\n```\n\nUNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，\n\n​                                  不去重。\n\n```\n\n```\n\n注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。\n\n7种JOIN的实现：\n\n中图，内连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n左上图，左外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n右上图，右外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n左中图：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n```\n\n右中图：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n```\n\n左下图：满外连接\n\n方式1：左上图 UNION ALL 右中图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n```\n\n方式2：左中图 UNION ALL 右上图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\n```\n\n右下图：左中图 UNION ALL 右中图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n```\n\nSQL99语法的新特性1：自然连接\n\nNATURAL JOIN：它会帮你自动查询两张连接表中`所有相同的字段`，然后进行`等值连接`。\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;\n```\n\nSQL99语法的新特性2：自然连接\n\nUSING：适用于多表查询，有相同列名的查询（不适用与自连接）\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);\n```\n\n拓展：可以先JOIN连接但不建议（具体看需求）\n\n```\nSELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 = 别名.列名\nAND 别名.列名 = 别名.列名；\n```\n\n\n\n## 函数的理解：\n\n从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。\n\nMySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)\n\n两种SQL函数：（单行函数，多行函数）\n\n单行函数：\n\n1. 操作数据对象，接受参数返回一个结果。\n2. 只对一行进行变换，每行返回一个结果。\n3. 可以嵌套，参数可以是一列或一个值。\n\n1.数值函数\n\n1.1基本的操作：\n\n```\n# 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n\n```\n\n1.2取随机数：（也称伪随机数，指定因子返回数则固定）\n\n```;\n# 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);\n```\n\n1.3四舍五入，截断操作：\n\n```\n# 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;\n```\n\n1.4角度与弧度的互换\n\n```\n# 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));\n```\n\n1.5三角函数\n\n```\n# 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);\n```\n\n1.6指数和对数\n\n```\n# 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X<=0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X<=0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X<=0时,返回NULL\nLOG2(x);\n```\n\n1.7进制间的转换\n\n```\n# 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);\n```\n\n2.字符串函数\n\n###### # ASCII() 返回字符串S中的第一个字符的ASCII码值\n\n```\n  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);\n```\n\n###### # 连接s1,s2,......,sn为一个字符串（可以申明多个字符串进行拼接）\n\n```\n例子：SELECT CONCAT(别名.列名, ' 固定连接字符串 ', 别名.列名) \"列名展示\" \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 = 别名.列名;\n```\n\n###### # 同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x\n\n```\nCONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);\n```\n\n###### # 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\n\n```\nINSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))\n```\n\n###### # 用字符串b替换字符串str中所有出现的字符串a\n\n```\nREPLACE(str, a(需要要替换的字符串), b(替换上的字符串))\n```\n\n###### # 将字符串s的所有字母转成大写字母\n\n```\nUPPER(s) 或 UCASE(s)\n```\n\n###### # 将字符串s的所有字母转成小写字母\n\n```\nLOWER(s) 或LCASE(s)\n```\n\n###### # 返回字符串str最左边的n个字符\n\n```\nLEFT(str,n(从最左边，根据数值取出字符))\n```\n\n###### # 返回字符串str最右边的n个字符\n\n```\nRIGHT(str,n(从最右边，根据数值取出字符))\n```\n\n###### # 用字符串pad对str最左边进行填充，直到str的长度为len个字符\n\n```\nLPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))\n```\n\n###### # 用字符串pad对str最右边进行填充，直到str的长度为len个字符\n\n```\nRPAD: 实现左对齐效果\nRPAD(str ,len, pad)\n```\n\n###### # 去掉字符串s开始与结尾的空格\n\n```\nTRIM(s)\n```\n\n###### # 去掉字符串s左侧的空格\n\n```\nLTRIM(s)\n```\n\n###### # 去掉字符串s右侧的空格\n\n```\nRTRIM(s)\n```\n\n###### # 去掉字符串s开始与结尾的s1\n\n```\nTRIM(s1 FROM s)\n例子：TRIM('字符串'(首尾出现进行去除) FROM '字符串'(首尾出现相同的字符串则进行去除));\n```\n\n###### # 去掉字符串s开始处的s1\n\n```\nTRIM(LEADING s1FROM s)\n```\n\n###### # 去掉字符串s结尾处的s1\n\n```\nTRIM(TRAILING s1FROM s)\n```\n\n###### # 返回str重复n次的结果\n\n```\nREPEAT(str, n(数值，重复的次数))\n```\n\n###### # 返回n个空格\n\n```\nSPACE(n)\n```\n\n###### # 比较字符串s1,s2的ASCII码值的大小\n\n```\nSTRCMP(s1,s2)\n```\n\n###### # 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同\n\n```\nSUBSTR(s,index(),len(取的长度))\n```\n\n###### # 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。\n\n######    未找到，返回0\n\n```\nLOCATE(substr,str)\n```\n\n###### # 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\\n\n```\nELT(m,s1,s2,…,sn)\n```\n\n###### # 返回字符串s在字符串列表中第一次出现的位置\n\n```\nFIELD(s,s1,s2,…,sn)\n```\n\n###### # 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\n\n```\nFIND_IN_SET(s1,s2)\n```\n\n###### # 返回s反转后的字符串\n\n```\nREVERSE(s)\n```\n\n###### # 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\n\n```\nNULLIF(value1,value2)\n```\n\n注意：MySQL中，字符串的位置是从1开始的。\n\n\n\n","source":"_posts/MySQL/MYSQL语句：.md","raw":"---\ntitle: MYSQL语句\ncover: https://files.catbox.moe/l8sn6i.png\ncategories:\n  - MYSQL\n\ntags:\n  - mysql\n  - 语句\n---\n\nMYSQL知识点学习\n\n学习网站：\n\nhttps://dev.mysql.com/doc/refman/8.0/en/\n\n![image-20220311093059904](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093059904.png)\n\n![image-20220311093514689](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093514689.png)\n\n![image-20220311093719662](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093719662.png)\n\n![image-20220311093834662](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093834662.png)\n\n表，记录，字段\n\nE-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。\n\n一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).\n\n关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：\n\n1. 键值型数据库: Redis.\n2. 文档型数据库: MongoDB\n3. 搜索引Y数据库: ES, Solr\n4. 列式数据库: HBase\n5. 图形数据库: InfoGrid\n\nORM 思想：对象关系的映射（object Relational Mapping）\n\n数据库中的一个表<--->java或python中的一个类\n\n表中的一条数据<--->类中的一个对象（或实体）\n\n表中的一个列<--->类中的一个字段、属性（fieid）\n\n表的关联关系\n\n四种：\n\n一对一的关联，\n\n一对多的关联（主表（从表）），\n\n多对多的关联（主表（（联接表）从表）），\n\n自我引用。\n\n\n\n# SQL语言的分类\n\nDDL：数据定义语言。\n\nCREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)\n\nDML：数据操作语言。\n\nINSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)\n\nDCL：操作控制语言。\n\nCOMMIT(提交修改永久性（事物相关）) \n\nROLLBACK(回滚/撤回（事物相关）) \n\nSAVEPOINT(设置保存点) \n\nGRANT(赋予权限) \\ REVOKE(取消权限)\n\n命令结束符合: (; \\G\\g)\n\nSQL 大小写规范：\n\n1. MYSQL在Windows环境下是大小写不敏感的\n2. MYSQL在Linux环境下是大小写敏感的\n3. 数据库名、表名、表的别名、变量名是严格区分大小写的。\n4. 关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。\n5. 推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。\n6. SQL关键字、函数名、绑定变量等都大写\n\n可以使用如下格式的注释结构单行注释:\n\n1. #注释文字(MySQL特有的方式)\n2. 单行注释: I-注释文字(--后面必须包含一个空格。)\n3. 多行注释: /*注释文字 */\n\n导入现有的数据表、表数据：\n\n1. source  文件的全路径名\n2. 基于具体的图形化界面的工具可以导入数据\n\n## msyql命令：\n\n### 登录命令\n\n```\nmysql -u root -P 端口号 -h localhost -p // 登录指定服务器\n```\n\n### 查看版本\n\n```\nmsyql -V\nmysql --version\nselect version(); // 登录后查看当前版本信息\n```\n\n开启-服务器\n\n```\nnet start mysql80\n```\n\n停止-服务器\n\n```\nnet stop mysql80\n```\n\n查看数据库信息-DB：database,看做是数据库文件  \n\n```\nshow databases;\n```\n\n创建数据库\n\n```\ncreate database 库名;\n```\n\n选中数据库\n\n```\nuse 库名;\n```\n\n选中数据库查看表\n\n```\nshow tables;          \n```\n\n创建表\n\n```\n create table emplogees(需创建的参数);\n```\n\n添加数据\n\n```\ninsert into 表名 values(1001,'Tom');\n```\n\n查看表数据\n\n```\nselect * from employee;\n```\n\n添加数据库：（1.基于具体的图形化界面的工具可以导入数据）\n\n```\nsource 文件的全路径名称\n```\n\n删除库\n\n```\ndrop database 库名; \n```\n\n\n\n## SQL语句，简单SELECT搜索语句：\n\n查询多列\n\n```\nSELECT 列名 from 表名；\n```\n\n查询所有列\n\n```\nSELECT 列名 from 表名；\n\nSELECT * from 表名；\n```\n\n查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。\n\n关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）\n\n分组去重：group by（进行分组查询)\n\n```\nSELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；\n```\n\n查询结果限制返回行数：\n\n```\nSELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  // 跳过0条，从第一条数据开始取，取两条数据 \n```\n\n也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量\n\n将查询后的列重新命名：\n\n```\nSELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对\"\"引起来，不要使用''。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;\n```\n\n空值参与运算，空值参与运算：结果一定也为空。\n\n空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换\n\n```\nSELECT employee_id, \"月工资\"，salary * (1 + IFNULL(commission_pct,0)) * 12 ''\"年工资\"，commission_pct  FROM employees；\n```\n\n<=>:安全等于。可以查询到数据为null的。\n\n函数查询为null：ISNULL(表名)\n\n伪表(DUAL)：\n\n```\nSELECT 数值 FROM DUAL;\n```\n\n着重号``(在表名或库名与关键字重名时必须加上)\n\n常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条\n\n```\nselect employee_id,last_name,'常量',123（常量） FROM employees;\n```\n\n显示表结构\n\n```\nDESCRIBE 表名;\n\nDESC 表名;\n```\n\n最小 LEAST(值) \\ 最大 GREATEST(值)\n\nin （set值），not in （set值，set）\n\n查询介于之间语句：BETWEEN\n\n```\n例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值\n```\n\n查询除某个数据信息：\n\n```\n!=，not in(值) （判断取值不是这个的值）\n```\n\n用WHERE过滤空值\n\n判断取值为空的语句格式为：\n\n```\n列名 ``IS` `NULL\n```\n\n判断取值不为空的语句格式为：\n\n```\n列名 ``IS` `NOT` `NULL\n```\n\n高级操作符：OR（或）\n\n模糊查询语句：like  '匹配内容'\n\n考点 like 相似\n\n```\nlike '%北京%'列名包括北京的字样\nlike '北京%' 列名北京开头\nlike '%北京' 列名北京结尾\n\n```\n\n## 正则表达式：\n\n1. _ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）\n2. % ：百分号 代表匹配0个或多个字符；\n3. []: 中括号 代表匹配其中的任意一个字符；\n4. [^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。\n\n转义字符：\\ ，在需要转义的符合前输入 \\。\n\n转义关键字：ESCAPE，把需要转义的字符，输入在后方。   \n\n## REGEXP运算符\n\n1. '^'匹配以该字符后面的字符开头的字符串。\n2.  '$'匹配以该字符前面的字符结尾的字符串。\n3. '.'匹配任何一个单字符。\n4.  “[...]\"匹配在方括号内的任何字符。例如, \"[abc]\"匹配\"a\"或\"b\"或\"c\"。为了命名字符的范围,使用一个'-'。\"[a-z]\"匹配任何字母,而“[0-9]\"匹配任何数字。\n5. ' * '匹配零个或多个在它前面的字符。例如, “ x* \"匹配任何数量的'x'字符, \" [0-9]* \"匹配任何数量的数字,而\"*\"匹配任何数量的任何字符。\n\n## 位运算符\n\n（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）\n\n&（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） >>（按位右移位） <<（按位左移位）\n\n\n\n## 排序与分页\n\n排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。\n\n升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）\n\n```\nORDER BY 列名 ASC;  # ascend\n```\n\n降序语法格式：\n\n```\nORDER BY  列名  DESC; # descend\n```\n\n**注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。**\n\n**强调格式：WHERE需要声明在FROM后，ORDER BY之前。**\n\n二级排序，语法格式：以此类推\n\n```\nORDER BY 列名 DESC,列名 ASC;\n```\n\n分页：mysql使用limit实习数据的分页显示\n\n分页语法格式：（必须放置语句最后）\n\n```\nLIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;\n```\n\nMYSQL8.0新特性：LIMIT...OFFSET...语法格式：\n\n```\nSELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;\n```\n\n字节函数：\n\n```\nLENGTH(列名);\n```\n\n函数时间戳转换为日期类型进行显示：\n\n```\nFROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））\n```\n\n（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：\n\n```\nSELECT FROM_UNIXTIME(参数) FROM 表名;\n```\n\n```\n返回格式如下： 2020-03-23 15:28:46\n```\n\n  （2）含有format参数：\n\n```\nSELECT FROM_UNIXTIME(参数,'%Y-%m-%d'（选择要转化的格式）) FROM 表名;\n```\n\n```\n返回格式如下：2020-03-23\n```\n\nformat（可选参数）：\n\n```\n%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0=Sunday ……6=Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。\n```\n\n函数IFNULL使用说明：\n\nMySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；\n\nIFNULL函数语法：\n\n```\nIFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。\n```\n\n\n\n## 多表查询：\n\n笛卡尔积(或交叉连接)的理解。\n\n笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 \n\nSQL99：`CROSS  JOIN` 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。\n\n多表查询需要有连接条件：\n\n```\nSELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 = 表名.列名 # 同等的条件\n```\n\n如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。\n\n```\nSELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 = 表名.列名 # 同等的条件\n```\n\n多表查询，建议：\n\n1. 从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。\n2. 可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）\n\n结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）\n\n### 多表查询的分类：\n\n角度1：等值连接 vs 非等值连接\n\n角度2：自连接 vs 非自连接\n\n角度3：内连接 vs 外连接\n\n内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。\n\n外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，\n\n​               还查询到了左表 或 右表中不匹配的行。\n\n外连接的分类：左外连接、右外连接、满外连接。\n\n左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,\n\n​                  这种连接称为左外连接。\n\n右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,\n\n​                  这种连接称为右外连接。\n\nSQL92语法实现内连接：\n\n```\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 = 表名.列名; # 同等的条件\n```\n\nSQL92语法实现外连接：使用 + ------- MYSQL不支持SQL92语法中外连接的写法！\n\n（Oracle支持SQL92语法实现外连接）\n\n```\nSELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 = 表名.列名(+); # 同等的条件\n```\n\nSQL99语法中使用JOIN ...ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。\n\nSQL99语法实现内连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.表名 \nJOIN 表名 别名\nON 别名.列名 = 别名.表名\n\n```\n\nSQL99语法实现外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\nSQL99语法实现左连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\nSQL99语法实现右连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\n满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 = 别名.列名;\n```\n\n![image-20220314153310242](C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220314153310242.png)\n\nUNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。\n\n​                         （去重时导致，效率过低）\n\n```\n\n```\n\nUNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，\n\n​                                  不去重。\n\n```\n\n```\n\n注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。\n\n7种JOIN的实现：\n\n中图，内连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n左上图，左外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n右上图，右外连接：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名 ;\n```\n\n左中图：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n```\n\n右中图：\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n```\n\n左下图：满外连接\n\n方式1：左上图 UNION ALL 右中图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （右表）别名.列名 IS NULL;\n```\n\n方式2：左中图 UNION ALL 右上图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\n```\n\n右下图：左中图 UNION ALL 右中图\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 = 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\n```\n\nSQL99语法的新特性1：自然连接\n\nNATURAL JOIN：它会帮你自动查询两张连接表中`所有相同的字段`，然后进行`等值连接`。\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;\n```\n\nSQL99语法的新特性2：自然连接\n\nUSING：适用于多表查询，有相同列名的查询（不适用与自连接）\n\n```\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);\n```\n\n拓展：可以先JOIN连接但不建议（具体看需求）\n\n```\nSELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 = 别名.列名\nAND 别名.列名 = 别名.列名；\n```\n\n\n\n## 函数的理解：\n\n从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。\n\nMySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)\n\n两种SQL函数：（单行函数，多行函数）\n\n单行函数：\n\n1. 操作数据对象，接受参数返回一个结果。\n2. 只对一行进行变换，每行返回一个结果。\n3. 可以嵌套，参数可以是一列或一个值。\n\n1.数值函数\n\n1.1基本的操作：\n\n```\n# 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n\n```\n\n1.2取随机数：（也称伪随机数，指定因子返回数则固定）\n\n```;\n# 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);\n```\n\n1.3四舍五入，截断操作：\n\n```\n# 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;\n```\n\n1.4角度与弧度的互换\n\n```\n# 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));\n```\n\n1.5三角函数\n\n```\n# 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);\n```\n\n1.6指数和对数\n\n```\n# 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X<=0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X<=0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X<=0时,返回NULL\nLOG2(x);\n```\n\n1.7进制间的转换\n\n```\n# 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);\n```\n\n2.字符串函数\n\n###### # ASCII() 返回字符串S中的第一个字符的ASCII码值\n\n```\n  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);\n```\n\n###### # 连接s1,s2,......,sn为一个字符串（可以申明多个字符串进行拼接）\n\n```\n例子：SELECT CONCAT(别名.列名, ' 固定连接字符串 ', 别名.列名) \"列名展示\" \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 = 别名.列名;\n```\n\n###### # 同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x\n\n```\nCONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);\n```\n\n###### # 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\n\n```\nINSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))\n```\n\n###### # 用字符串b替换字符串str中所有出现的字符串a\n\n```\nREPLACE(str, a(需要要替换的字符串), b(替换上的字符串))\n```\n\n###### # 将字符串s的所有字母转成大写字母\n\n```\nUPPER(s) 或 UCASE(s)\n```\n\n###### # 将字符串s的所有字母转成小写字母\n\n```\nLOWER(s) 或LCASE(s)\n```\n\n###### # 返回字符串str最左边的n个字符\n\n```\nLEFT(str,n(从最左边，根据数值取出字符))\n```\n\n###### # 返回字符串str最右边的n个字符\n\n```\nRIGHT(str,n(从最右边，根据数值取出字符))\n```\n\n###### # 用字符串pad对str最左边进行填充，直到str的长度为len个字符\n\n```\nLPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))\n```\n\n###### # 用字符串pad对str最右边进行填充，直到str的长度为len个字符\n\n```\nRPAD: 实现左对齐效果\nRPAD(str ,len, pad)\n```\n\n###### # 去掉字符串s开始与结尾的空格\n\n```\nTRIM(s)\n```\n\n###### # 去掉字符串s左侧的空格\n\n```\nLTRIM(s)\n```\n\n###### # 去掉字符串s右侧的空格\n\n```\nRTRIM(s)\n```\n\n###### # 去掉字符串s开始与结尾的s1\n\n```\nTRIM(s1 FROM s)\n例子：TRIM('字符串'(首尾出现进行去除) FROM '字符串'(首尾出现相同的字符串则进行去除));\n```\n\n###### # 去掉字符串s开始处的s1\n\n```\nTRIM(LEADING s1FROM s)\n```\n\n###### # 去掉字符串s结尾处的s1\n\n```\nTRIM(TRAILING s1FROM s)\n```\n\n###### # 返回str重复n次的结果\n\n```\nREPEAT(str, n(数值，重复的次数))\n```\n\n###### # 返回n个空格\n\n```\nSPACE(n)\n```\n\n###### # 比较字符串s1,s2的ASCII码值的大小\n\n```\nSTRCMP(s1,s2)\n```\n\n###### # 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同\n\n```\nSUBSTR(s,index(),len(取的长度))\n```\n\n###### # 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。\n\n######    未找到，返回0\n\n```\nLOCATE(substr,str)\n```\n\n###### # 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\\n\n```\nELT(m,s1,s2,…,sn)\n```\n\n###### # 返回字符串s在字符串列表中第一次出现的位置\n\n```\nFIELD(s,s1,s2,…,sn)\n```\n\n###### # 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\n\n```\nFIND_IN_SET(s1,s2)\n```\n\n###### # 返回s反转后的字符串\n\n```\nREVERSE(s)\n```\n\n###### # 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\n\n```\nNULLIF(value1,value2)\n```\n\n注意：MySQL中，字符串的位置是从1开始的。\n\n\n\n","slug":"MySQL/MYSQL语句：","published":1,"date":"2022-11-20T13:19:54.352Z","updated":"2023-01-04T13:19:34.262Z","_id":"clchohnsk00018sxg3rnq13ye","comments":1,"layout":"post","photos":[],"link":"","content":"<p>MYSQL知识点学习</p>\n<p>学习网站：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">https://dev.mysql.com/doc/refman/8.0/en/</a></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093059904.png\" alt=\"image-20220311093059904\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093514689.png\" alt=\"image-20220311093514689\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093719662.png\" alt=\"image-20220311093719662\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093834662.png\" alt=\"image-20220311093834662\"></p>\n<p>表，记录，字段</p>\n<p>E-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。</p>\n<p>一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).</p>\n<p>关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：</p>\n<ol>\n<li>键值型数据库: Redis.</li>\n<li>文档型数据库: MongoDB</li>\n<li>搜索引Y数据库: ES, Solr</li>\n<li>列式数据库: HBase</li>\n<li>图形数据库: InfoGrid</li>\n</ol>\n<p>ORM 思想：对象关系的映射（object Relational Mapping）</p>\n<p>数据库中的一个表&lt;—&gt;java或python中的一个类</p>\n<p>表中的一条数据&lt;—&gt;类中的一个对象（或实体）</p>\n<p>表中的一个列&lt;—&gt;类中的一个字段、属性（fieid）</p>\n<p>表的关联关系</p>\n<p>四种：</p>\n<p>一对一的关联，</p>\n<p>一对多的关联（主表（从表）），</p>\n<p>多对多的关联（主表（（联接表）从表）），</p>\n<p>自我引用。</p>\n<h1 id=\"SQL语言的分类\"><a href=\"#SQL语言的分类\" class=\"headerlink\" title=\"SQL语言的分类\"></a>SQL语言的分类</h1><p>DDL：数据定义语言。</p>\n<p>CREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)</p>\n<p>DML：数据操作语言。</p>\n<p>INSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)</p>\n<p>DCL：操作控制语言。</p>\n<p>COMMIT(提交修改永久性（事物相关）) </p>\n<p>ROLLBACK(回滚/撤回（事物相关）) </p>\n<p>SAVEPOINT(设置保存点) </p>\n<p>GRANT(赋予权限) \\ REVOKE(取消权限)</p>\n<p>命令结束符合: (; \\G\\g)</p>\n<p>SQL 大小写规范：</p>\n<ol>\n<li>MYSQL在Windows环境下是大小写不敏感的</li>\n<li>MYSQL在Linux环境下是大小写敏感的</li>\n<li>数据库名、表名、表的别名、变量名是严格区分大小写的。</li>\n<li>关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。</li>\n<li>推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。</li>\n<li>SQL关键字、函数名、绑定变量等都大写</li>\n</ol>\n<p>可以使用如下格式的注释结构单行注释:</p>\n<ol>\n<li>#注释文字(MySQL特有的方式)</li>\n<li>单行注释: I-注释文字(–后面必须包含一个空格。)</li>\n<li>多行注释: /*注释文字 */</li>\n</ol>\n<p>导入现有的数据表、表数据：</p>\n<ol>\n<li>source  文件的全路径名</li>\n<li>基于具体的图形化界面的工具可以导入数据</li>\n</ol>\n<h2 id=\"msyql命令：\"><a href=\"#msyql命令：\" class=\"headerlink\" title=\"msyql命令：\"></a>msyql命令：</h2><h3 id=\"登录命令\"><a href=\"#登录命令\" class=\"headerlink\" title=\"登录命令\"></a>登录命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -P 端口号 -h localhost -p &#x2F;&#x2F; 登录指定服务器</code></pre>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">msyql -V\nmysql --version\nselect version(); &#x2F;&#x2F; 登录后查看当前版本信息</code></pre>\n\n<p>开启-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net start mysql80</code></pre>\n\n<p>停止-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net stop mysql80</code></pre>\n\n<p>查看数据库信息-DB：database,看做是数据库文件  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show databases;</code></pre>\n\n<p>创建数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create database 库名;</code></pre>\n\n<p>选中数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">use 库名;</code></pre>\n\n<p>选中数据库查看表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show tables;          </code></pre>\n\n<p>创建表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create table emplogees(需创建的参数);</code></pre>\n\n<p>添加数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">insert into 表名 values(1001,&#39;Tom&#39;);</code></pre>\n\n<p>查看表数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from employee;</code></pre>\n\n<p>添加数据库：（1.基于具体的图形化界面的工具可以导入数据）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">source 文件的全路径名称</code></pre>\n\n<p>删除库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">drop database 库名; </code></pre>\n\n\n\n<h2 id=\"SQL语句，简单SELECT搜索语句：\"><a href=\"#SQL语句，简单SELECT搜索语句：\" class=\"headerlink\" title=\"SQL语句，简单SELECT搜索语句：\"></a>SQL语句，简单SELECT搜索语句：</h2><p>查询多列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；</code></pre>\n\n<p>查询所有列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；\n\nSELECT * from 表名；</code></pre>\n\n<p>查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。</p>\n<p>关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）</p>\n<p>分组去重：group by（进行分组查询)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；</code></pre>\n\n<p>查询结果限制返回行数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  &#x2F;&#x2F; 跳过0条，从第一条数据开始取，取两条数据 </code></pre>\n\n<p>也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量</p>\n<p>将查询后的列重新命名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对&quot;&quot;引起来，不要使用&#39;&#39;。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;</code></pre>\n\n<p>空值参与运算，空值参与运算：结果一定也为空。</p>\n<p>空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employee_id, &quot;月工资&quot;，salary * (1 + IFNULL(commission_pct,0)) * 12 &#39;&#39;&quot;年工资&quot;，commission_pct  FROM employees；</code></pre>\n\n<p>&lt;=&gt;:安全等于。可以查询到数据为null的。</p>\n<p>函数查询为null：ISNULL(表名)</p>\n<p>伪表(DUAL)：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 数值 FROM DUAL;</code></pre>\n\n<p>着重号``(在表名或库名与关键字重名时必须加上)</p>\n<p>常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select employee_id,last_name,&#39;常量&#39;,123（常量） FROM employees;</code></pre>\n\n<p>显示表结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DESCRIBE 表名;\n\nDESC 表名;</code></pre>\n\n<p>最小 LEAST(值) \\ 最大 GREATEST(值)</p>\n<p>in （set值），not in （set值，set）</p>\n<p>查询介于之间语句：BETWEEN</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值</code></pre>\n\n<p>查询除某个数据信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">!&#x3D;，not in(值) （判断取值不是这个的值）</code></pre>\n\n<p>用WHERE过滤空值</p>\n<p>判断取值为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NULL</code></pre>\n\n<p>判断取值不为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NOT&#96; &#96;NULL</code></pre>\n\n<p>高级操作符：OR（或）</p>\n<p>模糊查询语句：like  ‘匹配内容’</p>\n<p>考点 like 相似</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">like &#39;%北京%&#39;列名包括北京的字样\nlike &#39;北京%&#39; 列名北京开头\nlike &#39;%北京&#39; 列名北京结尾\n</code></pre>\n\n<h2 id=\"正则表达式：\"><a href=\"#正则表达式：\" class=\"headerlink\" title=\"正则表达式：\"></a>正则表达式：</h2><ol>\n<li>_ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）</li>\n<li>% ：百分号 代表匹配0个或多个字符；</li>\n<li>[]: 中括号 代表匹配其中的任意一个字符；</li>\n<li>[^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。</li>\n</ol>\n<p>转义字符：\\ ，在需要转义的符合前输入 \\。</p>\n<p>转义关键字：ESCAPE，把需要转义的字符，输入在后方。   </p>\n<h2 id=\"REGEXP运算符\"><a href=\"#REGEXP运算符\" class=\"headerlink\" title=\"REGEXP运算符\"></a>REGEXP运算符</h2><ol>\n<li>‘^’匹配以该字符后面的字符开头的字符串。</li>\n<li> ‘$’匹配以该字符前面的字符结尾的字符串。</li>\n<li>‘.’匹配任何一个单字符。</li>\n<li> “[…]”匹配在方括号内的任何字符。例如, “[abc]”匹配”a”或”b”或”c”。为了命名字符的范围,使用一个’-‘。”[a-z]”匹配任何字母,而“[0-9]”匹配任何数字。</li>\n<li>‘ * ‘匹配零个或多个在它前面的字符。例如, “ x* “匹配任何数量的’x’字符, “ [0-9]* “匹配任何数量的数字,而”*”匹配任何数量的任何字符。</li>\n</ol>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）</p>\n<p>&amp;（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） &gt;&gt;（按位右移位） &lt;&lt;（按位左移位）</p>\n<h2 id=\"排序与分页\"><a href=\"#排序与分页\" class=\"headerlink\" title=\"排序与分页\"></a>排序与分页</h2><p>排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。</p>\n<p>升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 ASC;  # ascend</code></pre>\n\n<p>降序语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY  列名  DESC; # descend</code></pre>\n\n<p><strong>注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。</strong></p>\n<p><strong>强调格式：WHERE需要声明在FROM后，ORDER BY之前。</strong></p>\n<p>二级排序，语法格式：以此类推</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 DESC,列名 ASC;</code></pre>\n\n<p>分页：mysql使用limit实习数据的分页显示</p>\n<p>分页语法格式：（必须放置语句最后）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;</code></pre>\n\n<p>MYSQL8.0新特性：LIMIT…OFFSET…语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;</code></pre>\n\n<p>字节函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LENGTH(列名);</code></pre>\n\n<p>函数时间戳转换为日期类型进行显示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））</code></pre>\n\n<p>（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下： 2020-03-23 15:28:46</code></pre>\n\n<p>  （2）含有format参数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数,&#39;%Y-%m-%d&#39;（选择要转化的格式）) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下：2020-03-23</code></pre>\n\n<p>format（可选参数）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0&#x3D;Sunday ……6&#x3D;Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。</code></pre>\n\n<p>函数IFNULL使用说明：</p>\n<p>MySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；</p>\n<p>IFNULL函数语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。</code></pre>\n\n\n\n<h2 id=\"多表查询：\"><a href=\"#多表查询：\" class=\"headerlink\" title=\"多表查询：\"></a>多表查询：</h2><p>笛卡尔积(或交叉连接)的理解。</p>\n<p>笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 </p>\n<p>SQL99：<code>CROSS  JOIN</code> 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。</p>\n<p>多表查询需要有连接条件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>多表查询，建议：</p>\n<ol>\n<li>从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。</li>\n<li>可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）</li>\n</ol>\n<p>结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）</p>\n<h3 id=\"多表查询的分类：\"><a href=\"#多表查询的分类：\" class=\"headerlink\" title=\"多表查询的分类：\"></a>多表查询的分类：</h3><p>角度1：等值连接 vs 非等值连接</p>\n<p>角度2：自连接 vs 非自连接</p>\n<p>角度3：内连接 vs 外连接</p>\n<p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。</p>\n<p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，</p>\n<p>​               还查询到了左表 或 右表中不匹配的行。</p>\n<p>外连接的分类：左外连接、右外连接、满外连接。</p>\n<p>左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,</p>\n<p>​                  这种连接称为左外连接。</p>\n<p>右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,</p>\n<p>​                  这种连接称为右外连接。</p>\n<p>SQL92语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名; # 同等的条件</code></pre>\n\n<p>SQL92语法实现外连接：使用 + ——- MYSQL不支持SQL92语法中外连接的写法！</p>\n<p>（Oracle支持SQL92语法实现外连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名(+); # 同等的条件</code></pre>\n\n<p>SQL99语法中使用JOIN …ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。</p>\n<p>SQL99语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 \nJOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n</code></pre>\n\n<p>SQL99语法实现外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现左连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现右连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220314153310242.png\" alt=\"image-20220314153310242\"></p>\n<p>UNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。</p>\n<p>​                         （去重时导致，效率过低）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>UNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，</p>\n<p>​                                  不去重。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。</p>\n<p>7种JOIN的实现：</p>\n<p>中图，内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左上图，左外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>右上图，右外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>右中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>左下图：满外连接</p>\n<p>方式1：左上图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>方式2：左中图 UNION ALL 右上图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名</code></pre>\n\n<p>右下图：左中图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>SQL99语法的新特性1：自然连接</p>\n<p>NATURAL JOIN：它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;</code></pre>\n\n<p>SQL99语法的新特性2：自然连接</p>\n<p>USING：适用于多表查询，有相同列名的查询（不适用与自连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);</code></pre>\n\n<p>拓展：可以先JOIN连接但不建议（具体看需求）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 &#x3D; 别名.列名\nAND 别名.列名 &#x3D; 别名.列名；</code></pre>\n\n\n\n<h2 id=\"函数的理解：\"><a href=\"#函数的理解：\" class=\"headerlink\" title=\"函数的理解：\"></a>函数的理解：</h2><p>从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。</p>\n<p>MySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)</p>\n<p>两种SQL函数：（单行函数，多行函数）</p>\n<p>单行函数：</p>\n<ol>\n<li>操作数据对象，接受参数返回一个结果。</li>\n<li>只对一行进行变换，每行返回一个结果。</li>\n<li>可以嵌套，参数可以是一列或一个值。</li>\n</ol>\n<p>1.数值函数</p>\n<p>1.1基本的操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n</code></pre>\n\n<p>1.2取随机数：（也称伪随机数，指定因子返回数则固定）</p>\n<pre class=\"line-numbers language-;\" data-language=\";\"><code class=\"language-;\"># 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);</code></pre>\n\n<p>1.3四舍五入，截断操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;</code></pre>\n\n<p>1.4角度与弧度的互换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));</code></pre>\n\n<p>1.5三角函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);</code></pre>\n\n<p>1.6指数和对数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X&lt;&#x3D;0时,返回NULL\nLOG2(x);</code></pre>\n\n<p>1.7进制间的转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);</code></pre>\n\n<p>2.字符串函数</p>\n<h6 id=\"ASCII-返回字符串S中的第一个字符的ASCII码值\"><a href=\"#ASCII-返回字符串S中的第一个字符的ASCII码值\" class=\"headerlink\" title=\"# ASCII() 返回字符串S中的第一个字符的ASCII码值\"></a># ASCII() 返回字符串S中的第一个字符的ASCII码值</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);</code></pre>\n\n<h6 id=\"连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\"><a href=\"#连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\" class=\"headerlink\" title=\"# 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）\"></a># 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT CONCAT(别名.列名, &#39; 固定连接字符串 &#39;, 别名.列名) &quot;列名展示&quot; \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<h6 id=\"同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\"><a href=\"#同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\" class=\"headerlink\" title=\"# 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x\"></a># 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">CONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);</code></pre>\n\n<h6 id=\"将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"><a href=\"#将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\" class=\"headerlink\" title=\"# 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"></a># 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))</code></pre>\n\n<h6 id=\"用字符串b替换字符串str中所有出现的字符串a\"><a href=\"#用字符串b替换字符串str中所有出现的字符串a\" class=\"headerlink\" title=\"# 用字符串b替换字符串str中所有出现的字符串a\"></a># 用字符串b替换字符串str中所有出现的字符串a</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPLACE(str, a(需要要替换的字符串), b(替换上的字符串))</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成大写字母\"><a href=\"#将字符串s的所有字母转成大写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成大写字母\"></a># 将字符串s的所有字母转成大写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">UPPER(s) 或 UCASE(s)</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成小写字母\"><a href=\"#将字符串s的所有字母转成小写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成小写字母\"></a># 将字符串s的所有字母转成小写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOWER(s) 或LCASE(s)</code></pre>\n\n<h6 id=\"返回字符串str最左边的n个字符\"><a href=\"#返回字符串str最左边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最左边的n个字符\"></a># 返回字符串str最左边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LEFT(str,n(从最左边，根据数值取出字符))</code></pre>\n\n<h6 id=\"返回字符串str最右边的n个字符\"><a href=\"#返回字符串str最右边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最右边的n个字符\"></a># 返回字符串str最右边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RIGHT(str,n(从最右边，根据数值取出字符))</code></pre>\n\n<h6 id=\"用字符串pad对str最左边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最左边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最左边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最左边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))</code></pre>\n\n<h6 id=\"用字符串pad对str最右边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最右边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最右边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最右边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RPAD: 实现左对齐效果\nRPAD(str ,len, pad)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的空格\"><a href=\"#去掉字符串s开始与结尾的空格\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的空格\"></a># 去掉字符串s开始与结尾的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s左侧的空格\"><a href=\"#去掉字符串s左侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s左侧的空格\"></a># 去掉字符串s左侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s右侧的空格\"><a href=\"#去掉字符串s右侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s右侧的空格\"></a># 去掉字符串s右侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的s1\"><a href=\"#去掉字符串s开始与结尾的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的s1\"></a># 去掉字符串s开始与结尾的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s1 FROM s)\n例子：TRIM(&#39;字符串&#39;(首尾出现进行去除) FROM &#39;字符串&#39;(首尾出现相同的字符串则进行去除));</code></pre>\n\n<h6 id=\"去掉字符串s开始处的s1\"><a href=\"#去掉字符串s开始处的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始处的s1\"></a># 去掉字符串s开始处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(LEADING s1FROM s)</code></pre>\n\n<h6 id=\"去掉字符串s结尾处的s1\"><a href=\"#去掉字符串s结尾处的s1\" class=\"headerlink\" title=\"# 去掉字符串s结尾处的s1\"></a># 去掉字符串s结尾处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(TRAILING s1FROM s)</code></pre>\n\n<h6 id=\"返回str重复n次的结果\"><a href=\"#返回str重复n次的结果\" class=\"headerlink\" title=\"# 返回str重复n次的结果\"></a># 返回str重复n次的结果</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPEAT(str, n(数值，重复的次数))</code></pre>\n\n<h6 id=\"返回n个空格\"><a href=\"#返回n个空格\" class=\"headerlink\" title=\"# 返回n个空格\"></a># 返回n个空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SPACE(n)</code></pre>\n\n<h6 id=\"比较字符串s1-s2的ASCII码值的大小\"><a href=\"#比较字符串s1-s2的ASCII码值的大小\" class=\"headerlink\" title=\"# 比较字符串s1,s2的ASCII码值的大小\"></a># 比较字符串s1,s2的ASCII码值的大小</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">STRCMP(s1,s2)</code></pre>\n\n<h6 id=\"返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\"><a href=\"#返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\" class=\"headerlink\" title=\"# 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同\"></a># 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SUBSTR(s,index(),len(取的长度))</code></pre>\n\n<h6 id=\"返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\"><a href=\"#返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\" class=\"headerlink\" title=\"# 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。\"></a># 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。</h6><h6 id=\"未找到，返回0\"><a href=\"#未找到，返回0\" class=\"headerlink\" title=\"未找到，返回0\"></a>未找到，返回0</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOCATE(substr,str)</code></pre>\n\n<h6 id=\"返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\"><a href=\"#返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\" class=\"headerlink\" title=\"# 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\\"></a># 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">ELT(m,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s在字符串列表中第一次出现的位置\"><a href=\"#返回字符串s在字符串列表中第一次出现的位置\" class=\"headerlink\" title=\"# 返回字符串s在字符串列表中第一次出现的位置\"></a># 返回字符串s在字符串列表中第一次出现的位置</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIELD(s,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"><a href=\"#返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\" class=\"headerlink\" title=\"# 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"></a># 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIND_IN_SET(s1,s2)</code></pre>\n\n<h6 id=\"返回s反转后的字符串\"><a href=\"#返回s反转后的字符串\" class=\"headerlink\" title=\"# 返回s反转后的字符串\"></a># 返回s反转后的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REVERSE(s)</code></pre>\n\n<h6 id=\"比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"><a href=\"#比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\" class=\"headerlink\" title=\"# 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"></a># 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">NULLIF(value1,value2)</code></pre>\n\n<p>注意：MySQL中，字符串的位置是从1开始的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>MYSQL知识点学习</p>\n<p>学习网站：</p>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/\">https://dev.mysql.com/doc/refman/8.0/en/</a></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093059904.png\" alt=\"image-20220311093059904\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093514689.png\" alt=\"image-20220311093514689\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093719662.png\" alt=\"image-20220311093719662\"></p>\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220311093834662.png\" alt=\"image-20220311093834662\"></p>\n<p>表，记录，字段</p>\n<p>E-R (entity-relationship,实体-联系)模型中有三个主要概念是:实体集、属性、联系集。</p>\n<p>一个实体集(class)对应于数据库中的一个表(table),一个实体(instance)则对应于数据库表中的一行(row) ,也称为一条记录(record).一个属性(attribute)对应于数据库表中的一列(column),也称为一个字段(field).</p>\n<p>关系型数据管理系统（RDBMS）之间的对比非关系型数据管理系统（RDBMS）(了解)：</p>\n<ol>\n<li>键值型数据库: Redis.</li>\n<li>文档型数据库: MongoDB</li>\n<li>搜索引Y数据库: ES, Solr</li>\n<li>列式数据库: HBase</li>\n<li>图形数据库: InfoGrid</li>\n</ol>\n<p>ORM 思想：对象关系的映射（object Relational Mapping）</p>\n<p>数据库中的一个表&lt;—&gt;java或python中的一个类</p>\n<p>表中的一条数据&lt;—&gt;类中的一个对象（或实体）</p>\n<p>表中的一个列&lt;—&gt;类中的一个字段、属性（fieid）</p>\n<p>表的关联关系</p>\n<p>四种：</p>\n<p>一对一的关联，</p>\n<p>一对多的关联（主表（从表）），</p>\n<p>多对多的关联（主表（（联接表）从表）），</p>\n<p>自我引用。</p>\n<h1 id=\"SQL语言的分类\"><a href=\"#SQL语言的分类\" class=\"headerlink\" title=\"SQL语言的分类\"></a>SQL语言的分类</h1><p>DDL：数据定义语言。</p>\n<p>CREATE(创建) \\  ALTER(修改) \\ DROP(删除结构) \\ RENAME(重命名) \\ TRUNCATE(清空)</p>\n<p>DML：数据操作语言。</p>\n<p>INSEET(添加) \\ DELETE(删除记录) \\ UPDATE(修改) \\ SELECT(*查询，场景，过滤)</p>\n<p>DCL：操作控制语言。</p>\n<p>COMMIT(提交修改永久性（事物相关）) </p>\n<p>ROLLBACK(回滚/撤回（事物相关）) </p>\n<p>SAVEPOINT(设置保存点) </p>\n<p>GRANT(赋予权限) \\ REVOKE(取消权限)</p>\n<p>命令结束符合: (; \\G\\g)</p>\n<p>SQL 大小写规范：</p>\n<ol>\n<li>MYSQL在Windows环境下是大小写不敏感的</li>\n<li>MYSQL在Linux环境下是大小写敏感的</li>\n<li>数据库名、表名、表的别名、变量名是严格区分大小写的。</li>\n<li>关键字、函数名、列名(或字段名I、列的别名(字段的别名)是忽略大小写的。</li>\n<li>推荐采用统一的书写规范:。数据库名、表名、表别名、字段名、字段别名等都小写。</li>\n<li>SQL关键字、函数名、绑定变量等都大写</li>\n</ol>\n<p>可以使用如下格式的注释结构单行注释:</p>\n<ol>\n<li>#注释文字(MySQL特有的方式)</li>\n<li>单行注释: I-注释文字(–后面必须包含一个空格。)</li>\n<li>多行注释: /*注释文字 */</li>\n</ol>\n<p>导入现有的数据表、表数据：</p>\n<ol>\n<li>source  文件的全路径名</li>\n<li>基于具体的图形化界面的工具可以导入数据</li>\n</ol>\n<h2 id=\"msyql命令：\"><a href=\"#msyql命令：\" class=\"headerlink\" title=\"msyql命令：\"></a>msyql命令：</h2><h3 id=\"登录命令\"><a href=\"#登录命令\" class=\"headerlink\" title=\"登录命令\"></a>登录命令</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -P 端口号 -h localhost -p &#x2F;&#x2F; 登录指定服务器</code></pre>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">msyql -V\nmysql --version\nselect version(); &#x2F;&#x2F; 登录后查看当前版本信息</code></pre>\n\n<p>开启-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net start mysql80</code></pre>\n\n<p>停止-服务器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">net stop mysql80</code></pre>\n\n<p>查看数据库信息-DB：database,看做是数据库文件  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show databases;</code></pre>\n\n<p>创建数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create database 库名;</code></pre>\n\n<p>选中数据库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">use 库名;</code></pre>\n\n<p>选中数据库查看表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">show tables;          </code></pre>\n\n<p>创建表</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">create table emplogees(需创建的参数);</code></pre>\n\n<p>添加数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">insert into 表名 values(1001,&#39;Tom&#39;);</code></pre>\n\n<p>查看表数据</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from employee;</code></pre>\n\n<p>添加数据库：（1.基于具体的图形化界面的工具可以导入数据）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">source 文件的全路径名称</code></pre>\n\n<p>删除库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">drop database 库名; </code></pre>\n\n\n\n<h2 id=\"SQL语句，简单SELECT搜索语句：\"><a href=\"#SQL语句，简单SELECT搜索语句：\" class=\"headerlink\" title=\"SQL语句，简单SELECT搜索语句：\"></a>SQL语句，简单SELECT搜索语句：</h2><p>查询多列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；</code></pre>\n\n<p>查询所有列</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 from 表名；\n\nSELECT * from 表名；</code></pre>\n\n<p>查询结果去重：以下两种都可以进行去重查询，区别是： 用distinct去重，只能查询到去重的属性那一列，无法查询其他字段 用group by分组查询，可以根据需求查询对应的其他字段。</p>\n<p>关键字去重：distinct（放置列表前进行使用,用于返回唯一不同的值）</p>\n<p>分组去重：group by（进行分组查询)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT DISTINCT 列名 from 表名；\n\nSELECT 列名 from 表名 GROUP BY 列名；</code></pre>\n\n<p>查询结果限制返回行数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 2\n\nSELECT 列名 FROM 表名 LIMIT 0,2\n\nSELECT 列名 FROM 表名 LIMIT 2 OFFSET 0  &#x2F;&#x2F; 跳过0条，从第一条数据开始取，取两条数据 </code></pre>\n\n<p>也可结合 limit offset： 一起使用时，limit表示要取的数量，offset表示跳过的数量</p>\n<p>将查询后的列重新命名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 旧列名 as 新列名 FROM 表名 LIMIT 结果限制返回行数;\n\n列的别名：\nas:全称：alias（别名），可以省略。或空格\n列的别名可以使用一对&quot;&quot;引起来，不要使用&#39;&#39;。\n\nSELECT 旧列名 新列名 FROM 表名 LIMIT 结果限制返回行数;</code></pre>\n\n<p>空值参与运算，空值参与运算：结果一定也为空。</p>\n<p>空值参与运算的解决方案：在空值前面加上IFNULL括起来，如果是null就拿0去替换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employee_id, &quot;月工资&quot;，salary * (1 + IFNULL(commission_pct,0)) * 12 &#39;&#39;&quot;年工资&quot;，commission_pct  FROM employees；</code></pre>\n\n<p>&lt;=&gt;:安全等于。可以查询到数据为null的。</p>\n<p>函数查询为null：ISNULL(表名)</p>\n<p>伪表(DUAL)：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 数值 FROM DUAL;</code></pre>\n\n<p>着重号``(在表名或库名与关键字重名时必须加上)</p>\n<p>常数，一般用于不存在表中，但需要固定出现的场景中可使用，根据数据的行数都相应匹配一条</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select employee_id,last_name,&#39;常量&#39;,123（常量） FROM employees;</code></pre>\n\n<p>显示表结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">DESCRIBE 表名;\n\nDESC 表名;</code></pre>\n\n<p>最小 LEAST(值) \\ 最大 GREATEST(值)</p>\n<p>in （set值），not in （set值，set）</p>\n<p>查询介于之间语句：BETWEEN</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT 列名 FROM 表名 WHERE createtime BETWEEN 数值 AND 数值</code></pre>\n\n<p>查询除某个数据信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">!&#x3D;，not in(值) （判断取值不是这个的值）</code></pre>\n\n<p>用WHERE过滤空值</p>\n<p>判断取值为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NULL</code></pre>\n\n<p>判断取值不为空的语句格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">列名 &#96;&#96;IS&#96; &#96;NOT&#96; &#96;NULL</code></pre>\n\n<p>高级操作符：OR（或）</p>\n<p>模糊查询语句：like  ‘匹配内容’</p>\n<p>考点 like 相似</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">like &#39;%北京%&#39;列名包括北京的字样\nlike &#39;北京%&#39; 列名北京开头\nlike &#39;%北京&#39; 列名北京结尾\n</code></pre>\n\n<h2 id=\"正则表达式：\"><a href=\"#正则表达式：\" class=\"headerlink\" title=\"正则表达式：\"></a>正则表达式：</h2><ol>\n<li>_ ：下划线 代表匹配任意一个字符；（代表一个不确定的字符）</li>\n<li>% ：百分号 代表匹配0个或多个字符；</li>\n<li>[]: 中括号 代表匹配其中的任意一个字符；</li>\n<li>[^]: ^尖冒号 代表 非，取反的意思；不匹配中的任意一个字符。</li>\n</ol>\n<p>转义字符：\\ ，在需要转义的符合前输入 \\。</p>\n<p>转义关键字：ESCAPE，把需要转义的字符，输入在后方。   </p>\n<h2 id=\"REGEXP运算符\"><a href=\"#REGEXP运算符\" class=\"headerlink\" title=\"REGEXP运算符\"></a>REGEXP运算符</h2><ol>\n<li>‘^’匹配以该字符后面的字符开头的字符串。</li>\n<li> ‘$’匹配以该字符前面的字符结尾的字符串。</li>\n<li>‘.’匹配任何一个单字符。</li>\n<li> “[…]”匹配在方括号内的任何字符。例如, “[abc]”匹配”a”或”b”或”c”。为了命名字符的范围,使用一个’-‘。”[a-z]”匹配任何字母,而“[0-9]”匹配任何数字。</li>\n<li>‘ * ‘匹配零个或多个在它前面的字符。例如, “ x* “匹配任何数量的’x’字符, “ [0-9]* “匹配任何数量的数字,而”*”匹配任何数量的任何字符。</li>\n</ol>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>（位运算符是在二进制上进行计算的运算符。位运算符会先将操作数变成二进制数,然后进行位运算,最后将计算结果从二进制变回十进制数。）</p>\n<p>&amp;（与（位AND）） |（或（位OR）） ^（异或（位XOR）） ~（按位取反） &gt;&gt;（按位右移位） &lt;&lt;（按位左移位）</p>\n<h2 id=\"排序与分页\"><a href=\"#排序与分页\" class=\"headerlink\" title=\"排序与分页\"></a>排序与分页</h2><p>排序：未使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。</p>\n<p>升序语法格式：（在ORDER BY 后未写关键字升降，默认为升序）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 ASC;  # ascend</code></pre>\n\n<p>降序语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY  列名  DESC; # descend</code></pre>\n\n<p><strong>注意：列的别名只能在ORDER BY中使用，不能在WHERE中使用。</strong></p>\n<p><strong>强调格式：WHERE需要声明在FROM后，ORDER BY之前。</strong></p>\n<p>二级排序，语法格式：以此类推</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ORDER BY 列名 DESC,列名 ASC;</code></pre>\n\n<p>分页：mysql使用limit实习数据的分页显示</p>\n<p>分页语法格式：（必须放置语句最后）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LIMIT 每页显示pageSize条记录，此时显示第pageNO页；\n公式：LIMIT (pageNO-1) * pageSize,pageSize;</code></pre>\n\n<p>MYSQL8.0新特性：LIMIT…OFFSET…语法格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM 表名 LIMIT 页数 OFFSET 条数;</code></pre>\n\n<p>字节函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LENGTH(列名);</code></pre>\n\n<p>函数时间戳转换为日期类型进行显示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FROM_UNIXTIME（参数，format（是可选参数的，进行转化格式））</code></pre>\n\n<p>（1）不含有format参数，默认返回%Y-%m-%d %H:%i:%s的格式：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下： 2020-03-23 15:28:46</code></pre>\n\n<p>  （2）含有format参数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT FROM_UNIXTIME(参数,&#39;%Y-%m-%d&#39;（选择要转化的格式）) FROM 表名;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回格式如下：2020-03-23</code></pre>\n\n<p>format（可选参数）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">%M 月名字(January……December)\n%W 星期名字(Sunday……Saturday)\n%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）\n%Y 年, 数字, 4 位\n%y 年, 数字, 2 位\n%a 缩写的星期名字(Sun……Sat)\n%d 月份中的天数, 数字(00……31)\n%e 月份中的天数, 数字(0……31)\n%m 月, 数字(01……12)\n%c 月, 数字(1……12)\n%b 缩写的月份名字(Jan……Dec)\n%j 一年中的天数(001……366)\n%H 小时(00……23)\n%k 小时(0……23)\n%h 小时(01……12)\n%I 小时(01……12)\n%l 小时(1……12)\n%i 分钟, 数字(00……59)\n%r 时间,12 小时(hh:mm:ss [AP]M)\n%T 时间,24 小时(hh:mm:ss)\n%S 秒(00……59)\n%s 秒(00……59)\n%p AM或PM\n%w 一个星期中的天数(0&#x3D;Sunday ……6&#x3D;Saturday ）\n%U 星期(0……52), 这里星期天是星期的第一天\n%u 星期(0……52), 这里星期一是星期的第一天\n%% 一个文字“%”。</code></pre>\n\n<p>函数IFNULL使用说明：</p>\n<p>MySQL IFNULL 函数是MySQL控制流函数之一，它接受两个参数，如果不是NULL，则返回第一个参数。否则，IFNULL函数返回第二个参数。（两个参数可以是文字或表达式）；</p>\n<p>IFNULL函数语法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IFNULL(参数1，参数2); # 如果参数1不为NULL，则IFNULL函数返回参数1;否则返回参数2的结果。</code></pre>\n\n\n\n<h2 id=\"多表查询：\"><a href=\"#多表查询：\" class=\"headerlink\" title=\"多表查询：\"></a>多表查询：</h2><p>笛卡尔积(或交叉连接)的理解。</p>\n<p>笛卡尔乘积是一个数学运算。假设我有两个集合X和Y,那么X和Y的笛卡尔积就是×和Y的所有可能组合,也就是第一个对象来自于x,第二个对象来自于Y的所有可能。组合的个数即为两个集合中元素个数的乘积数。 </p>\n<p>SQL99：<code>CROSS  JOIN</code> 表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。</p>\n<p>多表查询需要有连接条件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,department_id \nFROM employess,department\n# 两个表的连接条件\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>如果查询语句中出现了多个表中都存在的字段，则必须指明此字段所在的表。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT employees_id,department_name,表名.department_id \nFROM employess,department\nWHERE 表名.列名 &#x3D; 表名.列名 # 同等的条件</code></pre>\n\n<p>多表查询，建议：</p>\n<ol>\n<li>从sql优化的角度，建议多表查询时，每个字段前都指明其所在的表。</li>\n<li>可以给表起别名，在SELECT和WHERE中使用表的别名。（一旦在SELECT和WHERE中使用，则必须使用表的别名，而不能再使用表的原名）</li>\n</ol>\n<p>结论：如果有n个表实现有多表查询，则需要至少n-1个连接条件。（否则会出现笛卡尔积的错误）</p>\n<h3 id=\"多表查询的分类：\"><a href=\"#多表查询的分类：\" class=\"headerlink\" title=\"多表查询的分类：\"></a>多表查询的分类：</h3><p>角度1：等值连接 vs 非等值连接</p>\n<p>角度2：自连接 vs 非自连接</p>\n<p>角度3：内连接 vs 外连接</p>\n<p>内连接：合并具有同一列的两个以上的表的行，结果集中不包含一个表与另一个表不匹配的行。</p>\n<p>外连接：合并具有同一列的两个以上的表的行，结果集中除了包含一个表与另一个表匹配的行之外，</p>\n<p>​               还查询到了左表 或 右表中不匹配的行。</p>\n<p>外连接的分类：左外连接、右外连接、满外连接。</p>\n<p>左外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回左表中不满足条件的行,</p>\n<p>​                  这种连接称为左外连接。</p>\n<p>右外连接：两个表在连接过程中除了返回满足连接条件的行以外还返回右表中不满足条件的行,</p>\n<p>​                  这种连接称为右外连接。</p>\n<p>SQL92语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名; # 同等的条件</code></pre>\n\n<p>SQL92语法实现外连接：使用 + ——- MYSQL不支持SQL92语法中外连接的写法！</p>\n<p>（Oracle支持SQL92语法实现外连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT e.employees_id,b.department_name,e.department_id \nFROM employess e,department b\nWHERE 表名.列名 &#x3D; 表名.列名(+); # 同等的条件</code></pre>\n\n<p>SQL99语法中使用JOIN …ON的方式实现多表的查询。这种方式也能解决外连接的问题。MYSQL是支持此种方式的。</p>\n<p>SQL99语法实现内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 INNER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 \nJOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\n</code></pre>\n\n<p>SQL99语法实现外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现左连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>SQL99语法实现右连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p>满外连接：mysql不支持FULL OUTER JOIN语法（Oracle支持SQL92 FULL OUTER JOIN语法）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 FULL OUTER（可省略） JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<p><img src=\"C:\\Users\\moyu_\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220314153310242.png\" alt=\"image-20220314153310242\"></p>\n<p>UNION操作符：UNION操作符返回两个查询的结果集的并集，去除重复记录。</p>\n<p>​                         （去重时导致，效率过低）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>UNION ALL操作符：UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，</p>\n<p>​                                  不去重。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"></code></pre>\n\n<p>注意:执行UNION ALL语句时所需要的资源TUNION语句少。如果明确知道合并数据后的结果数据不存在重复数据,或者不需要去除重复的数据,则尽量使用UNION ALL语句,以提高数据查询的效率。</p>\n<p>7种JOIN的实现：</p>\n<p>中图，内连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左上图，左外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>右上图，右外连接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名 ;</code></pre>\n\n<p>左中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>右中图：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>左下图：满外连接</p>\n<p>方式1：左上图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （右表）别名.列名 IS NULL;</code></pre>\n\n<p>方式2：左中图 UNION ALL 右上图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名</code></pre>\n\n<p>右下图：左中图 UNION ALL 右中图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 LEFT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL\nUNION ALL\nSELECT 别名.列名,别名.列名\nFROM 表名 别名 RIGHT JOIN 表名 别名\nON 别名.列名 &#x3D; 别名.表名\nWHERE （左表） 别名.列名 IS NULL;</code></pre>\n\n<p>SQL99语法的新特性1：自然连接</p>\n<p>NATURAL JOIN：它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 NATURAL JOIN 表名 别名;</code></pre>\n\n<p>SQL99语法的新特性2：自然连接</p>\n<p>USING：适用于多表查询，有相同列名的查询（不适用与自连接）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 别名.列名,别名.列名\nFROM 表名 别名 JOIN 表名 别名\nUSING(列名);</code></pre>\n\n<p>拓展：可以先JOIN连接但不建议（具体看需求）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SELECT 列名 FROM A表名\nINNER JOIN B表名 INNER JOIN C表名\nON 别名.列名 &#x3D; 别名.列名\nAND 别名.列名 &#x3D; 别名.列名；</code></pre>\n\n\n\n<h2 id=\"函数的理解：\"><a href=\"#函数的理解：\" class=\"headerlink\" title=\"函数的理解：\"></a>函数的理解：</h2><p>从函数定义的绝度出发，我们可以将函数分成内置函数和自定义函数。</p>\n<p>MySQL提供的内置函数从实现的功能角度可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里,我将这些丰富的内置函数再分为两类:单行函数、聚合函数(或分组函数)</p>\n<p>两种SQL函数：（单行函数，多行函数）</p>\n<p>单行函数：</p>\n<ol>\n<li>操作数据对象，接受参数返回一个结果。</li>\n<li>只对一行进行变换，每行返回一个结果。</li>\n<li>可以嵌套，参数可以是一列或一个值。</li>\n</ol>\n<p>1.数值函数</p>\n<p>1.1基本的操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回绝对值,取相反\nABS(-132); \nABS(32);\n# 返回x的符合。正数返回1,负数返回-1,0返回o\nSIGN(x); \nSIGN(23); \nSIGN(-23); \n# 返回圆周率的值(常量)\nPI(); \n# 返回大于或等于某个值的最小整数(取值天花板，取上)\nCELL(33.2);\nCEILING(44.3); \n# 返回小于或等于某个值的最大整数(取值天花板，取下)\nFLOOR(33.2); \n# 返回列表中的最小值\nLEAST(e1,e2,e3);\n# 返回列表中的最大值\nGREATEST(e1,e2,e3);\n# 返回x除以Y后的余数(取余数)\nMOD(12,5); \n</code></pre>\n\n<p>1.2取随机数：（也称伪随机数，指定因子返回数则固定）</p>\n<pre class=\"line-numbers language-;\" data-language=\";\"><code class=\"language-;\"># 返回0~1的随机值\nRAND();\n# 返回0~1的随机值,其中x的值用作种子值,相同的x值会产生相同的随机数\nRAND(x);\nRAND(10（因子）);\nRAND(10);</code></pre>\n\n<p>1.3四舍五入，截断操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回一个对x的值进行四舍五入后,最接近于x的整数(默认截断，舍取小数)\nROUND(123.556);\n# 返回一个对x的值进行四舍五入后最接近x的值,并保留到小数点后面Y位\n  (保留0位小数，从小数点后进行截断进行四舍五入)\nROUND(123.456,0);\nROUND(123.556,1);\nROUND(123.456,2);\n# 保留-1位小数，从小数点前进行截断进行四舍五入\nROUND(123.556,-1);\nROUND(123.456,-2);\nROUND(125.556,-3);\n# 返回数字x截断为y位小数的结果(截断，必须舍掉)\nTRUNCATE(125.556,1);\n# 返回x的平方根。当x的值为负数时,返回NULL\nSQRT(x);\n# 单行函数可以嵌套\nSELECT TRUNCATE(ROUND(125.553,0),0)\nFROM DUAL;</code></pre>\n\n<p>1.4角度与弧度的互换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 弧度(将角度转化为弧度,其中,参数x为角度值)\nRADIANS(X);\n# 角度(将弧度转化为角度,其中,参数x为弧度值)\nDEGREES(X);\n例子：\nSELECT RADIANS(30),RADIANS(45),RADIANS(60),RADIANS(90),\nDEGREES(2*PI()),DEGREES(RADIANS(60));</code></pre>\n\n<p>1.5三角函数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的正弦值,其中,参数x为弧度值\nSIN(x);\n# 返回x的反正弦值,即获取正弦为x的值。如果x的值不在-1到1之间,则返回NULL\nASIN(x);\n# 返回x的余弦值,其中,参数x为弧度值\nCOS(x);\n# 返回x的反余弦值,即获取余弦为x的值。如果x的值不在-1到1之间,则返回NULL\nACOS(x);\n# 返回x的正切值,其中,参数x为弧度值\nTAN(x);\n# 返回x的反正切值,即返回正切值为x的值\nATAN(x);\n# 返回两个参数的反正切值\nATAN2(m,n);\n# 返回x的余切值,其中,x为弧度值\nCOT(x);</code></pre>\n\n<p>1.6指数和对数</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的y次方\nPOW(x,y),POWER(x,y);\n# 返回e的x次方,其中e是一个常数, 2.718281828459045\nEXP(x);\n# 返回以e为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLN(x),LOG(x);\n# 返回以10为底的x的对数,当X&lt;&#x3D;0时,返回的结果为NULL\nLOG10(x);\n# 返回以2为底的x的对数,当X&lt;&#x3D;0时,返回NULL\nLOG2(x);</code></pre>\n\n<p>1.7进制间的转换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 返回x的二进制编码\nBIN(x);\n# 返回x的十六进制编码\nHEX(x);\n# 返回x的八进制编码\nOCT(x);\n# 返回f1进制数变成f2进制数\nCONV(x,f1,f2);</code></pre>\n\n<p>2.字符串函数</p>\n<h6 id=\"ASCII-返回字符串S中的第一个字符的ASCII码值\"><a href=\"#ASCII-返回字符串S中的第一个字符的ASCII码值\" class=\"headerlink\" title=\"# ASCII() 返回字符串S中的第一个字符的ASCII码值\"></a># ASCII() 返回字符串S中的第一个字符的ASCII码值</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">  ASCII(S);\n# LENGTH()返回字符串s的字节数，和字符集有关。\n  LENGTH(s);\n# CHAR_LENGTH()返回字符串s的字符数。\n  CHAR_LENGTH(s);</code></pre>\n\n<h6 id=\"连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\"><a href=\"#连接s1-s2-……-sn为一个字符串（可以申明多个字符串进行拼接）\" class=\"headerlink\" title=\"# 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）\"></a># 连接s1,s2,……,sn为一个字符串（可以申明多个字符串进行拼接）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">例子：SELECT CONCAT(别名.列名, &#39; 固定连接字符串 &#39;, 别名.列名) &quot;列名展示&quot; \n      FROM 表名 别名 JOIN 表名 别名\n      WHERE 别名.列名 &#x3D; 别名.列名;</code></pre>\n\n<h6 id=\"同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\"><a href=\"#同CONCAT-s1-s2-…-函数，但是每个字符串之间要加上x\" class=\"headerlink\" title=\"# 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x\"></a># 同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">CONCAT_WS(指定字符串对每个参数进行连接,s1,s2,......,sn);</code></pre>\n\n<h6 id=\"将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"><a href=\"#将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\" class=\"headerlink\" title=\"# 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）\"></a># 将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr（字符串的索引是从1开始的）</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">INSERT(str, idx(索引位置), len,replacestr(需要替换的字符串))</code></pre>\n\n<h6 id=\"用字符串b替换字符串str中所有出现的字符串a\"><a href=\"#用字符串b替换字符串str中所有出现的字符串a\" class=\"headerlink\" title=\"# 用字符串b替换字符串str中所有出现的字符串a\"></a># 用字符串b替换字符串str中所有出现的字符串a</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPLACE(str, a(需要要替换的字符串), b(替换上的字符串))</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成大写字母\"><a href=\"#将字符串s的所有字母转成大写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成大写字母\"></a># 将字符串s的所有字母转成大写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">UPPER(s) 或 UCASE(s)</code></pre>\n\n<h6 id=\"将字符串s的所有字母转成小写字母\"><a href=\"#将字符串s的所有字母转成小写字母\" class=\"headerlink\" title=\"# 将字符串s的所有字母转成小写字母\"></a># 将字符串s的所有字母转成小写字母</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOWER(s) 或LCASE(s)</code></pre>\n\n<h6 id=\"返回字符串str最左边的n个字符\"><a href=\"#返回字符串str最左边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最左边的n个字符\"></a># 返回字符串str最左边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LEFT(str,n(从最左边，根据数值取出字符))</code></pre>\n\n<h6 id=\"返回字符串str最右边的n个字符\"><a href=\"#返回字符串str最右边的n个字符\" class=\"headerlink\" title=\"# 返回字符串str最右边的n个字符\"></a># 返回字符串str最右边的n个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RIGHT(str,n(从最右边，根据数值取出字符))</code></pre>\n\n<h6 id=\"用字符串pad对str最左边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最左边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最左边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最左边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LPAD: 实现右对齐效果\nLPAD(str, len(需要占满多少位置), pad(不够使用值进行补齐))</code></pre>\n\n<h6 id=\"用字符串pad对str最右边进行填充，直到str的长度为len个字符\"><a href=\"#用字符串pad对str最右边进行填充，直到str的长度为len个字符\" class=\"headerlink\" title=\"# 用字符串pad对str最右边进行填充，直到str的长度为len个字符\"></a># 用字符串pad对str最右边进行填充，直到str的长度为len个字符</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RPAD: 实现左对齐效果\nRPAD(str ,len, pad)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的空格\"><a href=\"#去掉字符串s开始与结尾的空格\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的空格\"></a># 去掉字符串s开始与结尾的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s左侧的空格\"><a href=\"#去掉字符串s左侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s左侧的空格\"></a># 去掉字符串s左侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s右侧的空格\"><a href=\"#去掉字符串s右侧的空格\" class=\"headerlink\" title=\"# 去掉字符串s右侧的空格\"></a># 去掉字符串s右侧的空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">RTRIM(s)</code></pre>\n\n<h6 id=\"去掉字符串s开始与结尾的s1\"><a href=\"#去掉字符串s开始与结尾的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始与结尾的s1\"></a># 去掉字符串s开始与结尾的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(s1 FROM s)\n例子：TRIM(&#39;字符串&#39;(首尾出现进行去除) FROM &#39;字符串&#39;(首尾出现相同的字符串则进行去除));</code></pre>\n\n<h6 id=\"去掉字符串s开始处的s1\"><a href=\"#去掉字符串s开始处的s1\" class=\"headerlink\" title=\"# 去掉字符串s开始处的s1\"></a># 去掉字符串s开始处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(LEADING s1FROM s)</code></pre>\n\n<h6 id=\"去掉字符串s结尾处的s1\"><a href=\"#去掉字符串s结尾处的s1\" class=\"headerlink\" title=\"# 去掉字符串s结尾处的s1\"></a># 去掉字符串s结尾处的s1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">TRIM(TRAILING s1FROM s)</code></pre>\n\n<h6 id=\"返回str重复n次的结果\"><a href=\"#返回str重复n次的结果\" class=\"headerlink\" title=\"# 返回str重复n次的结果\"></a># 返回str重复n次的结果</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REPEAT(str, n(数值，重复的次数))</code></pre>\n\n<h6 id=\"返回n个空格\"><a href=\"#返回n个空格\" class=\"headerlink\" title=\"# 返回n个空格\"></a># 返回n个空格</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SPACE(n)</code></pre>\n\n<h6 id=\"比较字符串s1-s2的ASCII码值的大小\"><a href=\"#比较字符串s1-s2的ASCII码值的大小\" class=\"headerlink\" title=\"# 比较字符串s1,s2的ASCII码值的大小\"></a># 比较字符串s1,s2的ASCII码值的大小</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">STRCMP(s1,s2)</code></pre>\n\n<h6 id=\"返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\"><a href=\"#返回从字符串s的index位置其len个字符，作用与SUBSTRING-s-n-len-、MID-s-n-len-相同\" class=\"headerlink\" title=\"# 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同\"></a># 返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">SUBSTR(s,index(),len(取的长度))</code></pre>\n\n<h6 id=\"返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\"><a href=\"#返回字符串substr在字符串str中首次出现的位置，作用于POSITION-substrIN-str-、INSTR-str-substr-相同。\" class=\"headerlink\" title=\"# 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。\"></a># 返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substrIN str)、INSTR(str,substr)相同。</h6><h6 id=\"未找到，返回0\"><a href=\"#未找到，返回0\" class=\"headerlink\" title=\"未找到，返回0\"></a>未找到，返回0</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">LOCATE(substr,str)</code></pre>\n\n<h6 id=\"返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\"><a href=\"#返回指定位置的字符串，如果m-1，则返回s1，如果m-2，则返回s2，如果m-n，则返回sn\" class=\"headerlink\" title=\"# 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\\"></a># 返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如果m=n，则返回sn\\</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">ELT(m,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s在字符串列表中第一次出现的位置\"><a href=\"#返回字符串s在字符串列表中第一次出现的位置\" class=\"headerlink\" title=\"# 返回字符串s在字符串列表中第一次出现的位置\"></a># 返回字符串s在字符串列表中第一次出现的位置</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIELD(s,s1,s2,…,sn)</code></pre>\n\n<h6 id=\"返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"><a href=\"#返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\" class=\"headerlink\" title=\"# 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串\"></a># 返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">FIND_IN_SET(s1,s2)</code></pre>\n\n<h6 id=\"返回s反转后的字符串\"><a href=\"#返回s反转后的字符串\" class=\"headerlink\" title=\"# 返回s反转后的字符串\"></a># 返回s反转后的字符串</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">REVERSE(s)</code></pre>\n\n<h6 id=\"比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"><a href=\"#比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\" class=\"headerlink\" title=\"# 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1\"></a># 比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">NULLIF(value1,value2)</code></pre>\n\n<p>注意：MySQL中，字符串的位置是从1开始的。</p>\n"},{"title":"Docker 容器的使用","date":"2022-12-06T08:00:12.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 获取容器\n我们可以使用docker pull 命令来下载 centos镜像\n```shell\n$ docker pull centos8\n```\n# 启动容器\n```shell\n$ docker run -it centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- centos8：centos8镜像\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n\n如果要退出终端那就使用\n```shell\n$ exit\n```\n# 查看所有容器\n```shell\n$ docker ps -a\n```\n# 启动一个已经停止的容器\n```shell\n$ docker start b750bbbcfd88(容器id)\n```\n# 停止一个已经启动的容器\n```shell\n$ docker stop b750bbbcfd88(容器id)\n```\n# 后台运行容器(不想进入容器的时候)\n```shell\n$ docker -itd --name content_8 centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- --name: 运行时指定容器的名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 进入容器\n在使用参数 `-d` 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令\n```shell\n$ docker exec -it [容器ID] /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 导入和导出容器\n## 导出容器\n如果要导出到本地的某个容器, 可以使用 `docker export` 命令\n```shell\n$ docker export [容器ID] > centos8.tar\n```\n> 导出容器ID到本地文件的 centos8.tar\n\n## 导入容器\n```shell\n$ cat docker/ubuntu.tar | docker import - test/ubuntu:v1\n```\n此外, 还可以通过指定URL或某个目录来导入\n```shell\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n## 删除容器\n```shell\n$ docker rm -f [容器ID]\n```\n清除所有处于终止状态下的容器\n```shell\n$ docker container prune\n```\n\n","source":"_posts/docker/Docker 容器的使用.md","raw":"---\ntitle: Docker 容器的使用\ndate: 2022/12/06 16:00:12\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 容器\n  - container\n---\n\n# 获取容器\n我们可以使用docker pull 命令来下载 centos镜像\n```shell\n$ docker pull centos8\n```\n# 启动容器\n```shell\n$ docker run -it centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- centos8：centos8镜像\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n\n如果要退出终端那就使用\n```shell\n$ exit\n```\n# 查看所有容器\n```shell\n$ docker ps -a\n```\n# 启动一个已经停止的容器\n```shell\n$ docker start b750bbbcfd88(容器id)\n```\n# 停止一个已经启动的容器\n```shell\n$ docker stop b750bbbcfd88(容器id)\n```\n# 后台运行容器(不想进入容器的时候)\n```shell\n$ docker -itd --name content_8 centos8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- --name: 运行时指定容器的名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 进入容器\n在使用参数 `-d` 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令\n```shell\n$ docker exec -it [容器ID] /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n# 导入和导出容器\n## 导出容器\n如果要导出到本地的某个容器, 可以使用 `docker export` 命令\n```shell\n$ docker export [容器ID] > centos8.tar\n```\n> 导出容器ID到本地文件的 centos8.tar\n\n## 导入容器\n```shell\n$ cat docker/ubuntu.tar | docker import - test/ubuntu:v1\n```\n此外, 还可以通过指定URL或某个目录来导入\n```shell\n$ docker import http://example.com/exampleimage.tgz example/imagerepo\n```\n## 删除容器\n```shell\n$ docker rm -f [容器ID]\n```\n清除所有处于终止状态下的容器\n```shell\n$ docker container prune\n```\n\n","slug":"docker/Docker 容器的使用","published":1,"updated":"2023-01-04T12:47:40.220Z","_id":"clchoo7ae0000mwxgesecgwgs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"获取容器\"><a href=\"#获取容器\" class=\"headerlink\" title=\"获取容器\"></a>获取容器</h1><p>我们可以使用docker pull 命令来下载 centos镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull centos8</code></pre>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-i：交互式操作</li>\n<li>-t: 终端</li>\n<li>centos8：centos8镜像</li>\n<li>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</li>\n</ul>\n<p>如果要退出终端那就使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ exit</code></pre>\n<h1 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker ps -a</code></pre>\n<h1 id=\"启动一个已经停止的容器\"><a href=\"#启动一个已经停止的容器\" class=\"headerlink\" title=\"启动一个已经停止的容器\"></a>启动一个已经停止的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker start b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"停止一个已经启动的容器\"><a href=\"#停止一个已经启动的容器\" class=\"headerlink\" title=\"停止一个已经启动的容器\"></a>停止一个已经启动的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker stop b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"后台运行容器-不想进入容器的时候\"><a href=\"#后台运行容器-不想进入容器的时候\" class=\"headerlink\" title=\"后台运行容器(不想进入容器的时候)\"></a>后台运行容器(不想进入容器的时候)</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker -itd --name content_8 centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>–name: 运行时指定容器的名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用参数 <code>-d</code> 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker exec -it [容器ID] &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2></li>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出到本地的某个容器, 可以使用 <code>docker export</code> 命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker export [容器ID] &gt; centos8.tar</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>导出容器ID到本地文件的 centos8.tar</p></blockquote>\n</li>\n</ul>\n<h2 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</code></pre>\n<p>此外, 还可以通过指定URL或某个目录来导入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</code></pre>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rm -f [容器ID]</code></pre>\n<p>清除所有处于终止状态下的容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker container prune</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"获取容器\"><a href=\"#获取容器\" class=\"headerlink\" title=\"获取容器\"></a>获取容器</h1><p>我们可以使用docker pull 命令来下载 centos镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull centos8</code></pre>\n<h1 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run -it centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li>-i：交互式操作</li>\n<li>-t: 终端</li>\n<li>centos8：centos8镜像</li>\n<li>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</li>\n</ul>\n<p>如果要退出终端那就使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ exit</code></pre>\n<h1 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker ps -a</code></pre>\n<h1 id=\"启动一个已经停止的容器\"><a href=\"#启动一个已经停止的容器\" class=\"headerlink\" title=\"启动一个已经停止的容器\"></a>启动一个已经停止的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker start b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"停止一个已经启动的容器\"><a href=\"#停止一个已经启动的容器\" class=\"headerlink\" title=\"停止一个已经启动的容器\"></a>停止一个已经启动的容器</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker stop b750bbbcfd88(容器id)</code></pre>\n<h1 id=\"后台运行容器-不想进入容器的时候\"><a href=\"#后台运行容器-不想进入容器的时候\" class=\"headerlink\" title=\"后台运行容器(不想进入容器的时候)\"></a>后台运行容器(不想进入容器的时候)</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker -itd --name content_8 centos8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>–name: 运行时指定容器的名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h1><p>在使用参数 <code>-d</code> 时, 容器会进入后台, 这个时候如果想要进入容器内部可以使用以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker exec -it [容器ID] &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明-2\"><a href=\"#参数说明-2\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2></li>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h1 id=\"导入和导出容器\"><a href=\"#导入和导出容器\" class=\"headerlink\" title=\"导入和导出容器\"></a>导入和导出容器</h1><h2 id=\"导出容器\"><a href=\"#导出容器\" class=\"headerlink\" title=\"导出容器\"></a>导出容器</h2><p>如果要导出到本地的某个容器, 可以使用 <code>docker export</code> 命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker export [容器ID] &gt; centos8.tar</code></pre>\n<blockquote>\n<p>导出容器ID到本地文件的 centos8.tar</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"导入容器\"><a href=\"#导入容器\" class=\"headerlink\" title=\"导入容器\"></a>导入容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</code></pre>\n<p>此外, 还可以通过指定URL或某个目录来导入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</code></pre>\n<h2 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rm -f [容器ID]</code></pre>\n<p>清除所有处于终止状态下的容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker container prune</code></pre>\n\n"},{"title":"Docker 容器的使用","date":"2023-01-03T07:13:50.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 网络端口映射\n有以下两种端口映射方式\n```shell\ndocker run -itd -P --name centos8 dokken/centos-8 /bin/bash\n```\n```shell\ndocker run -itd -p 1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- -p 1000:22 :以指定的1000端口映射容器的22端口\n- -P: 容器内部端口随机映射到主机端口\n- --name: 容器别名\n- dokken/centos-8: 容器源名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n## 区别\n\n- -P :是容器内部端口随机映射到主机的端口。\n- -p : 是容器内部端口绑定到指定的主机端口。\n\n另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1\n```shell\ndocker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n这样我们就可以通过` 127.0.0.1:1000 `来访问容器的22端口了\n","source":"_posts/docker/Docker 容器连接.md","raw":"---\ntitle: Docker 容器的使用\ndate: 2023/1/3 15:13:50\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 容器\n  - container\n---\n\n# 网络端口映射\n有以下两种端口映射方式\n```shell\ndocker run -itd -P --name centos8 dokken/centos-8 /bin/bash\n```\n```shell\ndocker run -itd -p 1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n## 参数说明\n\n- -i：交互式操作\n- -t: 终端\n- -d: 后台运行\n- -p 1000:22 :以指定的1000端口映射容器的22端口\n- -P: 容器内部端口随机映射到主机端口\n- --name: 容器别名\n- dokken/centos-8: 容器源名称\n- /bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash\n## 区别\n\n- -P :是容器内部端口随机映射到主机的端口。\n- -p : 是容器内部端口绑定到指定的主机端口。\n\n另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1\n```shell\ndocker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken/centos-8 /bin/bash\n```\n这样我们就可以通过` 127.0.0.1:1000 `来访问容器的22端口了\n","slug":"docker/Docker 容器连接","published":1,"updated":"2023-01-04T12:47:40.220Z","_id":"clchoo7ak0001mwxg0ppm2rrk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h1><p>有以下两种端口映射方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -P --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>-p 1000:22 :以指定的1000端口映射容器的22端口</p>\n</li>\n<li><p>-P: 容器内部端口随机映射到主机端口</p>\n</li>\n<li><p>–name: 容器别名</p>\n</li>\n<li><p>dokken/centos-8: 容器源名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2></li>\n<li><p>-P :是容器内部端口随机映射到主机的端口。</p>\n</li>\n<li><p>-p : 是容器内部端口绑定到指定的主机端口。</p>\n</li>\n</ul>\n<p>另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<p>这样我们就可以通过<code>127.0.0.1:1000</code>来访问容器的22端口了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"网络端口映射\"><a href=\"#网络端口映射\" class=\"headerlink\" title=\"网络端口映射\"></a>网络端口映射</h1><p>有以下两种端口映射方式</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -P --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<h2 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h2><ul>\n<li><p>-i：交互式操作</p>\n</li>\n<li><p>-t: 终端</p>\n</li>\n<li><p>-d: 后台运行</p>\n</li>\n<li><p>-p 1000:22 :以指定的1000端口映射容器的22端口</p>\n</li>\n<li><p>-P: 容器内部端口随机映射到主机端口</p>\n</li>\n<li><p>–name: 容器别名</p>\n</li>\n<li><p>dokken/centos-8: 容器源名称</p>\n</li>\n<li><p>/bin/bash：这里我们希望有一个交互式的 Shell ，因此用的就是 /bin/bash</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2></li>\n<li><p>-P :是容器内部端口随机映射到主机的端口。</p>\n</li>\n<li><p>-p : 是容器内部端口绑定到指定的主机端口。</p>\n</li>\n</ul>\n<p>另外, 我们可以指定容器绑定的网络地址, 比如绑定 127.0.0.1</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -itd -p 127.0.0.1:1000:22 --name centos8 dokken&#x2F;centos-8 &#x2F;bin&#x2F;bash</code></pre>\n<p>这样我们就可以通过<code>127.0.0.1:1000</code>来访问容器的22端口了</p>\n"},{"title":"Docker 镜像的使用","date":"2023-01-03T07:15:43.000Z","cover":"https://www.helloimg.com/images/2023/01/03/oCD5cE.png","_content":"\n# 列出镜像列表\n我们可以使用 `docker images` 来列出本地主机上的镜像\n```shell\n$ docker images\n```\n![image.png](https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png)\n## 选项说明\n\n- REPOSITORY: 表示镜像的仓库源\n- TAG:　镜像的标签\n- IMAGE ID: 镜像ID\n- CREATED: 镜像的创建时间\n- SIZE: 镜像大小\n> 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n# 获取一个新的镜像\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n```shell\ndocker pull centos:8\n```\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n# 查找镜像\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： [https://hub.docker.com/](https://hub.docker.com/)\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n```shell\n$ docker search httpd\n```\n![image.png](https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png)\n## 选项说明\n\n- NAME: 镜像仓库源名称\n- DESCRIPTION: 镜像的描述\n- OFFICIAL: 是否 docker 官方发布\n- STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\n- AUTOMATED: 自动构建。\n# 拖取镜像\n```shell\n$ docker pull httpd\n```\n下载完后我们就可以使用这个镜像了\n```shell\n$ docker run httpd\n```\n# 删除镜像\n```shell\n$ docker rmi httpd\n```\n","source":"_posts/docker/Docker 镜像的使用.md","raw":"---\ntitle: Docker 镜像的使用\ndate: 2023/1/3 15:15:43\ncover: https://www.helloimg.com/images/2023/01/03/oCD5cE.png\ncategories:\n  - Docker\ntags:\n  - Docker\n  - 镜像\n  - images\n---\n\n# 列出镜像列表\n我们可以使用 `docker images` 来列出本地主机上的镜像\n```shell\n$ docker images\n```\n![image.png](https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png)\n## 选项说明\n\n- REPOSITORY: 表示镜像的仓库源\n- TAG:　镜像的标签\n- IMAGE ID: 镜像ID\n- CREATED: 镜像的创建时间\n- SIZE: 镜像大小\n> 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。\n\n# 获取一个新的镜像\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n```shell\ndocker pull centos:8\n```\n当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。\n# 查找镜像\n我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： [https://hub.docker.com/](https://hub.docker.com/)\n我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。\n```shell\n$ docker search httpd\n```\n![image.png](https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png)\n## 选项说明\n\n- NAME: 镜像仓库源名称\n- DESCRIPTION: 镜像的描述\n- OFFICIAL: 是否 docker 官方发布\n- STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。\n- AUTOMATED: 自动构建。\n# 拖取镜像\n```shell\n$ docker pull httpd\n```\n下载完后我们就可以使用这个镜像了\n```shell\n$ docker run httpd\n```\n# 删除镜像\n```shell\n$ docker rmi httpd\n```\n","slug":"docker/Docker 镜像的使用","published":1,"updated":"2023-01-04T12:47:40.221Z","_id":"clchoo7b8000imwxg90txgjx1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h1><p>我们可以使用 <code>docker images</code> 来列出本地主机上的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker images</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>REPOSITORY: 表示镜像的仓库源</li>\n<li>TAG:　镜像的标签</li>\n<li>IMAGE ID: 镜像ID</li>\n<li>CREATED: 镜像的创建时间</li>\n<li>SIZE: 镜像大小<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p></blockquote>\n</li>\n</ul>\n<h1 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h1><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull centos:8</code></pre>\n<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h1 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h1><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a><br>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker search httpd</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明-1\"><a href=\"#选项说明-1\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>NAME: 镜像仓库源名称</li>\n<li>DESCRIPTION: 镜像的描述</li>\n<li>OFFICIAL: 是否 docker 官方发布</li>\n<li>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li>\n<li>AUTOMATED: 自动构建。<h1 id=\"拖取镜像\"><a href=\"#拖取镜像\" class=\"headerlink\" title=\"拖取镜像\"></a>拖取镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull httpd</code></pre>\n下载完后我们就可以使用这个镜像了<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run httpd</code></pre>\n<h1 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rmi httpd</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"列出镜像列表\"><a href=\"#列出镜像列表\" class=\"headerlink\" title=\"列出镜像列表\"></a>列出镜像列表</h1><p>我们可以使用 <code>docker images</code> 来列出本地主机上的镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker images</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/jYuRFcMDSm1Orlx.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>REPOSITORY: 表示镜像的仓库源</li>\n<li>TAG:　镜像的标签</li>\n<li>IMAGE ID: 镜像ID</li>\n<li>CREATED: 镜像的创建时间</li>\n<li>SIZE: 镜像大小<blockquote>\n<p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"获取一个新的镜像\"><a href=\"#获取一个新的镜像\" class=\"headerlink\" title=\"获取一个新的镜像\"></a>获取一个新的镜像</h1><p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker pull centos:8</code></pre>\n<p>当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。</p>\n<h1 id=\"查找镜像\"><a href=\"#查找镜像\" class=\"headerlink\" title=\"查找镜像\"></a>查找镜像</h1><p>我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a><br>我们也可以使用 docker search 命令来搜索镜像。比如我们需要一个 httpd 的镜像来作为我们的 web 服务。我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker search httpd</code></pre>\n<p><img src=\"https://s2.loli.net/2023/01/03/zlKVAxekZowgcYq.png\" alt=\"image.png\"></p>\n<h2 id=\"选项说明-1\"><a href=\"#选项说明-1\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h2><ul>\n<li>NAME: 镜像仓库源名称</li>\n<li>DESCRIPTION: 镜像的描述</li>\n<li>OFFICIAL: 是否 docker 官方发布</li>\n<li>STARS: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li>\n<li>AUTOMATED: 自动构建。<h1 id=\"拖取镜像\"><a href=\"#拖取镜像\" class=\"headerlink\" title=\"拖取镜像\"></a>拖取镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker pull httpd</code></pre>\n下载完后我们就可以使用这个镜像了<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker run httpd</code></pre>\n<h1 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ docker rmi httpd</code></pre></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clchoo7ae0000mwxgesecgwgs","category_id":"clchoo7ao0002mwxgc7kkcanm","_id":"clchoo7ay0006mwxgaacpbwm1"},{"post_id":"clchoo7ak0001mwxg0ppm2rrk","category_id":"clchoo7ao0002mwxgc7kkcanm","_id":"clchoo7az0008mwxg4mtcf3s5"},{"post_id":"clchoo7b8000imwxg90txgjx1","category_id":"clchoo7ao0002mwxgc7kkcanm","_id":"clchoo7ba000kmwxgdc3s0tkq"},{"post_id":"clchohnsk00018sxg3rnq13ye","category_id":"clchoqzax000pmwxg1l5f2lry","_id":"clchoqzay000qmwxgeib2di7u"}],"PostTag":[{"post_id":"clchoo7ae0000mwxgesecgwgs","tag_id":"clchoo7aq0003mwxg0tm4144e","_id":"clchoo7b1000amwxgaoxbfu52"},{"post_id":"clchoo7ae0000mwxgesecgwgs","tag_id":"clchoo7as0005mwxgf8kj03hg","_id":"clchoo7b2000bmwxg6o0l1v84"},{"post_id":"clchoo7ae0000mwxgesecgwgs","tag_id":"clchoo7ay0007mwxg222kcfz8","_id":"clchoo7b3000dmwxgdwj62udf"},{"post_id":"clchoo7ak0001mwxg0ppm2rrk","tag_id":"clchoo7aq0003mwxg0tm4144e","_id":"clchoo7b6000fmwxgf89ya44z"},{"post_id":"clchoo7ak0001mwxg0ppm2rrk","tag_id":"clchoo7as0005mwxgf8kj03hg","_id":"clchoo7b6000gmwxg10kp1xhp"},{"post_id":"clchoo7ak0001mwxg0ppm2rrk","tag_id":"clchoo7ay0007mwxg222kcfz8","_id":"clchoo7b6000hmwxg55i13nob"},{"post_id":"clchoo7b8000imwxg90txgjx1","tag_id":"clchoo7aq0003mwxg0tm4144e","_id":"clchoo7bb000mmwxgfqqm9ygo"},{"post_id":"clchoo7b8000imwxg90txgjx1","tag_id":"clchoo7ba000jmwxg9bmh1jhf","_id":"clchoo7bb000nmwxghvj9eu43"},{"post_id":"clchoo7b8000imwxg90txgjx1","tag_id":"clchoo7ba000lmwxgdqz8b019","_id":"clchoo7bb000omwxg8smzdvoz"},{"post_id":"clchohnsk00018sxg3rnq13ye","tag_id":"clchoro9s000rmwxgaqhjg3c2","_id":"clchoro9t000smwxgd862am1e"},{"post_id":"clchohnsk00018sxg3rnq13ye","tag_id":"clchorwsj000tmwxg1iybdlxj","_id":"clchorwsj000umwxgebq64v6z"}],"Tag":[{"name":"Docker","_id":"clchoo7aq0003mwxg0tm4144e"},{"name":"容器","_id":"clchoo7as0005mwxgf8kj03hg"},{"name":"container","_id":"clchoo7ay0007mwxg222kcfz8"},{"name":"镜像","_id":"clchoo7ba000jmwxg9bmh1jhf"},{"name":"images","_id":"clchoo7ba000lmwxgdqz8b019"},{"name":"mysql","_id":"clchoro9s000rmwxgaqhjg3c2"},{"name":"语句","_id":"clchorwsj000tmwxg1iybdlxj"}]}}